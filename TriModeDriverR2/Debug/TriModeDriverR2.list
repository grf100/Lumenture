
TriModeDriverR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080061c0  080061c0  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006488  08006488  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006488  08006488  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006488  08006488  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006488  08006488  00007488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800648c  0800648c  0000748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006490  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000060  080064f0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080064f0  00008418  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0f2  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff4  00000000  00000000  0001717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000760a  00000000  00000000  0001916e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00020778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000936  00000000  00000000  000212d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc11  00000000  00000000  00021c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000403f  00000000  00000000  0002f81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0003385e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  000338a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00035cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061a8 	.word	0x080061a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080061a8 	.word	0x080061a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fed9 	bl	8001fe8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fe19 	bl	8001e78 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fecb 	bl	8001fe8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fec1 	bl	8001fe8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fe43 	bl	8001f00 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fe39 	bl	8001f00 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb8b 	bl	80009c0 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fb0b 	bl	80008d0 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb7d 	bl	80009c0 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb73 	bl	80009c0 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb19 	bl	8000920 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fb0f 	bl	8000920 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	@ 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fe7d 	bl	8001020 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	@ 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 fcd3 	bl	8000cd8 <__aeabi_fsub>
 8000332:	f000 fe75 	bl	8001020 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	@ 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__aeabi_d2uiz>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2200      	movs	r2, #0
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <__aeabi_d2uiz+0x38>)
 8000346:	0004      	movs	r4, r0
 8000348:	000d      	movs	r5, r1
 800034a:	f7ff ff9d 	bl	8000288 <__aeabi_dcmpge>
 800034e:	2800      	cmp	r0, #0
 8000350:	d104      	bne.n	800035c <__aeabi_d2uiz+0x1c>
 8000352:	0020      	movs	r0, r4
 8000354:	0029      	movs	r1, r5
 8000356:	f002 fd3f 	bl	8002dd8 <__aeabi_d2iz>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <__aeabi_d2uiz+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	0020      	movs	r0, r4
 8000362:	0029      	movs	r1, r5
 8000364:	f002 f97a 	bl	800265c <__aeabi_dsub>
 8000368:	f002 fd36 	bl	8002dd8 <__aeabi_d2iz>
 800036c:	2380      	movs	r3, #128	@ 0x80
 800036e:	061b      	lsls	r3, r3, #24
 8000370:	469c      	mov	ip, r3
 8000372:	4460      	add	r0, ip
 8000374:	e7f1      	b.n	800035a <__aeabi_d2uiz+0x1a>
 8000376:	46c0      	nop			@ (mov r8, r8)
 8000378:	41e00000 	.word	0x41e00000

0800037c <__aeabi_fadd>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	46ce      	mov	lr, r9
 8000380:	4647      	mov	r7, r8
 8000382:	0243      	lsls	r3, r0, #9
 8000384:	0a5a      	lsrs	r2, r3, #9
 8000386:	024e      	lsls	r6, r1, #9
 8000388:	0045      	lsls	r5, r0, #1
 800038a:	0fc4      	lsrs	r4, r0, #31
 800038c:	0048      	lsls	r0, r1, #1
 800038e:	4691      	mov	r9, r2
 8000390:	0e2d      	lsrs	r5, r5, #24
 8000392:	0a72      	lsrs	r2, r6, #9
 8000394:	0e00      	lsrs	r0, r0, #24
 8000396:	4694      	mov	ip, r2
 8000398:	b580      	push	{r7, lr}
 800039a:	099b      	lsrs	r3, r3, #6
 800039c:	0fc9      	lsrs	r1, r1, #31
 800039e:	09b6      	lsrs	r6, r6, #6
 80003a0:	1a2a      	subs	r2, r5, r0
 80003a2:	428c      	cmp	r4, r1
 80003a4:	d021      	beq.n	80003ea <__aeabi_fadd+0x6e>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	dd0d      	ble.n	80003c6 <__aeabi_fadd+0x4a>
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d12d      	bne.n	800040a <__aeabi_fadd+0x8e>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d100      	bne.n	80003b4 <__aeabi_fadd+0x38>
 80003b2:	e08d      	b.n	80004d0 <__aeabi_fadd+0x154>
 80003b4:	1e51      	subs	r1, r2, #1
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	d100      	bne.n	80003bc <__aeabi_fadd+0x40>
 80003ba:	e11d      	b.n	80005f8 <__aeabi_fadd+0x27c>
 80003bc:	2aff      	cmp	r2, #255	@ 0xff
 80003be:	d100      	bne.n	80003c2 <__aeabi_fadd+0x46>
 80003c0:	e0ab      	b.n	800051a <__aeabi_fadd+0x19e>
 80003c2:	000a      	movs	r2, r1
 80003c4:	e027      	b.n	8000416 <__aeabi_fadd+0x9a>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	d04d      	beq.n	8000466 <__aeabi_fadd+0xea>
 80003ca:	1b42      	subs	r2, r0, r5
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d000      	beq.n	80003d2 <__aeabi_fadd+0x56>
 80003d0:	e0cc      	b.n	800056c <__aeabi_fadd+0x1f0>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d100      	bne.n	80003d8 <__aeabi_fadd+0x5c>
 80003d6:	e079      	b.n	80004cc <__aeabi_fadd+0x150>
 80003d8:	1e54      	subs	r4, r2, #1
 80003da:	2a01      	cmp	r2, #1
 80003dc:	d100      	bne.n	80003e0 <__aeabi_fadd+0x64>
 80003de:	e128      	b.n	8000632 <__aeabi_fadd+0x2b6>
 80003e0:	2aff      	cmp	r2, #255	@ 0xff
 80003e2:	d100      	bne.n	80003e6 <__aeabi_fadd+0x6a>
 80003e4:	e097      	b.n	8000516 <__aeabi_fadd+0x19a>
 80003e6:	0022      	movs	r2, r4
 80003e8:	e0c5      	b.n	8000576 <__aeabi_fadd+0x1fa>
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	dc00      	bgt.n	80003f0 <__aeabi_fadd+0x74>
 80003ee:	e096      	b.n	800051e <__aeabi_fadd+0x1a2>
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d04f      	beq.n	8000494 <__aeabi_fadd+0x118>
 80003f4:	2dff      	cmp	r5, #255	@ 0xff
 80003f6:	d100      	bne.n	80003fa <__aeabi_fadd+0x7e>
 80003f8:	e08f      	b.n	800051a <__aeabi_fadd+0x19e>
 80003fa:	2180      	movs	r1, #128	@ 0x80
 80003fc:	04c9      	lsls	r1, r1, #19
 80003fe:	430e      	orrs	r6, r1
 8000400:	2a1b      	cmp	r2, #27
 8000402:	dd51      	ble.n	80004a8 <__aeabi_fadd+0x12c>
 8000404:	002a      	movs	r2, r5
 8000406:	3301      	adds	r3, #1
 8000408:	e018      	b.n	800043c <__aeabi_fadd+0xc0>
 800040a:	2dff      	cmp	r5, #255	@ 0xff
 800040c:	d100      	bne.n	8000410 <__aeabi_fadd+0x94>
 800040e:	e084      	b.n	800051a <__aeabi_fadd+0x19e>
 8000410:	2180      	movs	r1, #128	@ 0x80
 8000412:	04c9      	lsls	r1, r1, #19
 8000414:	430e      	orrs	r6, r1
 8000416:	2101      	movs	r1, #1
 8000418:	2a1b      	cmp	r2, #27
 800041a:	dc08      	bgt.n	800042e <__aeabi_fadd+0xb2>
 800041c:	0031      	movs	r1, r6
 800041e:	2020      	movs	r0, #32
 8000420:	40d1      	lsrs	r1, r2
 8000422:	1a82      	subs	r2, r0, r2
 8000424:	4096      	lsls	r6, r2
 8000426:	0032      	movs	r2, r6
 8000428:	1e50      	subs	r0, r2, #1
 800042a:	4182      	sbcs	r2, r0
 800042c:	4311      	orrs	r1, r2
 800042e:	1a5b      	subs	r3, r3, r1
 8000430:	015a      	lsls	r2, r3, #5
 8000432:	d459      	bmi.n	80004e8 <__aeabi_fadd+0x16c>
 8000434:	2107      	movs	r1, #7
 8000436:	002a      	movs	r2, r5
 8000438:	4019      	ands	r1, r3
 800043a:	d049      	beq.n	80004d0 <__aeabi_fadd+0x154>
 800043c:	210f      	movs	r1, #15
 800043e:	4019      	ands	r1, r3
 8000440:	2904      	cmp	r1, #4
 8000442:	d000      	beq.n	8000446 <__aeabi_fadd+0xca>
 8000444:	3304      	adds	r3, #4
 8000446:	0159      	lsls	r1, r3, #5
 8000448:	d542      	bpl.n	80004d0 <__aeabi_fadd+0x154>
 800044a:	1c50      	adds	r0, r2, #1
 800044c:	2afe      	cmp	r2, #254	@ 0xfe
 800044e:	d03a      	beq.n	80004c6 <__aeabi_fadd+0x14a>
 8000450:	019b      	lsls	r3, r3, #6
 8000452:	b2c0      	uxtb	r0, r0
 8000454:	0a5b      	lsrs	r3, r3, #9
 8000456:	05c0      	lsls	r0, r0, #23
 8000458:	4318      	orrs	r0, r3
 800045a:	07e4      	lsls	r4, r4, #31
 800045c:	4320      	orrs	r0, r4
 800045e:	bcc0      	pop	{r6, r7}
 8000460:	46b9      	mov	r9, r7
 8000462:	46b0      	mov	r8, r6
 8000464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000466:	20fe      	movs	r0, #254	@ 0xfe
 8000468:	4680      	mov	r8, r0
 800046a:	1c6f      	adds	r7, r5, #1
 800046c:	0038      	movs	r0, r7
 800046e:	4647      	mov	r7, r8
 8000470:	4207      	tst	r7, r0
 8000472:	d000      	beq.n	8000476 <__aeabi_fadd+0xfa>
 8000474:	e08e      	b.n	8000594 <__aeabi_fadd+0x218>
 8000476:	2d00      	cmp	r5, #0
 8000478:	d000      	beq.n	800047c <__aeabi_fadd+0x100>
 800047a:	e0b4      	b.n	80005e6 <__aeabi_fadd+0x26a>
 800047c:	2b00      	cmp	r3, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_fadd+0x106>
 8000480:	e0db      	b.n	800063a <__aeabi_fadd+0x2be>
 8000482:	2e00      	cmp	r6, #0
 8000484:	d06c      	beq.n	8000560 <__aeabi_fadd+0x1e4>
 8000486:	1b98      	subs	r0, r3, r6
 8000488:	0145      	lsls	r5, r0, #5
 800048a:	d400      	bmi.n	800048e <__aeabi_fadd+0x112>
 800048c:	e0f7      	b.n	800067e <__aeabi_fadd+0x302>
 800048e:	000c      	movs	r4, r1
 8000490:	1af3      	subs	r3, r6, r3
 8000492:	e03d      	b.n	8000510 <__aeabi_fadd+0x194>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d01b      	beq.n	80004d0 <__aeabi_fadd+0x154>
 8000498:	1e51      	subs	r1, r2, #1
 800049a:	2a01      	cmp	r2, #1
 800049c:	d100      	bne.n	80004a0 <__aeabi_fadd+0x124>
 800049e:	e082      	b.n	80005a6 <__aeabi_fadd+0x22a>
 80004a0:	2aff      	cmp	r2, #255	@ 0xff
 80004a2:	d03a      	beq.n	800051a <__aeabi_fadd+0x19e>
 80004a4:	000a      	movs	r2, r1
 80004a6:	e7ab      	b.n	8000400 <__aeabi_fadd+0x84>
 80004a8:	0031      	movs	r1, r6
 80004aa:	2020      	movs	r0, #32
 80004ac:	40d1      	lsrs	r1, r2
 80004ae:	1a82      	subs	r2, r0, r2
 80004b0:	4096      	lsls	r6, r2
 80004b2:	0032      	movs	r2, r6
 80004b4:	1e50      	subs	r0, r2, #1
 80004b6:	4182      	sbcs	r2, r0
 80004b8:	430a      	orrs	r2, r1
 80004ba:	189b      	adds	r3, r3, r2
 80004bc:	015a      	lsls	r2, r3, #5
 80004be:	d5b9      	bpl.n	8000434 <__aeabi_fadd+0xb8>
 80004c0:	1c6a      	adds	r2, r5, #1
 80004c2:	2dfe      	cmp	r5, #254	@ 0xfe
 80004c4:	d175      	bne.n	80005b2 <__aeabi_fadd+0x236>
 80004c6:	20ff      	movs	r0, #255	@ 0xff
 80004c8:	2300      	movs	r3, #0
 80004ca:	e7c4      	b.n	8000456 <__aeabi_fadd+0xda>
 80004cc:	000c      	movs	r4, r1
 80004ce:	0033      	movs	r3, r6
 80004d0:	08db      	lsrs	r3, r3, #3
 80004d2:	2aff      	cmp	r2, #255	@ 0xff
 80004d4:	d146      	bne.n	8000564 <__aeabi_fadd+0x1e8>
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f5      	beq.n	80004c6 <__aeabi_fadd+0x14a>
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	03d2      	lsls	r2, r2, #15
 80004de:	4313      	orrs	r3, r2
 80004e0:	025b      	lsls	r3, r3, #9
 80004e2:	20ff      	movs	r0, #255	@ 0xff
 80004e4:	0a5b      	lsrs	r3, r3, #9
 80004e6:	e7b6      	b.n	8000456 <__aeabi_fadd+0xda>
 80004e8:	019f      	lsls	r7, r3, #6
 80004ea:	09bf      	lsrs	r7, r7, #6
 80004ec:	0038      	movs	r0, r7
 80004ee:	f002 fda9 	bl	8003044 <__clzsi2>
 80004f2:	3805      	subs	r0, #5
 80004f4:	4087      	lsls	r7, r0
 80004f6:	4285      	cmp	r5, r0
 80004f8:	dc24      	bgt.n	8000544 <__aeabi_fadd+0x1c8>
 80004fa:	003b      	movs	r3, r7
 80004fc:	2120      	movs	r1, #32
 80004fe:	1b42      	subs	r2, r0, r5
 8000500:	3201      	adds	r2, #1
 8000502:	40d3      	lsrs	r3, r2
 8000504:	1a8a      	subs	r2, r1, r2
 8000506:	4097      	lsls	r7, r2
 8000508:	1e7a      	subs	r2, r7, #1
 800050a:	4197      	sbcs	r7, r2
 800050c:	2200      	movs	r2, #0
 800050e:	433b      	orrs	r3, r7
 8000510:	0759      	lsls	r1, r3, #29
 8000512:	d193      	bne.n	800043c <__aeabi_fadd+0xc0>
 8000514:	e797      	b.n	8000446 <__aeabi_fadd+0xca>
 8000516:	000c      	movs	r4, r1
 8000518:	0033      	movs	r3, r6
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	e7db      	b.n	80004d6 <__aeabi_fadd+0x15a>
 800051e:	2a00      	cmp	r2, #0
 8000520:	d014      	beq.n	800054c <__aeabi_fadd+0x1d0>
 8000522:	1b42      	subs	r2, r0, r5
 8000524:	2d00      	cmp	r5, #0
 8000526:	d14b      	bne.n	80005c0 <__aeabi_fadd+0x244>
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0d0      	beq.n	80004ce <__aeabi_fadd+0x152>
 800052c:	1e51      	subs	r1, r2, #1
 800052e:	2a01      	cmp	r2, #1
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x1b8>
 8000532:	e09e      	b.n	8000672 <__aeabi_fadd+0x2f6>
 8000534:	2aff      	cmp	r2, #255	@ 0xff
 8000536:	d0ef      	beq.n	8000518 <__aeabi_fadd+0x19c>
 8000538:	000a      	movs	r2, r1
 800053a:	2a1b      	cmp	r2, #27
 800053c:	dd5f      	ble.n	80005fe <__aeabi_fadd+0x282>
 800053e:	0002      	movs	r2, r0
 8000540:	1c73      	adds	r3, r6, #1
 8000542:	e77b      	b.n	800043c <__aeabi_fadd+0xc0>
 8000544:	4b50      	ldr	r3, [pc, #320]	@ (8000688 <__aeabi_fadd+0x30c>)
 8000546:	1a2a      	subs	r2, r5, r0
 8000548:	403b      	ands	r3, r7
 800054a:	e7e1      	b.n	8000510 <__aeabi_fadd+0x194>
 800054c:	21fe      	movs	r1, #254	@ 0xfe
 800054e:	1c6a      	adds	r2, r5, #1
 8000550:	4211      	tst	r1, r2
 8000552:	d13b      	bne.n	80005cc <__aeabi_fadd+0x250>
 8000554:	2d00      	cmp	r5, #0
 8000556:	d15d      	bne.n	8000614 <__aeabi_fadd+0x298>
 8000558:	2b00      	cmp	r3, #0
 800055a:	d07f      	beq.n	800065c <__aeabi_fadd+0x2e0>
 800055c:	2e00      	cmp	r6, #0
 800055e:	d17f      	bne.n	8000660 <__aeabi_fadd+0x2e4>
 8000560:	2200      	movs	r2, #0
 8000562:	08db      	lsrs	r3, r3, #3
 8000564:	025b      	lsls	r3, r3, #9
 8000566:	0a5b      	lsrs	r3, r3, #9
 8000568:	b2d0      	uxtb	r0, r2
 800056a:	e774      	b.n	8000456 <__aeabi_fadd+0xda>
 800056c:	28ff      	cmp	r0, #255	@ 0xff
 800056e:	d0d2      	beq.n	8000516 <__aeabi_fadd+0x19a>
 8000570:	2480      	movs	r4, #128	@ 0x80
 8000572:	04e4      	lsls	r4, r4, #19
 8000574:	4323      	orrs	r3, r4
 8000576:	2401      	movs	r4, #1
 8000578:	2a1b      	cmp	r2, #27
 800057a:	dc07      	bgt.n	800058c <__aeabi_fadd+0x210>
 800057c:	001c      	movs	r4, r3
 800057e:	2520      	movs	r5, #32
 8000580:	40d4      	lsrs	r4, r2
 8000582:	1aaa      	subs	r2, r5, r2
 8000584:	4093      	lsls	r3, r2
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	4193      	sbcs	r3, r2
 800058a:	431c      	orrs	r4, r3
 800058c:	1b33      	subs	r3, r6, r4
 800058e:	0005      	movs	r5, r0
 8000590:	000c      	movs	r4, r1
 8000592:	e74d      	b.n	8000430 <__aeabi_fadd+0xb4>
 8000594:	1b9f      	subs	r7, r3, r6
 8000596:	017a      	lsls	r2, r7, #5
 8000598:	d422      	bmi.n	80005e0 <__aeabi_fadd+0x264>
 800059a:	2f00      	cmp	r7, #0
 800059c:	d1a6      	bne.n	80004ec <__aeabi_fadd+0x170>
 800059e:	2400      	movs	r4, #0
 80005a0:	2000      	movs	r0, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	e757      	b.n	8000456 <__aeabi_fadd+0xda>
 80005a6:	199b      	adds	r3, r3, r6
 80005a8:	2501      	movs	r5, #1
 80005aa:	3201      	adds	r2, #1
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0x236>
 80005b0:	e740      	b.n	8000434 <__aeabi_fadd+0xb8>
 80005b2:	2101      	movs	r1, #1
 80005b4:	4835      	ldr	r0, [pc, #212]	@ (800068c <__aeabi_fadd+0x310>)
 80005b6:	4019      	ands	r1, r3
 80005b8:	085b      	lsrs	r3, r3, #1
 80005ba:	4003      	ands	r3, r0
 80005bc:	430b      	orrs	r3, r1
 80005be:	e7a7      	b.n	8000510 <__aeabi_fadd+0x194>
 80005c0:	28ff      	cmp	r0, #255	@ 0xff
 80005c2:	d0a9      	beq.n	8000518 <__aeabi_fadd+0x19c>
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	04c9      	lsls	r1, r1, #19
 80005c8:	430b      	orrs	r3, r1
 80005ca:	e7b6      	b.n	800053a <__aeabi_fadd+0x1be>
 80005cc:	2aff      	cmp	r2, #255	@ 0xff
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x256>
 80005d0:	e779      	b.n	80004c6 <__aeabi_fadd+0x14a>
 80005d2:	199b      	adds	r3, r3, r6
 80005d4:	085b      	lsrs	r3, r3, #1
 80005d6:	0759      	lsls	r1, r3, #29
 80005d8:	d000      	beq.n	80005dc <__aeabi_fadd+0x260>
 80005da:	e72f      	b.n	800043c <__aeabi_fadd+0xc0>
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	e7c1      	b.n	8000564 <__aeabi_fadd+0x1e8>
 80005e0:	000c      	movs	r4, r1
 80005e2:	1af7      	subs	r7, r6, r3
 80005e4:	e782      	b.n	80004ec <__aeabi_fadd+0x170>
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d12c      	bne.n	8000644 <__aeabi_fadd+0x2c8>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d193      	bne.n	8000516 <__aeabi_fadd+0x19a>
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	2400      	movs	r4, #0
 80005f2:	20ff      	movs	r0, #255	@ 0xff
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	e72e      	b.n	8000456 <__aeabi_fadd+0xda>
 80005f8:	2501      	movs	r5, #1
 80005fa:	1b9b      	subs	r3, r3, r6
 80005fc:	e718      	b.n	8000430 <__aeabi_fadd+0xb4>
 80005fe:	0019      	movs	r1, r3
 8000600:	2520      	movs	r5, #32
 8000602:	40d1      	lsrs	r1, r2
 8000604:	1aaa      	subs	r2, r5, r2
 8000606:	4093      	lsls	r3, r2
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	4193      	sbcs	r3, r2
 800060c:	430b      	orrs	r3, r1
 800060e:	0005      	movs	r5, r0
 8000610:	199b      	adds	r3, r3, r6
 8000612:	e753      	b.n	80004bc <__aeabi_fadd+0x140>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x29e>
 8000618:	e77e      	b.n	8000518 <__aeabi_fadd+0x19c>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x2a4>
 800061e:	e77c      	b.n	800051a <__aeabi_fadd+0x19e>
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	03d2      	lsls	r2, r2, #15
 8000624:	4591      	cmp	r9, r2
 8000626:	d302      	bcc.n	800062e <__aeabi_fadd+0x2b2>
 8000628:	4594      	cmp	ip, r2
 800062a:	d200      	bcs.n	800062e <__aeabi_fadd+0x2b2>
 800062c:	0033      	movs	r3, r6
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	e753      	b.n	80004da <__aeabi_fadd+0x15e>
 8000632:	000c      	movs	r4, r1
 8000634:	1af3      	subs	r3, r6, r3
 8000636:	3501      	adds	r5, #1
 8000638:	e6fa      	b.n	8000430 <__aeabi_fadd+0xb4>
 800063a:	2e00      	cmp	r6, #0
 800063c:	d0af      	beq.n	800059e <__aeabi_fadd+0x222>
 800063e:	000c      	movs	r4, r1
 8000640:	0033      	movs	r3, r6
 8000642:	e78d      	b.n	8000560 <__aeabi_fadd+0x1e4>
 8000644:	2e00      	cmp	r6, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x2ce>
 8000648:	e767      	b.n	800051a <__aeabi_fadd+0x19e>
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	03d2      	lsls	r2, r2, #15
 800064e:	4591      	cmp	r9, r2
 8000650:	d3ed      	bcc.n	800062e <__aeabi_fadd+0x2b2>
 8000652:	4594      	cmp	ip, r2
 8000654:	d2eb      	bcs.n	800062e <__aeabi_fadd+0x2b2>
 8000656:	000c      	movs	r4, r1
 8000658:	0033      	movs	r3, r6
 800065a:	e7e8      	b.n	800062e <__aeabi_fadd+0x2b2>
 800065c:	0033      	movs	r3, r6
 800065e:	e77f      	b.n	8000560 <__aeabi_fadd+0x1e4>
 8000660:	199b      	adds	r3, r3, r6
 8000662:	2200      	movs	r2, #0
 8000664:	0159      	lsls	r1, r3, #5
 8000666:	d5b9      	bpl.n	80005dc <__aeabi_fadd+0x260>
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <__aeabi_fadd+0x30c>)
 800066a:	4013      	ands	r3, r2
 800066c:	08db      	lsrs	r3, r3, #3
 800066e:	2201      	movs	r2, #1
 8000670:	e778      	b.n	8000564 <__aeabi_fadd+0x1e8>
 8000672:	199b      	adds	r3, r3, r6
 8000674:	3201      	adds	r2, #1
 8000676:	3501      	adds	r5, #1
 8000678:	0159      	lsls	r1, r3, #5
 800067a:	d49a      	bmi.n	80005b2 <__aeabi_fadd+0x236>
 800067c:	e6da      	b.n	8000434 <__aeabi_fadd+0xb8>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d08d      	beq.n	800059e <__aeabi_fadd+0x222>
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	e76e      	b.n	8000564 <__aeabi_fadd+0x1e8>
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	fbffffff 	.word	0xfbffffff
 800068c:	7dffffff 	.word	0x7dffffff

08000690 <__aeabi_fdiv>:
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	464f      	mov	r7, r9
 8000694:	4646      	mov	r6, r8
 8000696:	46d6      	mov	lr, sl
 8000698:	0244      	lsls	r4, r0, #9
 800069a:	b5c0      	push	{r6, r7, lr}
 800069c:	0047      	lsls	r7, r0, #1
 800069e:	1c0e      	adds	r6, r1, #0
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	0e3f      	lsrs	r7, r7, #24
 80006a4:	0fc5      	lsrs	r5, r0, #31
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d03c      	beq.n	8000724 <__aeabi_fdiv+0x94>
 80006aa:	2fff      	cmp	r7, #255	@ 0xff
 80006ac:	d042      	beq.n	8000734 <__aeabi_fdiv+0xa4>
 80006ae:	2300      	movs	r3, #0
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	4699      	mov	r9, r3
 80006b4:	469a      	mov	sl, r3
 80006b6:	00e4      	lsls	r4, r4, #3
 80006b8:	04d2      	lsls	r2, r2, #19
 80006ba:	4314      	orrs	r4, r2
 80006bc:	3f7f      	subs	r7, #127	@ 0x7f
 80006be:	0273      	lsls	r3, r6, #9
 80006c0:	0a5b      	lsrs	r3, r3, #9
 80006c2:	4698      	mov	r8, r3
 80006c4:	0073      	lsls	r3, r6, #1
 80006c6:	0e1b      	lsrs	r3, r3, #24
 80006c8:	0ff6      	lsrs	r6, r6, #31
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d01b      	beq.n	8000706 <__aeabi_fdiv+0x76>
 80006ce:	2bff      	cmp	r3, #255	@ 0xff
 80006d0:	d013      	beq.n	80006fa <__aeabi_fdiv+0x6a>
 80006d2:	4642      	mov	r2, r8
 80006d4:	2180      	movs	r1, #128	@ 0x80
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	04c9      	lsls	r1, r1, #19
 80006da:	4311      	orrs	r1, r2
 80006dc:	4688      	mov	r8, r1
 80006de:	2000      	movs	r0, #0
 80006e0:	3b7f      	subs	r3, #127	@ 0x7f
 80006e2:	0029      	movs	r1, r5
 80006e4:	1aff      	subs	r7, r7, r3
 80006e6:	464b      	mov	r3, r9
 80006e8:	4071      	eors	r1, r6
 80006ea:	b2c9      	uxtb	r1, r1
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d900      	bls.n	80006f2 <__aeabi_fdiv+0x62>
 80006f0:	e0b5      	b.n	800085e <__aeabi_fdiv+0x1ce>
 80006f2:	4a74      	ldr	r2, [pc, #464]	@ (80008c4 <__aeabi_fdiv+0x234>)
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	58d3      	ldr	r3, [r2, r3]
 80006f8:	469f      	mov	pc, r3
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d13f      	bne.n	8000780 <__aeabi_fdiv+0xf0>
 8000700:	3fff      	subs	r7, #255	@ 0xff
 8000702:	3302      	adds	r3, #2
 8000704:	e003      	b.n	800070e <__aeabi_fdiv+0x7e>
 8000706:	4643      	mov	r3, r8
 8000708:	2b00      	cmp	r3, #0
 800070a:	d12d      	bne.n	8000768 <__aeabi_fdiv+0xd8>
 800070c:	2301      	movs	r3, #1
 800070e:	0029      	movs	r1, r5
 8000710:	464a      	mov	r2, r9
 8000712:	4071      	eors	r1, r6
 8000714:	b2c9      	uxtb	r1, r1
 8000716:	431a      	orrs	r2, r3
 8000718:	2a0e      	cmp	r2, #14
 800071a:	d838      	bhi.n	800078e <__aeabi_fdiv+0xfe>
 800071c:	486a      	ldr	r0, [pc, #424]	@ (80008c8 <__aeabi_fdiv+0x238>)
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	5882      	ldr	r2, [r0, r2]
 8000722:	4697      	mov	pc, r2
 8000724:	2c00      	cmp	r4, #0
 8000726:	d113      	bne.n	8000750 <__aeabi_fdiv+0xc0>
 8000728:	2304      	movs	r3, #4
 800072a:	4699      	mov	r9, r3
 800072c:	3b03      	subs	r3, #3
 800072e:	2700      	movs	r7, #0
 8000730:	469a      	mov	sl, r3
 8000732:	e7c4      	b.n	80006be <__aeabi_fdiv+0x2e>
 8000734:	2c00      	cmp	r4, #0
 8000736:	d105      	bne.n	8000744 <__aeabi_fdiv+0xb4>
 8000738:	2308      	movs	r3, #8
 800073a:	4699      	mov	r9, r3
 800073c:	3b06      	subs	r3, #6
 800073e:	27ff      	movs	r7, #255	@ 0xff
 8000740:	469a      	mov	sl, r3
 8000742:	e7bc      	b.n	80006be <__aeabi_fdiv+0x2e>
 8000744:	230c      	movs	r3, #12
 8000746:	4699      	mov	r9, r3
 8000748:	3b09      	subs	r3, #9
 800074a:	27ff      	movs	r7, #255	@ 0xff
 800074c:	469a      	mov	sl, r3
 800074e:	e7b6      	b.n	80006be <__aeabi_fdiv+0x2e>
 8000750:	0020      	movs	r0, r4
 8000752:	f002 fc77 	bl	8003044 <__clzsi2>
 8000756:	2776      	movs	r7, #118	@ 0x76
 8000758:	1f43      	subs	r3, r0, #5
 800075a:	409c      	lsls	r4, r3
 800075c:	2300      	movs	r3, #0
 800075e:	427f      	negs	r7, r7
 8000760:	4699      	mov	r9, r3
 8000762:	469a      	mov	sl, r3
 8000764:	1a3f      	subs	r7, r7, r0
 8000766:	e7aa      	b.n	80006be <__aeabi_fdiv+0x2e>
 8000768:	4640      	mov	r0, r8
 800076a:	f002 fc6b 	bl	8003044 <__clzsi2>
 800076e:	4642      	mov	r2, r8
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409a      	lsls	r2, r3
 8000774:	2376      	movs	r3, #118	@ 0x76
 8000776:	425b      	negs	r3, r3
 8000778:	1a1b      	subs	r3, r3, r0
 800077a:	4690      	mov	r8, r2
 800077c:	2000      	movs	r0, #0
 800077e:	e7b0      	b.n	80006e2 <__aeabi_fdiv+0x52>
 8000780:	2303      	movs	r3, #3
 8000782:	464a      	mov	r2, r9
 8000784:	431a      	orrs	r2, r3
 8000786:	4691      	mov	r9, r2
 8000788:	2003      	movs	r0, #3
 800078a:	33fc      	adds	r3, #252	@ 0xfc
 800078c:	e7a9      	b.n	80006e2 <__aeabi_fdiv+0x52>
 800078e:	000d      	movs	r5, r1
 8000790:	20ff      	movs	r0, #255	@ 0xff
 8000792:	2200      	movs	r2, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	07ed      	lsls	r5, r5, #31
 8000798:	4310      	orrs	r0, r2
 800079a:	4328      	orrs	r0, r5
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	000d      	movs	r5, r1
 80007a8:	2000      	movs	r0, #0
 80007aa:	2200      	movs	r2, #0
 80007ac:	e7f2      	b.n	8000794 <__aeabi_fdiv+0x104>
 80007ae:	4653      	mov	r3, sl
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d0ed      	beq.n	8000790 <__aeabi_fdiv+0x100>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d033      	beq.n	8000820 <__aeabi_fdiv+0x190>
 80007b8:	46a0      	mov	r8, r4
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d105      	bne.n	80007ca <__aeabi_fdiv+0x13a>
 80007be:	2000      	movs	r0, #0
 80007c0:	2200      	movs	r2, #0
 80007c2:	e7e7      	b.n	8000794 <__aeabi_fdiv+0x104>
 80007c4:	0035      	movs	r5, r6
 80007c6:	2803      	cmp	r0, #3
 80007c8:	d07a      	beq.n	80008c0 <__aeabi_fdiv+0x230>
 80007ca:	003b      	movs	r3, r7
 80007cc:	337f      	adds	r3, #127	@ 0x7f
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd2d      	ble.n	800082e <__aeabi_fdiv+0x19e>
 80007d2:	4642      	mov	r2, r8
 80007d4:	0752      	lsls	r2, r2, #29
 80007d6:	d007      	beq.n	80007e8 <__aeabi_fdiv+0x158>
 80007d8:	220f      	movs	r2, #15
 80007da:	4641      	mov	r1, r8
 80007dc:	400a      	ands	r2, r1
 80007de:	2a04      	cmp	r2, #4
 80007e0:	d002      	beq.n	80007e8 <__aeabi_fdiv+0x158>
 80007e2:	2204      	movs	r2, #4
 80007e4:	4694      	mov	ip, r2
 80007e6:	44e0      	add	r8, ip
 80007e8:	4642      	mov	r2, r8
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	d505      	bpl.n	80007fa <__aeabi_fdiv+0x16a>
 80007ee:	4642      	mov	r2, r8
 80007f0:	4b36      	ldr	r3, [pc, #216]	@ (80008cc <__aeabi_fdiv+0x23c>)
 80007f2:	401a      	ands	r2, r3
 80007f4:	003b      	movs	r3, r7
 80007f6:	4690      	mov	r8, r2
 80007f8:	3380      	adds	r3, #128	@ 0x80
 80007fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80007fc:	dcc8      	bgt.n	8000790 <__aeabi_fdiv+0x100>
 80007fe:	4642      	mov	r2, r8
 8000800:	0192      	lsls	r2, r2, #6
 8000802:	0a52      	lsrs	r2, r2, #9
 8000804:	b2d8      	uxtb	r0, r3
 8000806:	e7c5      	b.n	8000794 <__aeabi_fdiv+0x104>
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	2500      	movs	r5, #0
 800080c:	20ff      	movs	r0, #255	@ 0xff
 800080e:	03d2      	lsls	r2, r2, #15
 8000810:	e7c0      	b.n	8000794 <__aeabi_fdiv+0x104>
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4214      	tst	r4, r2
 8000818:	d002      	beq.n	8000820 <__aeabi_fdiv+0x190>
 800081a:	4643      	mov	r3, r8
 800081c:	4213      	tst	r3, r2
 800081e:	d049      	beq.n	80008b4 <__aeabi_fdiv+0x224>
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	03d2      	lsls	r2, r2, #15
 8000824:	4322      	orrs	r2, r4
 8000826:	0252      	lsls	r2, r2, #9
 8000828:	20ff      	movs	r0, #255	@ 0xff
 800082a:	0a52      	lsrs	r2, r2, #9
 800082c:	e7b2      	b.n	8000794 <__aeabi_fdiv+0x104>
 800082e:	2201      	movs	r2, #1
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	2b1b      	cmp	r3, #27
 8000834:	dcc3      	bgt.n	80007be <__aeabi_fdiv+0x12e>
 8000836:	4642      	mov	r2, r8
 8000838:	40da      	lsrs	r2, r3
 800083a:	4643      	mov	r3, r8
 800083c:	379e      	adds	r7, #158	@ 0x9e
 800083e:	40bb      	lsls	r3, r7
 8000840:	1e59      	subs	r1, r3, #1
 8000842:	418b      	sbcs	r3, r1
 8000844:	431a      	orrs	r2, r3
 8000846:	0753      	lsls	r3, r2, #29
 8000848:	d004      	beq.n	8000854 <__aeabi_fdiv+0x1c4>
 800084a:	230f      	movs	r3, #15
 800084c:	4013      	ands	r3, r2
 800084e:	2b04      	cmp	r3, #4
 8000850:	d000      	beq.n	8000854 <__aeabi_fdiv+0x1c4>
 8000852:	3204      	adds	r2, #4
 8000854:	0153      	lsls	r3, r2, #5
 8000856:	d529      	bpl.n	80008ac <__aeabi_fdiv+0x21c>
 8000858:	2001      	movs	r0, #1
 800085a:	2200      	movs	r2, #0
 800085c:	e79a      	b.n	8000794 <__aeabi_fdiv+0x104>
 800085e:	4642      	mov	r2, r8
 8000860:	0163      	lsls	r3, r4, #5
 8000862:	0155      	lsls	r5, r2, #5
 8000864:	42ab      	cmp	r3, r5
 8000866:	d215      	bcs.n	8000894 <__aeabi_fdiv+0x204>
 8000868:	201b      	movs	r0, #27
 800086a:	2200      	movs	r2, #0
 800086c:	3f01      	subs	r7, #1
 800086e:	2601      	movs	r6, #1
 8000870:	001c      	movs	r4, r3
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2c00      	cmp	r4, #0
 8000878:	db01      	blt.n	800087e <__aeabi_fdiv+0x1ee>
 800087a:	429d      	cmp	r5, r3
 800087c:	d801      	bhi.n	8000882 <__aeabi_fdiv+0x1f2>
 800087e:	1b5b      	subs	r3, r3, r5
 8000880:	4332      	orrs	r2, r6
 8000882:	3801      	subs	r0, #1
 8000884:	2800      	cmp	r0, #0
 8000886:	d1f3      	bne.n	8000870 <__aeabi_fdiv+0x1e0>
 8000888:	1e58      	subs	r0, r3, #1
 800088a:	4183      	sbcs	r3, r0
 800088c:	4313      	orrs	r3, r2
 800088e:	4698      	mov	r8, r3
 8000890:	000d      	movs	r5, r1
 8000892:	e79a      	b.n	80007ca <__aeabi_fdiv+0x13a>
 8000894:	201a      	movs	r0, #26
 8000896:	2201      	movs	r2, #1
 8000898:	1b5b      	subs	r3, r3, r5
 800089a:	e7e8      	b.n	800086e <__aeabi_fdiv+0x1de>
 800089c:	3b02      	subs	r3, #2
 800089e:	425a      	negs	r2, r3
 80008a0:	4153      	adcs	r3, r2
 80008a2:	425b      	negs	r3, r3
 80008a4:	0035      	movs	r5, r6
 80008a6:	2200      	movs	r2, #0
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	e773      	b.n	8000794 <__aeabi_fdiv+0x104>
 80008ac:	0192      	lsls	r2, r2, #6
 80008ae:	2000      	movs	r0, #0
 80008b0:	0a52      	lsrs	r2, r2, #9
 80008b2:	e76f      	b.n	8000794 <__aeabi_fdiv+0x104>
 80008b4:	431a      	orrs	r2, r3
 80008b6:	0252      	lsls	r2, r2, #9
 80008b8:	0035      	movs	r5, r6
 80008ba:	20ff      	movs	r0, #255	@ 0xff
 80008bc:	0a52      	lsrs	r2, r2, #9
 80008be:	e769      	b.n	8000794 <__aeabi_fdiv+0x104>
 80008c0:	4644      	mov	r4, r8
 80008c2:	e7ad      	b.n	8000820 <__aeabi_fdiv+0x190>
 80008c4:	080061d0 	.word	0x080061d0
 80008c8:	08006210 	.word	0x08006210
 80008cc:	f7ffffff 	.word	0xf7ffffff

080008d0 <__eqsf2>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	024e      	lsls	r6, r1, #9
 80008d6:	004c      	lsls	r4, r1, #1
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	0a6d      	lsrs	r5, r5, #9
 80008dc:	0e12      	lsrs	r2, r2, #24
 80008de:	0fc3      	lsrs	r3, r0, #31
 80008e0:	0a76      	lsrs	r6, r6, #9
 80008e2:	0e24      	lsrs	r4, r4, #24
 80008e4:	0fc9      	lsrs	r1, r1, #31
 80008e6:	2aff      	cmp	r2, #255	@ 0xff
 80008e8:	d010      	beq.n	800090c <__eqsf2+0x3c>
 80008ea:	2cff      	cmp	r4, #255	@ 0xff
 80008ec:	d00c      	beq.n	8000908 <__eqsf2+0x38>
 80008ee:	2001      	movs	r0, #1
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	d10a      	bne.n	800090a <__eqsf2+0x3a>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d108      	bne.n	800090a <__eqsf2+0x3a>
 80008f8:	428b      	cmp	r3, r1
 80008fa:	d00f      	beq.n	800091c <__eqsf2+0x4c>
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	d104      	bne.n	800090a <__eqsf2+0x3a>
 8000900:	0028      	movs	r0, r5
 8000902:	1e43      	subs	r3, r0, #1
 8000904:	4198      	sbcs	r0, r3
 8000906:	e000      	b.n	800090a <__eqsf2+0x3a>
 8000908:	2001      	movs	r0, #1
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	2001      	movs	r0, #1
 800090e:	2cff      	cmp	r4, #255	@ 0xff
 8000910:	d1fb      	bne.n	800090a <__eqsf2+0x3a>
 8000912:	4335      	orrs	r5, r6
 8000914:	d1f9      	bne.n	800090a <__eqsf2+0x3a>
 8000916:	404b      	eors	r3, r1
 8000918:	0018      	movs	r0, r3
 800091a:	e7f6      	b.n	800090a <__eqsf2+0x3a>
 800091c:	2000      	movs	r0, #0
 800091e:	e7f4      	b.n	800090a <__eqsf2+0x3a>

08000920 <__gesf2>:
 8000920:	b530      	push	{r4, r5, lr}
 8000922:	0042      	lsls	r2, r0, #1
 8000924:	0244      	lsls	r4, r0, #9
 8000926:	024d      	lsls	r5, r1, #9
 8000928:	0fc3      	lsrs	r3, r0, #31
 800092a:	0048      	lsls	r0, r1, #1
 800092c:	0a64      	lsrs	r4, r4, #9
 800092e:	0e12      	lsrs	r2, r2, #24
 8000930:	0a6d      	lsrs	r5, r5, #9
 8000932:	0e00      	lsrs	r0, r0, #24
 8000934:	0fc9      	lsrs	r1, r1, #31
 8000936:	2aff      	cmp	r2, #255	@ 0xff
 8000938:	d019      	beq.n	800096e <__gesf2+0x4e>
 800093a:	28ff      	cmp	r0, #255	@ 0xff
 800093c:	d00b      	beq.n	8000956 <__gesf2+0x36>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d11e      	bne.n	8000980 <__gesf2+0x60>
 8000942:	2800      	cmp	r0, #0
 8000944:	d10b      	bne.n	800095e <__gesf2+0x3e>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d027      	beq.n	800099a <__gesf2+0x7a>
 800094a:	2c00      	cmp	r4, #0
 800094c:	d134      	bne.n	80009b8 <__gesf2+0x98>
 800094e:	2900      	cmp	r1, #0
 8000950:	d02f      	beq.n	80009b2 <__gesf2+0x92>
 8000952:	0008      	movs	r0, r1
 8000954:	bd30      	pop	{r4, r5, pc}
 8000956:	2d00      	cmp	r5, #0
 8000958:	d128      	bne.n	80009ac <__gesf2+0x8c>
 800095a:	2a00      	cmp	r2, #0
 800095c:	d101      	bne.n	8000962 <__gesf2+0x42>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d0f5      	beq.n	800094e <__gesf2+0x2e>
 8000962:	428b      	cmp	r3, r1
 8000964:	d107      	bne.n	8000976 <__gesf2+0x56>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d023      	beq.n	80009b2 <__gesf2+0x92>
 800096a:	0018      	movs	r0, r3
 800096c:	e7f2      	b.n	8000954 <__gesf2+0x34>
 800096e:	2c00      	cmp	r4, #0
 8000970:	d11c      	bne.n	80009ac <__gesf2+0x8c>
 8000972:	28ff      	cmp	r0, #255	@ 0xff
 8000974:	d014      	beq.n	80009a0 <__gesf2+0x80>
 8000976:	1e58      	subs	r0, r3, #1
 8000978:	2302      	movs	r3, #2
 800097a:	4018      	ands	r0, r3
 800097c:	3801      	subs	r0, #1
 800097e:	e7e9      	b.n	8000954 <__gesf2+0x34>
 8000980:	2800      	cmp	r0, #0
 8000982:	d0f8      	beq.n	8000976 <__gesf2+0x56>
 8000984:	428b      	cmp	r3, r1
 8000986:	d1f6      	bne.n	8000976 <__gesf2+0x56>
 8000988:	4282      	cmp	r2, r0
 800098a:	dcf4      	bgt.n	8000976 <__gesf2+0x56>
 800098c:	dbeb      	blt.n	8000966 <__gesf2+0x46>
 800098e:	42ac      	cmp	r4, r5
 8000990:	d8f1      	bhi.n	8000976 <__gesf2+0x56>
 8000992:	2000      	movs	r0, #0
 8000994:	42ac      	cmp	r4, r5
 8000996:	d2dd      	bcs.n	8000954 <__gesf2+0x34>
 8000998:	e7e5      	b.n	8000966 <__gesf2+0x46>
 800099a:	2c00      	cmp	r4, #0
 800099c:	d0da      	beq.n	8000954 <__gesf2+0x34>
 800099e:	e7ea      	b.n	8000976 <__gesf2+0x56>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d103      	bne.n	80009ac <__gesf2+0x8c>
 80009a4:	428b      	cmp	r3, r1
 80009a6:	d1e6      	bne.n	8000976 <__gesf2+0x56>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7d3      	b.n	8000954 <__gesf2+0x34>
 80009ac:	2002      	movs	r0, #2
 80009ae:	4240      	negs	r0, r0
 80009b0:	e7d0      	b.n	8000954 <__gesf2+0x34>
 80009b2:	2001      	movs	r0, #1
 80009b4:	4240      	negs	r0, r0
 80009b6:	e7cd      	b.n	8000954 <__gesf2+0x34>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	d0e8      	beq.n	800098e <__gesf2+0x6e>
 80009bc:	e7db      	b.n	8000976 <__gesf2+0x56>
 80009be:	46c0      	nop			@ (mov r8, r8)

080009c0 <__lesf2>:
 80009c0:	b530      	push	{r4, r5, lr}
 80009c2:	0042      	lsls	r2, r0, #1
 80009c4:	0244      	lsls	r4, r0, #9
 80009c6:	024d      	lsls	r5, r1, #9
 80009c8:	0fc3      	lsrs	r3, r0, #31
 80009ca:	0048      	lsls	r0, r1, #1
 80009cc:	0a64      	lsrs	r4, r4, #9
 80009ce:	0e12      	lsrs	r2, r2, #24
 80009d0:	0a6d      	lsrs	r5, r5, #9
 80009d2:	0e00      	lsrs	r0, r0, #24
 80009d4:	0fc9      	lsrs	r1, r1, #31
 80009d6:	2aff      	cmp	r2, #255	@ 0xff
 80009d8:	d01a      	beq.n	8000a10 <__lesf2+0x50>
 80009da:	28ff      	cmp	r0, #255	@ 0xff
 80009dc:	d00e      	beq.n	80009fc <__lesf2+0x3c>
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d11e      	bne.n	8000a20 <__lesf2+0x60>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d10e      	bne.n	8000a04 <__lesf2+0x44>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d02a      	beq.n	8000a40 <__lesf2+0x80>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d00c      	beq.n	8000a08 <__lesf2+0x48>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d01d      	beq.n	8000a2e <__lesf2+0x6e>
 80009f2:	1e58      	subs	r0, r3, #1
 80009f4:	2302      	movs	r3, #2
 80009f6:	4018      	ands	r0, r3
 80009f8:	3801      	subs	r0, #1
 80009fa:	e010      	b.n	8000a1e <__lesf2+0x5e>
 80009fc:	2d00      	cmp	r5, #0
 80009fe:	d10d      	bne.n	8000a1c <__lesf2+0x5c>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d120      	bne.n	8000a46 <__lesf2+0x86>
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	d11e      	bne.n	8000a46 <__lesf2+0x86>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d023      	beq.n	8000a54 <__lesf2+0x94>
 8000a0c:	0008      	movs	r0, r1
 8000a0e:	e006      	b.n	8000a1e <__lesf2+0x5e>
 8000a10:	2c00      	cmp	r4, #0
 8000a12:	d103      	bne.n	8000a1c <__lesf2+0x5c>
 8000a14:	28ff      	cmp	r0, #255	@ 0xff
 8000a16:	d1ec      	bne.n	80009f2 <__lesf2+0x32>
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d017      	beq.n	8000a4c <__lesf2+0x8c>
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	bd30      	pop	{r4, r5, pc}
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d0e6      	beq.n	80009f2 <__lesf2+0x32>
 8000a24:	428b      	cmp	r3, r1
 8000a26:	d1e4      	bne.n	80009f2 <__lesf2+0x32>
 8000a28:	4282      	cmp	r2, r0
 8000a2a:	dce2      	bgt.n	80009f2 <__lesf2+0x32>
 8000a2c:	db04      	blt.n	8000a38 <__lesf2+0x78>
 8000a2e:	42ac      	cmp	r4, r5
 8000a30:	d8df      	bhi.n	80009f2 <__lesf2+0x32>
 8000a32:	2000      	movs	r0, #0
 8000a34:	42ac      	cmp	r4, r5
 8000a36:	d2f2      	bcs.n	8000a1e <__lesf2+0x5e>
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <__lesf2+0x94>
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	e7ee      	b.n	8000a1e <__lesf2+0x5e>
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	d0ec      	beq.n	8000a1e <__lesf2+0x5e>
 8000a44:	e7d5      	b.n	80009f2 <__lesf2+0x32>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d1d3      	bne.n	80009f2 <__lesf2+0x32>
 8000a4a:	e7f5      	b.n	8000a38 <__lesf2+0x78>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d0e5      	beq.n	8000a1e <__lesf2+0x5e>
 8000a52:	e7ce      	b.n	80009f2 <__lesf2+0x32>
 8000a54:	2001      	movs	r0, #1
 8000a56:	4240      	negs	r0, r0
 8000a58:	e7e1      	b.n	8000a1e <__lesf2+0x5e>
 8000a5a:	46c0      	nop			@ (mov r8, r8)

08000a5c <__aeabi_fmul>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	464f      	mov	r7, r9
 8000a60:	4646      	mov	r6, r8
 8000a62:	46d6      	mov	lr, sl
 8000a64:	0243      	lsls	r3, r0, #9
 8000a66:	0a5b      	lsrs	r3, r3, #9
 8000a68:	0045      	lsls	r5, r0, #1
 8000a6a:	b5c0      	push	{r6, r7, lr}
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	1c0f      	adds	r7, r1, #0
 8000a70:	0e2d      	lsrs	r5, r5, #24
 8000a72:	0fc6      	lsrs	r6, r0, #31
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_fmul+0x1e>
 8000a78:	e088      	b.n	8000b8c <__aeabi_fmul+0x130>
 8000a7a:	2dff      	cmp	r5, #255	@ 0xff
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fmul+0x24>
 8000a7e:	e08d      	b.n	8000b9c <__aeabi_fmul+0x140>
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	04d2      	lsls	r2, r2, #19
 8000a86:	431a      	orrs	r2, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	469a      	mov	sl, r3
 8000a90:	3d7f      	subs	r5, #127	@ 0x7f
 8000a92:	027c      	lsls	r4, r7, #9
 8000a94:	007b      	lsls	r3, r7, #1
 8000a96:	0a64      	lsrs	r4, r4, #9
 8000a98:	0e1b      	lsrs	r3, r3, #24
 8000a9a:	0fff      	lsrs	r7, r7, #31
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d068      	beq.n	8000b72 <__aeabi_fmul+0x116>
 8000aa0:	2bff      	cmp	r3, #255	@ 0xff
 8000aa2:	d021      	beq.n	8000ae8 <__aeabi_fmul+0x8c>
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	00e4      	lsls	r4, r4, #3
 8000aa8:	04d2      	lsls	r2, r2, #19
 8000aaa:	4314      	orrs	r4, r2
 8000aac:	4642      	mov	r2, r8
 8000aae:	3b7f      	subs	r3, #127	@ 0x7f
 8000ab0:	195b      	adds	r3, r3, r5
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	1c5d      	adds	r5, r3, #1
 8000ab6:	2a0a      	cmp	r2, #10
 8000ab8:	dc2e      	bgt.n	8000b18 <__aeabi_fmul+0xbc>
 8000aba:	407e      	eors	r6, r7
 8000abc:	4642      	mov	r2, r8
 8000abe:	2a02      	cmp	r2, #2
 8000ac0:	dc23      	bgt.n	8000b0a <__aeabi_fmul+0xae>
 8000ac2:	3a01      	subs	r2, #1
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	d900      	bls.n	8000aca <__aeabi_fmul+0x6e>
 8000ac8:	e0bd      	b.n	8000c46 <__aeabi_fmul+0x1ea>
 8000aca:	2902      	cmp	r1, #2
 8000acc:	d06e      	beq.n	8000bac <__aeabi_fmul+0x150>
 8000ace:	2901      	cmp	r1, #1
 8000ad0:	d12c      	bne.n	8000b2c <__aeabi_fmul+0xd0>
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	05c0      	lsls	r0, r0, #23
 8000ad8:	07f6      	lsls	r6, r6, #31
 8000ada:	4310      	orrs	r0, r2
 8000adc:	4330      	orrs	r0, r6
 8000ade:	bce0      	pop	{r5, r6, r7}
 8000ae0:	46ba      	mov	sl, r7
 8000ae2:	46b1      	mov	r9, r6
 8000ae4:	46a8      	mov	r8, r5
 8000ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae8:	002b      	movs	r3, r5
 8000aea:	33ff      	adds	r3, #255	@ 0xff
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d065      	beq.n	8000bbc <__aeabi_fmul+0x160>
 8000af0:	2203      	movs	r2, #3
 8000af2:	4641      	mov	r1, r8
 8000af4:	4311      	orrs	r1, r2
 8000af6:	0032      	movs	r2, r6
 8000af8:	3501      	adds	r5, #1
 8000afa:	4688      	mov	r8, r1
 8000afc:	407a      	eors	r2, r7
 8000afe:	35ff      	adds	r5, #255	@ 0xff
 8000b00:	290a      	cmp	r1, #10
 8000b02:	dd00      	ble.n	8000b06 <__aeabi_fmul+0xaa>
 8000b04:	e0d8      	b.n	8000cb8 <__aeabi_fmul+0x25c>
 8000b06:	0016      	movs	r6, r2
 8000b08:	2103      	movs	r1, #3
 8000b0a:	4640      	mov	r0, r8
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4082      	lsls	r2, r0
 8000b10:	20a6      	movs	r0, #166	@ 0xa6
 8000b12:	00c0      	lsls	r0, r0, #3
 8000b14:	4202      	tst	r2, r0
 8000b16:	d020      	beq.n	8000b5a <__aeabi_fmul+0xfe>
 8000b18:	4653      	mov	r3, sl
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d046      	beq.n	8000bac <__aeabi_fmul+0x150>
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fmul+0xc8>
 8000b22:	e0bb      	b.n	8000c9c <__aeabi_fmul+0x240>
 8000b24:	4651      	mov	r1, sl
 8000b26:	464c      	mov	r4, r9
 8000b28:	2901      	cmp	r1, #1
 8000b2a:	d0d2      	beq.n	8000ad2 <__aeabi_fmul+0x76>
 8000b2c:	002b      	movs	r3, r5
 8000b2e:	337f      	adds	r3, #127	@ 0x7f
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dd70      	ble.n	8000c16 <__aeabi_fmul+0x1ba>
 8000b34:	0762      	lsls	r2, r4, #29
 8000b36:	d004      	beq.n	8000b42 <__aeabi_fmul+0xe6>
 8000b38:	220f      	movs	r2, #15
 8000b3a:	4022      	ands	r2, r4
 8000b3c:	2a04      	cmp	r2, #4
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_fmul+0xe6>
 8000b40:	3404      	adds	r4, #4
 8000b42:	0122      	lsls	r2, r4, #4
 8000b44:	d503      	bpl.n	8000b4e <__aeabi_fmul+0xf2>
 8000b46:	4b63      	ldr	r3, [pc, #396]	@ (8000cd4 <__aeabi_fmul+0x278>)
 8000b48:	401c      	ands	r4, r3
 8000b4a:	002b      	movs	r3, r5
 8000b4c:	3380      	adds	r3, #128	@ 0x80
 8000b4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b50:	dc2c      	bgt.n	8000bac <__aeabi_fmul+0x150>
 8000b52:	01a2      	lsls	r2, r4, #6
 8000b54:	0a52      	lsrs	r2, r2, #9
 8000b56:	b2d8      	uxtb	r0, r3
 8000b58:	e7bd      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000b5a:	2090      	movs	r0, #144	@ 0x90
 8000b5c:	0080      	lsls	r0, r0, #2
 8000b5e:	4202      	tst	r2, r0
 8000b60:	d127      	bne.n	8000bb2 <__aeabi_fmul+0x156>
 8000b62:	38b9      	subs	r0, #185	@ 0xb9
 8000b64:	38ff      	subs	r0, #255	@ 0xff
 8000b66:	4210      	tst	r0, r2
 8000b68:	d06d      	beq.n	8000c46 <__aeabi_fmul+0x1ea>
 8000b6a:	003e      	movs	r6, r7
 8000b6c:	46a1      	mov	r9, r4
 8000b6e:	468a      	mov	sl, r1
 8000b70:	e7d2      	b.n	8000b18 <__aeabi_fmul+0xbc>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d141      	bne.n	8000bfa <__aeabi_fmul+0x19e>
 8000b76:	2301      	movs	r3, #1
 8000b78:	4642      	mov	r2, r8
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	002b      	movs	r3, r5
 8000b80:	4642      	mov	r2, r8
 8000b82:	2101      	movs	r1, #1
 8000b84:	1c5d      	adds	r5, r3, #1
 8000b86:	2a0a      	cmp	r2, #10
 8000b88:	dd97      	ble.n	8000aba <__aeabi_fmul+0x5e>
 8000b8a:	e7c5      	b.n	8000b18 <__aeabi_fmul+0xbc>
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d126      	bne.n	8000bde <__aeabi_fmul+0x182>
 8000b90:	2304      	movs	r3, #4
 8000b92:	4698      	mov	r8, r3
 8000b94:	3b03      	subs	r3, #3
 8000b96:	2500      	movs	r5, #0
 8000b98:	469a      	mov	sl, r3
 8000b9a:	e77a      	b.n	8000a92 <__aeabi_fmul+0x36>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d118      	bne.n	8000bd2 <__aeabi_fmul+0x176>
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	3b06      	subs	r3, #6
 8000ba6:	25ff      	movs	r5, #255	@ 0xff
 8000ba8:	469a      	mov	sl, r3
 8000baa:	e772      	b.n	8000a92 <__aeabi_fmul+0x36>
 8000bac:	20ff      	movs	r0, #255	@ 0xff
 8000bae:	2200      	movs	r2, #0
 8000bb0:	e791      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	20ff      	movs	r0, #255	@ 0xff
 8000bb8:	03d2      	lsls	r2, r2, #15
 8000bba:	e78c      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000bbc:	4641      	mov	r1, r8
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	3501      	adds	r5, #1
 8000bc2:	4311      	orrs	r1, r2
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	35ff      	adds	r5, #255	@ 0xff
 8000bc8:	290a      	cmp	r1, #10
 8000bca:	dca5      	bgt.n	8000b18 <__aeabi_fmul+0xbc>
 8000bcc:	2102      	movs	r1, #2
 8000bce:	407e      	eors	r6, r7
 8000bd0:	e774      	b.n	8000abc <__aeabi_fmul+0x60>
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	3b09      	subs	r3, #9
 8000bd8:	25ff      	movs	r5, #255	@ 0xff
 8000bda:	469a      	mov	sl, r3
 8000bdc:	e759      	b.n	8000a92 <__aeabi_fmul+0x36>
 8000bde:	0018      	movs	r0, r3
 8000be0:	f002 fa30 	bl	8003044 <__clzsi2>
 8000be4:	464a      	mov	r2, r9
 8000be6:	1f43      	subs	r3, r0, #5
 8000be8:	2576      	movs	r5, #118	@ 0x76
 8000bea:	409a      	lsls	r2, r3
 8000bec:	2300      	movs	r3, #0
 8000bee:	426d      	negs	r5, r5
 8000bf0:	4691      	mov	r9, r2
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	1a2d      	subs	r5, r5, r0
 8000bf8:	e74b      	b.n	8000a92 <__aeabi_fmul+0x36>
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f002 fa22 	bl	8003044 <__clzsi2>
 8000c00:	4642      	mov	r2, r8
 8000c02:	1f43      	subs	r3, r0, #5
 8000c04:	409c      	lsls	r4, r3
 8000c06:	1a2b      	subs	r3, r5, r0
 8000c08:	3b76      	subs	r3, #118	@ 0x76
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	1c5d      	adds	r5, r3, #1
 8000c0e:	2a0a      	cmp	r2, #10
 8000c10:	dc00      	bgt.n	8000c14 <__aeabi_fmul+0x1b8>
 8000c12:	e752      	b.n	8000aba <__aeabi_fmul+0x5e>
 8000c14:	e780      	b.n	8000b18 <__aeabi_fmul+0xbc>
 8000c16:	2201      	movs	r2, #1
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b1b      	cmp	r3, #27
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_fmul+0x1c4>
 8000c1e:	e758      	b.n	8000ad2 <__aeabi_fmul+0x76>
 8000c20:	359e      	adds	r5, #158	@ 0x9e
 8000c22:	0022      	movs	r2, r4
 8000c24:	40ac      	lsls	r4, r5
 8000c26:	40da      	lsrs	r2, r3
 8000c28:	1e63      	subs	r3, r4, #1
 8000c2a:	419c      	sbcs	r4, r3
 8000c2c:	4322      	orrs	r2, r4
 8000c2e:	0753      	lsls	r3, r2, #29
 8000c30:	d004      	beq.n	8000c3c <__aeabi_fmul+0x1e0>
 8000c32:	230f      	movs	r3, #15
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fmul+0x1e0>
 8000c3a:	3204      	adds	r2, #4
 8000c3c:	0153      	lsls	r3, r2, #5
 8000c3e:	d537      	bpl.n	8000cb0 <__aeabi_fmul+0x254>
 8000c40:	2001      	movs	r0, #1
 8000c42:	2200      	movs	r2, #0
 8000c44:	e747      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000c46:	0c21      	lsrs	r1, r4, #16
 8000c48:	464a      	mov	r2, r9
 8000c4a:	0424      	lsls	r4, r4, #16
 8000c4c:	0c24      	lsrs	r4, r4, #16
 8000c4e:	0027      	movs	r7, r4
 8000c50:	0c10      	lsrs	r0, r2, #16
 8000c52:	0412      	lsls	r2, r2, #16
 8000c54:	0c12      	lsrs	r2, r2, #16
 8000c56:	4344      	muls	r4, r0
 8000c58:	4357      	muls	r7, r2
 8000c5a:	4348      	muls	r0, r1
 8000c5c:	4351      	muls	r1, r2
 8000c5e:	0c3a      	lsrs	r2, r7, #16
 8000c60:	1909      	adds	r1, r1, r4
 8000c62:	1852      	adds	r2, r2, r1
 8000c64:	4294      	cmp	r4, r2
 8000c66:	d903      	bls.n	8000c70 <__aeabi_fmul+0x214>
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	0249      	lsls	r1, r1, #9
 8000c6c:	468c      	mov	ip, r1
 8000c6e:	4460      	add	r0, ip
 8000c70:	043f      	lsls	r7, r7, #16
 8000c72:	0411      	lsls	r1, r2, #16
 8000c74:	0c3f      	lsrs	r7, r7, #16
 8000c76:	19c9      	adds	r1, r1, r7
 8000c78:	018c      	lsls	r4, r1, #6
 8000c7a:	1e67      	subs	r7, r4, #1
 8000c7c:	41bc      	sbcs	r4, r7
 8000c7e:	0c12      	lsrs	r2, r2, #16
 8000c80:	0e89      	lsrs	r1, r1, #26
 8000c82:	1812      	adds	r2, r2, r0
 8000c84:	430c      	orrs	r4, r1
 8000c86:	0192      	lsls	r2, r2, #6
 8000c88:	4314      	orrs	r4, r2
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	d50e      	bpl.n	8000cac <__aeabi_fmul+0x250>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	0862      	lsrs	r2, r4, #1
 8000c92:	401c      	ands	r4, r3
 8000c94:	4314      	orrs	r4, r2
 8000c96:	e749      	b.n	8000b2c <__aeabi_fmul+0xd0>
 8000c98:	003e      	movs	r6, r7
 8000c9a:	46a1      	mov	r9, r4
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	03d2      	lsls	r2, r2, #15
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	0252      	lsls	r2, r2, #9
 8000ca6:	20ff      	movs	r0, #255	@ 0xff
 8000ca8:	0a52      	lsrs	r2, r2, #9
 8000caa:	e714      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000cac:	001d      	movs	r5, r3
 8000cae:	e73d      	b.n	8000b2c <__aeabi_fmul+0xd0>
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	0a52      	lsrs	r2, r2, #9
 8000cb6:	e70e      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000cb8:	290f      	cmp	r1, #15
 8000cba:	d1ed      	bne.n	8000c98 <__aeabi_fmul+0x23c>
 8000cbc:	2280      	movs	r2, #128	@ 0x80
 8000cbe:	464b      	mov	r3, r9
 8000cc0:	03d2      	lsls	r2, r2, #15
 8000cc2:	4213      	tst	r3, r2
 8000cc4:	d0ea      	beq.n	8000c9c <__aeabi_fmul+0x240>
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d1e8      	bne.n	8000c9c <__aeabi_fmul+0x240>
 8000cca:	003e      	movs	r6, r7
 8000ccc:	20ff      	movs	r0, #255	@ 0xff
 8000cce:	4322      	orrs	r2, r4
 8000cd0:	e701      	b.n	8000ad6 <__aeabi_fmul+0x7a>
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	f7ffffff 	.word	0xf7ffffff

08000cd8 <__aeabi_fsub>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	4647      	mov	r7, r8
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	024e      	lsls	r6, r1, #9
 8000ce0:	0243      	lsls	r3, r0, #9
 8000ce2:	0045      	lsls	r5, r0, #1
 8000ce4:	0a72      	lsrs	r2, r6, #9
 8000ce6:	0fc4      	lsrs	r4, r0, #31
 8000ce8:	0048      	lsls	r0, r1, #1
 8000cea:	b580      	push	{r7, lr}
 8000cec:	4694      	mov	ip, r2
 8000cee:	0a5f      	lsrs	r7, r3, #9
 8000cf0:	0e2d      	lsrs	r5, r5, #24
 8000cf2:	099b      	lsrs	r3, r3, #6
 8000cf4:	0e00      	lsrs	r0, r0, #24
 8000cf6:	0fc9      	lsrs	r1, r1, #31
 8000cf8:	09b6      	lsrs	r6, r6, #6
 8000cfa:	28ff      	cmp	r0, #255	@ 0xff
 8000cfc:	d024      	beq.n	8000d48 <__aeabi_fsub+0x70>
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4051      	eors	r1, r2
 8000d02:	1a2a      	subs	r2, r5, r0
 8000d04:	428c      	cmp	r4, r1
 8000d06:	d00f      	beq.n	8000d28 <__aeabi_fsub+0x50>
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	dc00      	bgt.n	8000d0e <__aeabi_fsub+0x36>
 8000d0c:	e16a      	b.n	8000fe4 <__aeabi_fsub+0x30c>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d135      	bne.n	8000d7e <__aeabi_fsub+0xa6>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x40>
 8000d16:	e0a2      	b.n	8000e5e <__aeabi_fsub+0x186>
 8000d18:	1e51      	subs	r1, r2, #1
 8000d1a:	2a01      	cmp	r2, #1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fsub+0x48>
 8000d1e:	e124      	b.n	8000f6a <__aeabi_fsub+0x292>
 8000d20:	2aff      	cmp	r2, #255	@ 0xff
 8000d22:	d021      	beq.n	8000d68 <__aeabi_fsub+0x90>
 8000d24:	000a      	movs	r2, r1
 8000d26:	e02f      	b.n	8000d88 <__aeabi_fsub+0xb0>
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	dc00      	bgt.n	8000d2e <__aeabi_fsub+0x56>
 8000d2c:	e167      	b.n	8000ffe <__aeabi_fsub+0x326>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d05e      	beq.n	8000df0 <__aeabi_fsub+0x118>
 8000d32:	2dff      	cmp	r5, #255	@ 0xff
 8000d34:	d018      	beq.n	8000d68 <__aeabi_fsub+0x90>
 8000d36:	2180      	movs	r1, #128	@ 0x80
 8000d38:	04c9      	lsls	r1, r1, #19
 8000d3a:	430e      	orrs	r6, r1
 8000d3c:	2a1b      	cmp	r2, #27
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_fsub+0x6a>
 8000d40:	e076      	b.n	8000e30 <__aeabi_fsub+0x158>
 8000d42:	002a      	movs	r2, r5
 8000d44:	3301      	adds	r3, #1
 8000d46:	e032      	b.n	8000dae <__aeabi_fsub+0xd6>
 8000d48:	002a      	movs	r2, r5
 8000d4a:	3aff      	subs	r2, #255	@ 0xff
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d042      	beq.n	8000dd8 <__aeabi_fsub+0x100>
 8000d52:	428c      	cmp	r4, r1
 8000d54:	d055      	beq.n	8000e02 <__aeabi_fsub+0x12a>
 8000d56:	464a      	mov	r2, r9
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_fsub+0x86>
 8000d5c:	e09c      	b.n	8000e98 <__aeabi_fsub+0x1c0>
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x8c>
 8000d62:	e077      	b.n	8000e54 <__aeabi_fsub+0x17c>
 8000d64:	000c      	movs	r4, r1
 8000d66:	0033      	movs	r3, r6
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x98>
 8000d6e:	e06e      	b.n	8000e4e <__aeabi_fsub+0x176>
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	03d2      	lsls	r2, r2, #15
 8000d74:	4313      	orrs	r3, r2
 8000d76:	025b      	lsls	r3, r3, #9
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	0a5b      	lsrs	r3, r3, #9
 8000d7c:	e024      	b.n	8000dc8 <__aeabi_fsub+0xf0>
 8000d7e:	2dff      	cmp	r5, #255	@ 0xff
 8000d80:	d0f2      	beq.n	8000d68 <__aeabi_fsub+0x90>
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	04c9      	lsls	r1, r1, #19
 8000d86:	430e      	orrs	r6, r1
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2a1b      	cmp	r2, #27
 8000d8c:	dc08      	bgt.n	8000da0 <__aeabi_fsub+0xc8>
 8000d8e:	0031      	movs	r1, r6
 8000d90:	2020      	movs	r0, #32
 8000d92:	40d1      	lsrs	r1, r2
 8000d94:	1a82      	subs	r2, r0, r2
 8000d96:	4096      	lsls	r6, r2
 8000d98:	0032      	movs	r2, r6
 8000d9a:	1e50      	subs	r0, r2, #1
 8000d9c:	4182      	sbcs	r2, r0
 8000d9e:	4311      	orrs	r1, r2
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	015a      	lsls	r2, r3, #5
 8000da4:	d460      	bmi.n	8000e68 <__aeabi_fsub+0x190>
 8000da6:	2107      	movs	r1, #7
 8000da8:	002a      	movs	r2, r5
 8000daa:	4019      	ands	r1, r3
 8000dac:	d057      	beq.n	8000e5e <__aeabi_fsub+0x186>
 8000dae:	210f      	movs	r1, #15
 8000db0:	4019      	ands	r1, r3
 8000db2:	2904      	cmp	r1, #4
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fsub+0xe0>
 8000db6:	3304      	adds	r3, #4
 8000db8:	0159      	lsls	r1, r3, #5
 8000dba:	d550      	bpl.n	8000e5e <__aeabi_fsub+0x186>
 8000dbc:	1c50      	adds	r0, r2, #1
 8000dbe:	2afe      	cmp	r2, #254	@ 0xfe
 8000dc0:	d045      	beq.n	8000e4e <__aeabi_fsub+0x176>
 8000dc2:	019b      	lsls	r3, r3, #6
 8000dc4:	b2c0      	uxtb	r0, r0
 8000dc6:	0a5b      	lsrs	r3, r3, #9
 8000dc8:	05c0      	lsls	r0, r0, #23
 8000dca:	4318      	orrs	r0, r3
 8000dcc:	07e4      	lsls	r4, r4, #31
 8000dce:	4320      	orrs	r0, r4
 8000dd0:	bcc0      	pop	{r6, r7}
 8000dd2:	46b9      	mov	r9, r7
 8000dd4:	46b0      	mov	r8, r6
 8000dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4051      	eors	r1, r2
 8000ddc:	428c      	cmp	r4, r1
 8000dde:	d1ba      	bne.n	8000d56 <__aeabi_fsub+0x7e>
 8000de0:	464a      	mov	r2, r9
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d010      	beq.n	8000e08 <__aeabi_fsub+0x130>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x114>
 8000dea:	e098      	b.n	8000f1e <__aeabi_fsub+0x246>
 8000dec:	2300      	movs	r3, #0
 8000dee:	e7bb      	b.n	8000d68 <__aeabi_fsub+0x90>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d034      	beq.n	8000e5e <__aeabi_fsub+0x186>
 8000df4:	1e51      	subs	r1, r2, #1
 8000df6:	2a01      	cmp	r2, #1
 8000df8:	d06e      	beq.n	8000ed8 <__aeabi_fsub+0x200>
 8000dfa:	2aff      	cmp	r2, #255	@ 0xff
 8000dfc:	d0b4      	beq.n	8000d68 <__aeabi_fsub+0x90>
 8000dfe:	000a      	movs	r2, r1
 8000e00:	e79c      	b.n	8000d3c <__aeabi_fsub+0x64>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_fsub+0x130>
 8000e06:	e088      	b.n	8000f1a <__aeabi_fsub+0x242>
 8000e08:	20fe      	movs	r0, #254	@ 0xfe
 8000e0a:	1c6a      	adds	r2, r5, #1
 8000e0c:	4210      	tst	r0, r2
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_fsub+0x13a>
 8000e10:	e092      	b.n	8000f38 <__aeabi_fsub+0x260>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d000      	beq.n	8000e18 <__aeabi_fsub+0x140>
 8000e16:	e0a4      	b.n	8000f62 <__aeabi_fsub+0x28a>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x146>
 8000e1c:	e0cb      	b.n	8000fb6 <__aeabi_fsub+0x2de>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fsub+0x14c>
 8000e22:	e0ca      	b.n	8000fba <__aeabi_fsub+0x2e2>
 8000e24:	2200      	movs	r2, #0
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	025b      	lsls	r3, r3, #9
 8000e2a:	0a5b      	lsrs	r3, r3, #9
 8000e2c:	b2d0      	uxtb	r0, r2
 8000e2e:	e7cb      	b.n	8000dc8 <__aeabi_fsub+0xf0>
 8000e30:	0031      	movs	r1, r6
 8000e32:	2020      	movs	r0, #32
 8000e34:	40d1      	lsrs	r1, r2
 8000e36:	1a82      	subs	r2, r0, r2
 8000e38:	4096      	lsls	r6, r2
 8000e3a:	0032      	movs	r2, r6
 8000e3c:	1e50      	subs	r0, r2, #1
 8000e3e:	4182      	sbcs	r2, r0
 8000e40:	430a      	orrs	r2, r1
 8000e42:	189b      	adds	r3, r3, r2
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d5ae      	bpl.n	8000da6 <__aeabi_fsub+0xce>
 8000e48:	1c6a      	adds	r2, r5, #1
 8000e4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000e4c:	d14a      	bne.n	8000ee4 <__aeabi_fsub+0x20c>
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	2300      	movs	r3, #0
 8000e52:	e7b9      	b.n	8000dc8 <__aeabi_fsub+0xf0>
 8000e54:	22ff      	movs	r2, #255	@ 0xff
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d14b      	bne.n	8000ef2 <__aeabi_fsub+0x21a>
 8000e5a:	000c      	movs	r4, r1
 8000e5c:	0033      	movs	r3, r6
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	2aff      	cmp	r2, #255	@ 0xff
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fsub+0x18e>
 8000e64:	e781      	b.n	8000d6a <__aeabi_fsub+0x92>
 8000e66:	e7df      	b.n	8000e28 <__aeabi_fsub+0x150>
 8000e68:	019f      	lsls	r7, r3, #6
 8000e6a:	09bf      	lsrs	r7, r7, #6
 8000e6c:	0038      	movs	r0, r7
 8000e6e:	f002 f8e9 	bl	8003044 <__clzsi2>
 8000e72:	3805      	subs	r0, #5
 8000e74:	4087      	lsls	r7, r0
 8000e76:	4285      	cmp	r5, r0
 8000e78:	dc21      	bgt.n	8000ebe <__aeabi_fsub+0x1e6>
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	1b42      	subs	r2, r0, r5
 8000e80:	3201      	adds	r2, #1
 8000e82:	40d3      	lsrs	r3, r2
 8000e84:	1a8a      	subs	r2, r1, r2
 8000e86:	4097      	lsls	r7, r2
 8000e88:	1e7a      	subs	r2, r7, #1
 8000e8a:	4197      	sbcs	r7, r2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	433b      	orrs	r3, r7
 8000e90:	0759      	lsls	r1, r3, #29
 8000e92:	d000      	beq.n	8000e96 <__aeabi_fsub+0x1be>
 8000e94:	e78b      	b.n	8000dae <__aeabi_fsub+0xd6>
 8000e96:	e78f      	b.n	8000db8 <__aeabi_fsub+0xe0>
 8000e98:	20fe      	movs	r0, #254	@ 0xfe
 8000e9a:	1c6a      	adds	r2, r5, #1
 8000e9c:	4210      	tst	r0, r2
 8000e9e:	d112      	bne.n	8000ec6 <__aeabi_fsub+0x1ee>
 8000ea0:	2d00      	cmp	r5, #0
 8000ea2:	d152      	bne.n	8000f4a <__aeabi_fsub+0x272>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d07c      	beq.n	8000fa2 <__aeabi_fsub+0x2ca>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d0bb      	beq.n	8000e24 <__aeabi_fsub+0x14c>
 8000eac:	1b9a      	subs	r2, r3, r6
 8000eae:	0150      	lsls	r0, r2, #5
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_fsub+0x1dc>
 8000eb2:	e08b      	b.n	8000fcc <__aeabi_fsub+0x2f4>
 8000eb4:	2401      	movs	r4, #1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	1af3      	subs	r3, r6, r3
 8000eba:	400c      	ands	r4, r1
 8000ebc:	e7e8      	b.n	8000e90 <__aeabi_fsub+0x1b8>
 8000ebe:	4b56      	ldr	r3, [pc, #344]	@ (8001018 <__aeabi_fsub+0x340>)
 8000ec0:	1a2a      	subs	r2, r5, r0
 8000ec2:	403b      	ands	r3, r7
 8000ec4:	e7e4      	b.n	8000e90 <__aeabi_fsub+0x1b8>
 8000ec6:	1b9f      	subs	r7, r3, r6
 8000ec8:	017a      	lsls	r2, r7, #5
 8000eca:	d446      	bmi.n	8000f5a <__aeabi_fsub+0x282>
 8000ecc:	2f00      	cmp	r7, #0
 8000ece:	d1cd      	bne.n	8000e6c <__aeabi_fsub+0x194>
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e777      	b.n	8000dc8 <__aeabi_fsub+0xf0>
 8000ed8:	199b      	adds	r3, r3, r6
 8000eda:	2501      	movs	r5, #1
 8000edc:	3201      	adds	r2, #1
 8000ede:	0159      	lsls	r1, r3, #5
 8000ee0:	d400      	bmi.n	8000ee4 <__aeabi_fsub+0x20c>
 8000ee2:	e760      	b.n	8000da6 <__aeabi_fsub+0xce>
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	484d      	ldr	r0, [pc, #308]	@ (800101c <__aeabi_fsub+0x344>)
 8000ee8:	4019      	ands	r1, r3
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	4003      	ands	r3, r0
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	e7ce      	b.n	8000e90 <__aeabi_fsub+0x1b8>
 8000ef2:	1e57      	subs	r7, r2, #1
 8000ef4:	2a01      	cmp	r2, #1
 8000ef6:	d05a      	beq.n	8000fae <__aeabi_fsub+0x2d6>
 8000ef8:	000c      	movs	r4, r1
 8000efa:	2aff      	cmp	r2, #255	@ 0xff
 8000efc:	d033      	beq.n	8000f66 <__aeabi_fsub+0x28e>
 8000efe:	2201      	movs	r2, #1
 8000f00:	2f1b      	cmp	r7, #27
 8000f02:	dc07      	bgt.n	8000f14 <__aeabi_fsub+0x23c>
 8000f04:	2120      	movs	r1, #32
 8000f06:	1bc9      	subs	r1, r1, r7
 8000f08:	001a      	movs	r2, r3
 8000f0a:	408b      	lsls	r3, r1
 8000f0c:	40fa      	lsrs	r2, r7
 8000f0e:	1e59      	subs	r1, r3, #1
 8000f10:	418b      	sbcs	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	0005      	movs	r5, r0
 8000f16:	1ab3      	subs	r3, r6, r2
 8000f18:	e743      	b.n	8000da2 <__aeabi_fsub+0xca>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d123      	bne.n	8000f66 <__aeabi_fsub+0x28e>
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d09b      	beq.n	8000e5c <__aeabi_fsub+0x184>
 8000f24:	1e51      	subs	r1, r2, #1
 8000f26:	2a01      	cmp	r2, #1
 8000f28:	d0d6      	beq.n	8000ed8 <__aeabi_fsub+0x200>
 8000f2a:	2aff      	cmp	r2, #255	@ 0xff
 8000f2c:	d01b      	beq.n	8000f66 <__aeabi_fsub+0x28e>
 8000f2e:	291b      	cmp	r1, #27
 8000f30:	dd2c      	ble.n	8000f8c <__aeabi_fsub+0x2b4>
 8000f32:	0002      	movs	r2, r0
 8000f34:	1c73      	adds	r3, r6, #1
 8000f36:	e73a      	b.n	8000dae <__aeabi_fsub+0xd6>
 8000f38:	2aff      	cmp	r2, #255	@ 0xff
 8000f3a:	d088      	beq.n	8000e4e <__aeabi_fsub+0x176>
 8000f3c:	199b      	adds	r3, r3, r6
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	0759      	lsls	r1, r3, #29
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0x26e>
 8000f44:	e733      	b.n	8000dae <__aeabi_fsub+0xd6>
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	e76e      	b.n	8000e28 <__aeabi_fsub+0x150>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d110      	bne.n	8000f70 <__aeabi_fsub+0x298>
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	d043      	beq.n	8000fda <__aeabi_fsub+0x302>
 8000f52:	2401      	movs	r4, #1
 8000f54:	0033      	movs	r3, r6
 8000f56:	400c      	ands	r4, r1
 8000f58:	e706      	b.n	8000d68 <__aeabi_fsub+0x90>
 8000f5a:	2401      	movs	r4, #1
 8000f5c:	1af7      	subs	r7, r6, r3
 8000f5e:	400c      	ands	r4, r1
 8000f60:	e784      	b.n	8000e6c <__aeabi_fsub+0x194>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <__aeabi_fsub+0x298>
 8000f66:	0033      	movs	r3, r6
 8000f68:	e6fe      	b.n	8000d68 <__aeabi_fsub+0x90>
 8000f6a:	2501      	movs	r5, #1
 8000f6c:	1b9b      	subs	r3, r3, r6
 8000f6e:	e718      	b.n	8000da2 <__aeabi_fsub+0xca>
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x29e>
 8000f74:	e6f8      	b.n	8000d68 <__aeabi_fsub+0x90>
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	03d2      	lsls	r2, r2, #15
 8000f7a:	4297      	cmp	r7, r2
 8000f7c:	d304      	bcc.n	8000f88 <__aeabi_fsub+0x2b0>
 8000f7e:	4594      	cmp	ip, r2
 8000f80:	d202      	bcs.n	8000f88 <__aeabi_fsub+0x2b0>
 8000f82:	2401      	movs	r4, #1
 8000f84:	0033      	movs	r3, r6
 8000f86:	400c      	ands	r4, r1
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	e6f1      	b.n	8000d70 <__aeabi_fsub+0x98>
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2520      	movs	r5, #32
 8000f90:	40ca      	lsrs	r2, r1
 8000f92:	1a69      	subs	r1, r5, r1
 8000f94:	408b      	lsls	r3, r1
 8000f96:	1e59      	subs	r1, r3, #1
 8000f98:	418b      	sbcs	r3, r1
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	0005      	movs	r5, r0
 8000f9e:	199b      	adds	r3, r3, r6
 8000fa0:	e750      	b.n	8000e44 <__aeabi_fsub+0x16c>
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d094      	beq.n	8000ed0 <__aeabi_fsub+0x1f8>
 8000fa6:	2401      	movs	r4, #1
 8000fa8:	0033      	movs	r3, r6
 8000faa:	400c      	ands	r4, r1
 8000fac:	e73a      	b.n	8000e24 <__aeabi_fsub+0x14c>
 8000fae:	000c      	movs	r4, r1
 8000fb0:	2501      	movs	r5, #1
 8000fb2:	1af3      	subs	r3, r6, r3
 8000fb4:	e6f5      	b.n	8000da2 <__aeabi_fsub+0xca>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e734      	b.n	8000e24 <__aeabi_fsub+0x14c>
 8000fba:	199b      	adds	r3, r3, r6
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0159      	lsls	r1, r3, #5
 8000fc0:	d5c1      	bpl.n	8000f46 <__aeabi_fsub+0x26e>
 8000fc2:	4a15      	ldr	r2, [pc, #84]	@ (8001018 <__aeabi_fsub+0x340>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	e72d      	b.n	8000e28 <__aeabi_fsub+0x150>
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x2fa>
 8000fd0:	e77e      	b.n	8000ed0 <__aeabi_fsub+0x1f8>
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	08db      	lsrs	r3, r3, #3
 8000fd8:	e726      	b.n	8000e28 <__aeabi_fsub+0x150>
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	2400      	movs	r4, #0
 8000fde:	20ff      	movs	r0, #255	@ 0xff
 8000fe0:	03db      	lsls	r3, r3, #15
 8000fe2:	e6f1      	b.n	8000dc8 <__aeabi_fsub+0xf0>
 8000fe4:	2a00      	cmp	r2, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_fsub+0x312>
 8000fe8:	e756      	b.n	8000e98 <__aeabi_fsub+0x1c0>
 8000fea:	1b47      	subs	r7, r0, r5
 8000fec:	003a      	movs	r2, r7
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x31c>
 8000ff2:	e730      	b.n	8000e56 <__aeabi_fsub+0x17e>
 8000ff4:	2280      	movs	r2, #128	@ 0x80
 8000ff6:	04d2      	lsls	r2, r2, #19
 8000ff8:	000c      	movs	r4, r1
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	e77f      	b.n	8000efe <__aeabi_fsub+0x226>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x32c>
 8001002:	e701      	b.n	8000e08 <__aeabi_fsub+0x130>
 8001004:	1b41      	subs	r1, r0, r5
 8001006:	2d00      	cmp	r5, #0
 8001008:	d101      	bne.n	800100e <__aeabi_fsub+0x336>
 800100a:	000a      	movs	r2, r1
 800100c:	e788      	b.n	8000f20 <__aeabi_fsub+0x248>
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	04d2      	lsls	r2, r2, #19
 8001012:	4313      	orrs	r3, r2
 8001014:	e78b      	b.n	8000f2e <__aeabi_fsub+0x256>
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	fbffffff 	.word	0xfbffffff
 800101c:	7dffffff 	.word	0x7dffffff

08001020 <__aeabi_f2iz>:
 8001020:	0241      	lsls	r1, r0, #9
 8001022:	0042      	lsls	r2, r0, #1
 8001024:	0fc3      	lsrs	r3, r0, #31
 8001026:	0a49      	lsrs	r1, r1, #9
 8001028:	2000      	movs	r0, #0
 800102a:	0e12      	lsrs	r2, r2, #24
 800102c:	2a7e      	cmp	r2, #126	@ 0x7e
 800102e:	dd03      	ble.n	8001038 <__aeabi_f2iz+0x18>
 8001030:	2a9d      	cmp	r2, #157	@ 0x9d
 8001032:	dd02      	ble.n	800103a <__aeabi_f2iz+0x1a>
 8001034:	4a09      	ldr	r2, [pc, #36]	@ (800105c <__aeabi_f2iz+0x3c>)
 8001036:	1898      	adds	r0, r3, r2
 8001038:	4770      	bx	lr
 800103a:	2080      	movs	r0, #128	@ 0x80
 800103c:	0400      	lsls	r0, r0, #16
 800103e:	4301      	orrs	r1, r0
 8001040:	2a95      	cmp	r2, #149	@ 0x95
 8001042:	dc07      	bgt.n	8001054 <__aeabi_f2iz+0x34>
 8001044:	2096      	movs	r0, #150	@ 0x96
 8001046:	1a82      	subs	r2, r0, r2
 8001048:	40d1      	lsrs	r1, r2
 800104a:	4248      	negs	r0, r1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f3      	bne.n	8001038 <__aeabi_f2iz+0x18>
 8001050:	0008      	movs	r0, r1
 8001052:	e7f1      	b.n	8001038 <__aeabi_f2iz+0x18>
 8001054:	3a96      	subs	r2, #150	@ 0x96
 8001056:	4091      	lsls	r1, r2
 8001058:	e7f7      	b.n	800104a <__aeabi_f2iz+0x2a>
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	7fffffff 	.word	0x7fffffff

08001060 <__aeabi_i2f>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	2800      	cmp	r0, #0
 8001064:	d013      	beq.n	800108e <__aeabi_i2f+0x2e>
 8001066:	17c3      	asrs	r3, r0, #31
 8001068:	18c5      	adds	r5, r0, r3
 800106a:	405d      	eors	r5, r3
 800106c:	0fc4      	lsrs	r4, r0, #31
 800106e:	0028      	movs	r0, r5
 8001070:	f001 ffe8 	bl	8003044 <__clzsi2>
 8001074:	239e      	movs	r3, #158	@ 0x9e
 8001076:	0001      	movs	r1, r0
 8001078:	1a1b      	subs	r3, r3, r0
 800107a:	2b96      	cmp	r3, #150	@ 0x96
 800107c:	dc0f      	bgt.n	800109e <__aeabi_i2f+0x3e>
 800107e:	2808      	cmp	r0, #8
 8001080:	d034      	beq.n	80010ec <__aeabi_i2f+0x8c>
 8001082:	3908      	subs	r1, #8
 8001084:	408d      	lsls	r5, r1
 8001086:	026d      	lsls	r5, r5, #9
 8001088:	0a6d      	lsrs	r5, r5, #9
 800108a:	b2d8      	uxtb	r0, r3
 800108c:	e002      	b.n	8001094 <__aeabi_i2f+0x34>
 800108e:	2400      	movs	r4, #0
 8001090:	2000      	movs	r0, #0
 8001092:	2500      	movs	r5, #0
 8001094:	05c0      	lsls	r0, r0, #23
 8001096:	4328      	orrs	r0, r5
 8001098:	07e4      	lsls	r4, r4, #31
 800109a:	4320      	orrs	r0, r4
 800109c:	bd70      	pop	{r4, r5, r6, pc}
 800109e:	2b99      	cmp	r3, #153	@ 0x99
 80010a0:	dc16      	bgt.n	80010d0 <__aeabi_i2f+0x70>
 80010a2:	1f42      	subs	r2, r0, #5
 80010a4:	2805      	cmp	r0, #5
 80010a6:	d000      	beq.n	80010aa <__aeabi_i2f+0x4a>
 80010a8:	4095      	lsls	r5, r2
 80010aa:	002a      	movs	r2, r5
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <__aeabi_i2f+0x94>)
 80010ae:	4002      	ands	r2, r0
 80010b0:	076e      	lsls	r6, r5, #29
 80010b2:	d009      	beq.n	80010c8 <__aeabi_i2f+0x68>
 80010b4:	260f      	movs	r6, #15
 80010b6:	4035      	ands	r5, r6
 80010b8:	2d04      	cmp	r5, #4
 80010ba:	d005      	beq.n	80010c8 <__aeabi_i2f+0x68>
 80010bc:	3204      	adds	r2, #4
 80010be:	0155      	lsls	r5, r2, #5
 80010c0:	d502      	bpl.n	80010c8 <__aeabi_i2f+0x68>
 80010c2:	239f      	movs	r3, #159	@ 0x9f
 80010c4:	4002      	ands	r2, r0
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	0192      	lsls	r2, r2, #6
 80010ca:	0a55      	lsrs	r5, r2, #9
 80010cc:	b2d8      	uxtb	r0, r3
 80010ce:	e7e1      	b.n	8001094 <__aeabi_i2f+0x34>
 80010d0:	2205      	movs	r2, #5
 80010d2:	1a12      	subs	r2, r2, r0
 80010d4:	0028      	movs	r0, r5
 80010d6:	40d0      	lsrs	r0, r2
 80010d8:	0002      	movs	r2, r0
 80010da:	0008      	movs	r0, r1
 80010dc:	301b      	adds	r0, #27
 80010de:	4085      	lsls	r5, r0
 80010e0:	0028      	movs	r0, r5
 80010e2:	1e45      	subs	r5, r0, #1
 80010e4:	41a8      	sbcs	r0, r5
 80010e6:	4302      	orrs	r2, r0
 80010e8:	0015      	movs	r5, r2
 80010ea:	e7de      	b.n	80010aa <__aeabi_i2f+0x4a>
 80010ec:	026d      	lsls	r5, r5, #9
 80010ee:	2096      	movs	r0, #150	@ 0x96
 80010f0:	0a6d      	lsrs	r5, r5, #9
 80010f2:	e7cf      	b.n	8001094 <__aeabi_i2f+0x34>
 80010f4:	fbffffff 	.word	0xfbffffff

080010f8 <__aeabi_ui2f>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	1e04      	subs	r4, r0, #0
 80010fc:	d00e      	beq.n	800111c <__aeabi_ui2f+0x24>
 80010fe:	f001 ffa1 	bl	8003044 <__clzsi2>
 8001102:	239e      	movs	r3, #158	@ 0x9e
 8001104:	0001      	movs	r1, r0
 8001106:	1a1b      	subs	r3, r3, r0
 8001108:	2b96      	cmp	r3, #150	@ 0x96
 800110a:	dc0c      	bgt.n	8001126 <__aeabi_ui2f+0x2e>
 800110c:	2808      	cmp	r0, #8
 800110e:	d02f      	beq.n	8001170 <__aeabi_ui2f+0x78>
 8001110:	3908      	subs	r1, #8
 8001112:	408c      	lsls	r4, r1
 8001114:	0264      	lsls	r4, r4, #9
 8001116:	0a64      	lsrs	r4, r4, #9
 8001118:	b2d8      	uxtb	r0, r3
 800111a:	e001      	b.n	8001120 <__aeabi_ui2f+0x28>
 800111c:	2000      	movs	r0, #0
 800111e:	2400      	movs	r4, #0
 8001120:	05c0      	lsls	r0, r0, #23
 8001122:	4320      	orrs	r0, r4
 8001124:	bd70      	pop	{r4, r5, r6, pc}
 8001126:	2b99      	cmp	r3, #153	@ 0x99
 8001128:	dc16      	bgt.n	8001158 <__aeabi_ui2f+0x60>
 800112a:	1f42      	subs	r2, r0, #5
 800112c:	2805      	cmp	r0, #5
 800112e:	d000      	beq.n	8001132 <__aeabi_ui2f+0x3a>
 8001130:	4094      	lsls	r4, r2
 8001132:	0022      	movs	r2, r4
 8001134:	4810      	ldr	r0, [pc, #64]	@ (8001178 <__aeabi_ui2f+0x80>)
 8001136:	4002      	ands	r2, r0
 8001138:	0765      	lsls	r5, r4, #29
 800113a:	d009      	beq.n	8001150 <__aeabi_ui2f+0x58>
 800113c:	250f      	movs	r5, #15
 800113e:	402c      	ands	r4, r5
 8001140:	2c04      	cmp	r4, #4
 8001142:	d005      	beq.n	8001150 <__aeabi_ui2f+0x58>
 8001144:	3204      	adds	r2, #4
 8001146:	0154      	lsls	r4, r2, #5
 8001148:	d502      	bpl.n	8001150 <__aeabi_ui2f+0x58>
 800114a:	239f      	movs	r3, #159	@ 0x9f
 800114c:	4002      	ands	r2, r0
 800114e:	1a5b      	subs	r3, r3, r1
 8001150:	0192      	lsls	r2, r2, #6
 8001152:	0a54      	lsrs	r4, r2, #9
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	e7e3      	b.n	8001120 <__aeabi_ui2f+0x28>
 8001158:	0002      	movs	r2, r0
 800115a:	0020      	movs	r0, r4
 800115c:	321b      	adds	r2, #27
 800115e:	4090      	lsls	r0, r2
 8001160:	0002      	movs	r2, r0
 8001162:	1e50      	subs	r0, r2, #1
 8001164:	4182      	sbcs	r2, r0
 8001166:	2005      	movs	r0, #5
 8001168:	1a40      	subs	r0, r0, r1
 800116a:	40c4      	lsrs	r4, r0
 800116c:	4314      	orrs	r4, r2
 800116e:	e7e0      	b.n	8001132 <__aeabi_ui2f+0x3a>
 8001170:	0264      	lsls	r4, r4, #9
 8001172:	2096      	movs	r0, #150	@ 0x96
 8001174:	0a64      	lsrs	r4, r4, #9
 8001176:	e7d3      	b.n	8001120 <__aeabi_ui2f+0x28>
 8001178:	fbffffff 	.word	0xfbffffff

0800117c <__aeabi_dadd>:
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	4657      	mov	r7, sl
 8001180:	464e      	mov	r6, r9
 8001182:	4645      	mov	r5, r8
 8001184:	46de      	mov	lr, fp
 8001186:	b5e0      	push	{r5, r6, r7, lr}
 8001188:	b083      	sub	sp, #12
 800118a:	9000      	str	r0, [sp, #0]
 800118c:	9101      	str	r1, [sp, #4]
 800118e:	030c      	lsls	r4, r1, #12
 8001190:	004f      	lsls	r7, r1, #1
 8001192:	0fce      	lsrs	r6, r1, #31
 8001194:	0a61      	lsrs	r1, r4, #9
 8001196:	9c00      	ldr	r4, [sp, #0]
 8001198:	031d      	lsls	r5, r3, #12
 800119a:	0f64      	lsrs	r4, r4, #29
 800119c:	430c      	orrs	r4, r1
 800119e:	9900      	ldr	r1, [sp, #0]
 80011a0:	9200      	str	r2, [sp, #0]
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	00c8      	lsls	r0, r1, #3
 80011a6:	0059      	lsls	r1, r3, #1
 80011a8:	0d4b      	lsrs	r3, r1, #21
 80011aa:	4699      	mov	r9, r3
 80011ac:	9a00      	ldr	r2, [sp, #0]
 80011ae:	9b01      	ldr	r3, [sp, #4]
 80011b0:	0a6d      	lsrs	r5, r5, #9
 80011b2:	0fd9      	lsrs	r1, r3, #31
 80011b4:	0f53      	lsrs	r3, r2, #29
 80011b6:	432b      	orrs	r3, r5
 80011b8:	469a      	mov	sl, r3
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	0d7f      	lsrs	r7, r7, #21
 80011be:	00da      	lsls	r2, r3, #3
 80011c0:	4694      	mov	ip, r2
 80011c2:	464a      	mov	r2, r9
 80011c4:	46b0      	mov	r8, r6
 80011c6:	1aba      	subs	r2, r7, r2
 80011c8:	428e      	cmp	r6, r1
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x52>
 80011cc:	e0b0      	b.n	8001330 <__aeabi_dadd+0x1b4>
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	dc00      	bgt.n	80011d4 <__aeabi_dadd+0x58>
 80011d2:	e078      	b.n	80012c6 <__aeabi_dadd+0x14a>
 80011d4:	4649      	mov	r1, r9
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x60>
 80011da:	e0e9      	b.n	80013b0 <__aeabi_dadd+0x234>
 80011dc:	49c9      	ldr	r1, [pc, #804]	@ (8001504 <__aeabi_dadd+0x388>)
 80011de:	428f      	cmp	r7, r1
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x68>
 80011e2:	e195      	b.n	8001510 <__aeabi_dadd+0x394>
 80011e4:	2501      	movs	r5, #1
 80011e6:	2a38      	cmp	r2, #56	@ 0x38
 80011e8:	dc16      	bgt.n	8001218 <__aeabi_dadd+0x9c>
 80011ea:	2180      	movs	r1, #128	@ 0x80
 80011ec:	4653      	mov	r3, sl
 80011ee:	0409      	lsls	r1, r1, #16
 80011f0:	430b      	orrs	r3, r1
 80011f2:	469a      	mov	sl, r3
 80011f4:	2a1f      	cmp	r2, #31
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dadd+0x7e>
 80011f8:	e1e7      	b.n	80015ca <__aeabi_dadd+0x44e>
 80011fa:	2120      	movs	r1, #32
 80011fc:	4655      	mov	r5, sl
 80011fe:	1a8b      	subs	r3, r1, r2
 8001200:	4661      	mov	r1, ip
 8001202:	409d      	lsls	r5, r3
 8001204:	40d1      	lsrs	r1, r2
 8001206:	430d      	orrs	r5, r1
 8001208:	4661      	mov	r1, ip
 800120a:	4099      	lsls	r1, r3
 800120c:	1e4b      	subs	r3, r1, #1
 800120e:	4199      	sbcs	r1, r3
 8001210:	4653      	mov	r3, sl
 8001212:	40d3      	lsrs	r3, r2
 8001214:	430d      	orrs	r5, r1
 8001216:	1ae4      	subs	r4, r4, r3
 8001218:	1b45      	subs	r5, r0, r5
 800121a:	42a8      	cmp	r0, r5
 800121c:	4180      	sbcs	r0, r0
 800121e:	4240      	negs	r0, r0
 8001220:	1a24      	subs	r4, r4, r0
 8001222:	0223      	lsls	r3, r4, #8
 8001224:	d400      	bmi.n	8001228 <__aeabi_dadd+0xac>
 8001226:	e10f      	b.n	8001448 <__aeabi_dadd+0x2cc>
 8001228:	0264      	lsls	r4, r4, #9
 800122a:	0a64      	lsrs	r4, r4, #9
 800122c:	2c00      	cmp	r4, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_dadd+0xb6>
 8001230:	e139      	b.n	80014a6 <__aeabi_dadd+0x32a>
 8001232:	0020      	movs	r0, r4
 8001234:	f001 ff06 	bl	8003044 <__clzsi2>
 8001238:	0003      	movs	r3, r0
 800123a:	3b08      	subs	r3, #8
 800123c:	2120      	movs	r1, #32
 800123e:	0028      	movs	r0, r5
 8001240:	1aca      	subs	r2, r1, r3
 8001242:	40d0      	lsrs	r0, r2
 8001244:	409c      	lsls	r4, r3
 8001246:	0002      	movs	r2, r0
 8001248:	409d      	lsls	r5, r3
 800124a:	4322      	orrs	r2, r4
 800124c:	429f      	cmp	r7, r3
 800124e:	dd00      	ble.n	8001252 <__aeabi_dadd+0xd6>
 8001250:	e173      	b.n	800153a <__aeabi_dadd+0x3be>
 8001252:	1bd8      	subs	r0, r3, r7
 8001254:	3001      	adds	r0, #1
 8001256:	1a09      	subs	r1, r1, r0
 8001258:	002c      	movs	r4, r5
 800125a:	408d      	lsls	r5, r1
 800125c:	40c4      	lsrs	r4, r0
 800125e:	1e6b      	subs	r3, r5, #1
 8001260:	419d      	sbcs	r5, r3
 8001262:	0013      	movs	r3, r2
 8001264:	40c2      	lsrs	r2, r0
 8001266:	408b      	lsls	r3, r1
 8001268:	4325      	orrs	r5, r4
 800126a:	2700      	movs	r7, #0
 800126c:	0014      	movs	r4, r2
 800126e:	431d      	orrs	r5, r3
 8001270:	076b      	lsls	r3, r5, #29
 8001272:	d009      	beq.n	8001288 <__aeabi_dadd+0x10c>
 8001274:	230f      	movs	r3, #15
 8001276:	402b      	ands	r3, r5
 8001278:	2b04      	cmp	r3, #4
 800127a:	d005      	beq.n	8001288 <__aeabi_dadd+0x10c>
 800127c:	1d2b      	adds	r3, r5, #4
 800127e:	42ab      	cmp	r3, r5
 8001280:	41ad      	sbcs	r5, r5
 8001282:	426d      	negs	r5, r5
 8001284:	1964      	adds	r4, r4, r5
 8001286:	001d      	movs	r5, r3
 8001288:	0223      	lsls	r3, r4, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_dadd+0x112>
 800128c:	e12d      	b.n	80014ea <__aeabi_dadd+0x36e>
 800128e:	4a9d      	ldr	r2, [pc, #628]	@ (8001504 <__aeabi_dadd+0x388>)
 8001290:	3701      	adds	r7, #1
 8001292:	4297      	cmp	r7, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x11c>
 8001296:	e0d3      	b.n	8001440 <__aeabi_dadd+0x2c4>
 8001298:	4646      	mov	r6, r8
 800129a:	499b      	ldr	r1, [pc, #620]	@ (8001508 <__aeabi_dadd+0x38c>)
 800129c:	08ed      	lsrs	r5, r5, #3
 800129e:	4021      	ands	r1, r4
 80012a0:	074a      	lsls	r2, r1, #29
 80012a2:	432a      	orrs	r2, r5
 80012a4:	057c      	lsls	r4, r7, #21
 80012a6:	024d      	lsls	r5, r1, #9
 80012a8:	0b2d      	lsrs	r5, r5, #12
 80012aa:	0d64      	lsrs	r4, r4, #21
 80012ac:	0524      	lsls	r4, r4, #20
 80012ae:	432c      	orrs	r4, r5
 80012b0:	07f6      	lsls	r6, r6, #31
 80012b2:	4334      	orrs	r4, r6
 80012b4:	0010      	movs	r0, r2
 80012b6:	0021      	movs	r1, r4
 80012b8:	b003      	add	sp, #12
 80012ba:	bcf0      	pop	{r4, r5, r6, r7}
 80012bc:	46bb      	mov	fp, r7
 80012be:	46b2      	mov	sl, r6
 80012c0:	46a9      	mov	r9, r5
 80012c2:	46a0      	mov	r8, r4
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d100      	bne.n	80012cc <__aeabi_dadd+0x150>
 80012ca:	e084      	b.n	80013d6 <__aeabi_dadd+0x25a>
 80012cc:	464a      	mov	r2, r9
 80012ce:	1bd2      	subs	r2, r2, r7
 80012d0:	2f00      	cmp	r7, #0
 80012d2:	d000      	beq.n	80012d6 <__aeabi_dadd+0x15a>
 80012d4:	e16d      	b.n	80015b2 <__aeabi_dadd+0x436>
 80012d6:	0025      	movs	r5, r4
 80012d8:	4305      	orrs	r5, r0
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x162>
 80012dc:	e127      	b.n	800152e <__aeabi_dadd+0x3b2>
 80012de:	1e56      	subs	r6, r2, #1
 80012e0:	2a01      	cmp	r2, #1
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dadd+0x16a>
 80012e4:	e23b      	b.n	800175e <__aeabi_dadd+0x5e2>
 80012e6:	4d87      	ldr	r5, [pc, #540]	@ (8001504 <__aeabi_dadd+0x388>)
 80012e8:	42aa      	cmp	r2, r5
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x172>
 80012ec:	e26a      	b.n	80017c4 <__aeabi_dadd+0x648>
 80012ee:	2501      	movs	r5, #1
 80012f0:	2e38      	cmp	r6, #56	@ 0x38
 80012f2:	dc12      	bgt.n	800131a <__aeabi_dadd+0x19e>
 80012f4:	0032      	movs	r2, r6
 80012f6:	2a1f      	cmp	r2, #31
 80012f8:	dd00      	ble.n	80012fc <__aeabi_dadd+0x180>
 80012fa:	e1f8      	b.n	80016ee <__aeabi_dadd+0x572>
 80012fc:	2620      	movs	r6, #32
 80012fe:	0025      	movs	r5, r4
 8001300:	1ab6      	subs	r6, r6, r2
 8001302:	0007      	movs	r7, r0
 8001304:	4653      	mov	r3, sl
 8001306:	40b0      	lsls	r0, r6
 8001308:	40d4      	lsrs	r4, r2
 800130a:	40b5      	lsls	r5, r6
 800130c:	40d7      	lsrs	r7, r2
 800130e:	1e46      	subs	r6, r0, #1
 8001310:	41b0      	sbcs	r0, r6
 8001312:	1b1b      	subs	r3, r3, r4
 8001314:	469a      	mov	sl, r3
 8001316:	433d      	orrs	r5, r7
 8001318:	4305      	orrs	r5, r0
 800131a:	4662      	mov	r2, ip
 800131c:	1b55      	subs	r5, r2, r5
 800131e:	45ac      	cmp	ip, r5
 8001320:	4192      	sbcs	r2, r2
 8001322:	4653      	mov	r3, sl
 8001324:	4252      	negs	r2, r2
 8001326:	000e      	movs	r6, r1
 8001328:	464f      	mov	r7, r9
 800132a:	4688      	mov	r8, r1
 800132c:	1a9c      	subs	r4, r3, r2
 800132e:	e778      	b.n	8001222 <__aeabi_dadd+0xa6>
 8001330:	2a00      	cmp	r2, #0
 8001332:	dc00      	bgt.n	8001336 <__aeabi_dadd+0x1ba>
 8001334:	e08e      	b.n	8001454 <__aeabi_dadd+0x2d8>
 8001336:	4649      	mov	r1, r9
 8001338:	2900      	cmp	r1, #0
 800133a:	d175      	bne.n	8001428 <__aeabi_dadd+0x2ac>
 800133c:	4661      	mov	r1, ip
 800133e:	4653      	mov	r3, sl
 8001340:	4319      	orrs	r1, r3
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x1ca>
 8001344:	e0f6      	b.n	8001534 <__aeabi_dadd+0x3b8>
 8001346:	1e51      	subs	r1, r2, #1
 8001348:	2a01      	cmp	r2, #1
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0x1d2>
 800134c:	e191      	b.n	8001672 <__aeabi_dadd+0x4f6>
 800134e:	4d6d      	ldr	r5, [pc, #436]	@ (8001504 <__aeabi_dadd+0x388>)
 8001350:	42aa      	cmp	r2, r5
 8001352:	d100      	bne.n	8001356 <__aeabi_dadd+0x1da>
 8001354:	e0dc      	b.n	8001510 <__aeabi_dadd+0x394>
 8001356:	2501      	movs	r5, #1
 8001358:	2938      	cmp	r1, #56	@ 0x38
 800135a:	dc14      	bgt.n	8001386 <__aeabi_dadd+0x20a>
 800135c:	000a      	movs	r2, r1
 800135e:	2a1f      	cmp	r2, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x1e8>
 8001362:	e1a2      	b.n	80016aa <__aeabi_dadd+0x52e>
 8001364:	2120      	movs	r1, #32
 8001366:	4653      	mov	r3, sl
 8001368:	1a89      	subs	r1, r1, r2
 800136a:	408b      	lsls	r3, r1
 800136c:	001d      	movs	r5, r3
 800136e:	4663      	mov	r3, ip
 8001370:	40d3      	lsrs	r3, r2
 8001372:	431d      	orrs	r5, r3
 8001374:	4663      	mov	r3, ip
 8001376:	408b      	lsls	r3, r1
 8001378:	0019      	movs	r1, r3
 800137a:	1e4b      	subs	r3, r1, #1
 800137c:	4199      	sbcs	r1, r3
 800137e:	4653      	mov	r3, sl
 8001380:	40d3      	lsrs	r3, r2
 8001382:	430d      	orrs	r5, r1
 8001384:	18e4      	adds	r4, r4, r3
 8001386:	182d      	adds	r5, r5, r0
 8001388:	4285      	cmp	r5, r0
 800138a:	4180      	sbcs	r0, r0
 800138c:	4240      	negs	r0, r0
 800138e:	1824      	adds	r4, r4, r0
 8001390:	0223      	lsls	r3, r4, #8
 8001392:	d559      	bpl.n	8001448 <__aeabi_dadd+0x2cc>
 8001394:	4b5b      	ldr	r3, [pc, #364]	@ (8001504 <__aeabi_dadd+0x388>)
 8001396:	3701      	adds	r7, #1
 8001398:	429f      	cmp	r7, r3
 800139a:	d051      	beq.n	8001440 <__aeabi_dadd+0x2c4>
 800139c:	2101      	movs	r1, #1
 800139e:	4b5a      	ldr	r3, [pc, #360]	@ (8001508 <__aeabi_dadd+0x38c>)
 80013a0:	086a      	lsrs	r2, r5, #1
 80013a2:	401c      	ands	r4, r3
 80013a4:	4029      	ands	r1, r5
 80013a6:	430a      	orrs	r2, r1
 80013a8:	07e5      	lsls	r5, r4, #31
 80013aa:	4315      	orrs	r5, r2
 80013ac:	0864      	lsrs	r4, r4, #1
 80013ae:	e75f      	b.n	8001270 <__aeabi_dadd+0xf4>
 80013b0:	4661      	mov	r1, ip
 80013b2:	4653      	mov	r3, sl
 80013b4:	4319      	orrs	r1, r3
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x23e>
 80013b8:	e0bc      	b.n	8001534 <__aeabi_dadd+0x3b8>
 80013ba:	1e51      	subs	r1, r2, #1
 80013bc:	2a01      	cmp	r2, #1
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x246>
 80013c0:	e164      	b.n	800168c <__aeabi_dadd+0x510>
 80013c2:	4d50      	ldr	r5, [pc, #320]	@ (8001504 <__aeabi_dadd+0x388>)
 80013c4:	42aa      	cmp	r2, r5
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x24e>
 80013c8:	e16a      	b.n	80016a0 <__aeabi_dadd+0x524>
 80013ca:	2501      	movs	r5, #1
 80013cc:	2938      	cmp	r1, #56	@ 0x38
 80013ce:	dd00      	ble.n	80013d2 <__aeabi_dadd+0x256>
 80013d0:	e722      	b.n	8001218 <__aeabi_dadd+0x9c>
 80013d2:	000a      	movs	r2, r1
 80013d4:	e70e      	b.n	80011f4 <__aeabi_dadd+0x78>
 80013d6:	4a4d      	ldr	r2, [pc, #308]	@ (800150c <__aeabi_dadd+0x390>)
 80013d8:	1c7d      	adds	r5, r7, #1
 80013da:	4215      	tst	r5, r2
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dadd+0x264>
 80013de:	e0d0      	b.n	8001582 <__aeabi_dadd+0x406>
 80013e0:	0025      	movs	r5, r4
 80013e2:	4662      	mov	r2, ip
 80013e4:	4653      	mov	r3, sl
 80013e6:	4305      	orrs	r5, r0
 80013e8:	431a      	orrs	r2, r3
 80013ea:	2f00      	cmp	r7, #0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dadd+0x274>
 80013ee:	e137      	b.n	8001660 <__aeabi_dadd+0x4e4>
 80013f0:	2d00      	cmp	r5, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x27a>
 80013f4:	e1a8      	b.n	8001748 <__aeabi_dadd+0x5cc>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_dadd+0x280>
 80013fa:	e16a      	b.n	80016d2 <__aeabi_dadd+0x556>
 80013fc:	4663      	mov	r3, ip
 80013fe:	1ac5      	subs	r5, r0, r3
 8001400:	4653      	mov	r3, sl
 8001402:	1ae2      	subs	r2, r4, r3
 8001404:	42a8      	cmp	r0, r5
 8001406:	419b      	sbcs	r3, r3
 8001408:	425b      	negs	r3, r3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	021a      	lsls	r2, r3, #8
 800140e:	d400      	bmi.n	8001412 <__aeabi_dadd+0x296>
 8001410:	e203      	b.n	800181a <__aeabi_dadd+0x69e>
 8001412:	4663      	mov	r3, ip
 8001414:	1a1d      	subs	r5, r3, r0
 8001416:	45ac      	cmp	ip, r5
 8001418:	4192      	sbcs	r2, r2
 800141a:	4653      	mov	r3, sl
 800141c:	4252      	negs	r2, r2
 800141e:	1b1c      	subs	r4, r3, r4
 8001420:	000e      	movs	r6, r1
 8001422:	4688      	mov	r8, r1
 8001424:	1aa4      	subs	r4, r4, r2
 8001426:	e723      	b.n	8001270 <__aeabi_dadd+0xf4>
 8001428:	4936      	ldr	r1, [pc, #216]	@ (8001504 <__aeabi_dadd+0x388>)
 800142a:	428f      	cmp	r7, r1
 800142c:	d070      	beq.n	8001510 <__aeabi_dadd+0x394>
 800142e:	2501      	movs	r5, #1
 8001430:	2a38      	cmp	r2, #56	@ 0x38
 8001432:	dca8      	bgt.n	8001386 <__aeabi_dadd+0x20a>
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	4653      	mov	r3, sl
 8001438:	0409      	lsls	r1, r1, #16
 800143a:	430b      	orrs	r3, r1
 800143c:	469a      	mov	sl, r3
 800143e:	e78e      	b.n	800135e <__aeabi_dadd+0x1e2>
 8001440:	003c      	movs	r4, r7
 8001442:	2500      	movs	r5, #0
 8001444:	2200      	movs	r2, #0
 8001446:	e731      	b.n	80012ac <__aeabi_dadd+0x130>
 8001448:	2307      	movs	r3, #7
 800144a:	402b      	ands	r3, r5
 800144c:	2b00      	cmp	r3, #0
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x2d6>
 8001450:	e710      	b.n	8001274 <__aeabi_dadd+0xf8>
 8001452:	e093      	b.n	800157c <__aeabi_dadd+0x400>
 8001454:	2a00      	cmp	r2, #0
 8001456:	d074      	beq.n	8001542 <__aeabi_dadd+0x3c6>
 8001458:	464a      	mov	r2, r9
 800145a:	1bd2      	subs	r2, r2, r7
 800145c:	2f00      	cmp	r7, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x2e6>
 8001460:	e0c7      	b.n	80015f2 <__aeabi_dadd+0x476>
 8001462:	4928      	ldr	r1, [pc, #160]	@ (8001504 <__aeabi_dadd+0x388>)
 8001464:	4589      	cmp	r9, r1
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x2ee>
 8001468:	e185      	b.n	8001776 <__aeabi_dadd+0x5fa>
 800146a:	2501      	movs	r5, #1
 800146c:	2a38      	cmp	r2, #56	@ 0x38
 800146e:	dc12      	bgt.n	8001496 <__aeabi_dadd+0x31a>
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0409      	lsls	r1, r1, #16
 8001474:	430c      	orrs	r4, r1
 8001476:	2a1f      	cmp	r2, #31
 8001478:	dd00      	ble.n	800147c <__aeabi_dadd+0x300>
 800147a:	e1ab      	b.n	80017d4 <__aeabi_dadd+0x658>
 800147c:	2120      	movs	r1, #32
 800147e:	0025      	movs	r5, r4
 8001480:	1a89      	subs	r1, r1, r2
 8001482:	0007      	movs	r7, r0
 8001484:	4088      	lsls	r0, r1
 8001486:	408d      	lsls	r5, r1
 8001488:	40d7      	lsrs	r7, r2
 800148a:	1e41      	subs	r1, r0, #1
 800148c:	4188      	sbcs	r0, r1
 800148e:	40d4      	lsrs	r4, r2
 8001490:	433d      	orrs	r5, r7
 8001492:	4305      	orrs	r5, r0
 8001494:	44a2      	add	sl, r4
 8001496:	4465      	add	r5, ip
 8001498:	4565      	cmp	r5, ip
 800149a:	4192      	sbcs	r2, r2
 800149c:	4252      	negs	r2, r2
 800149e:	4452      	add	r2, sl
 80014a0:	0014      	movs	r4, r2
 80014a2:	464f      	mov	r7, r9
 80014a4:	e774      	b.n	8001390 <__aeabi_dadd+0x214>
 80014a6:	0028      	movs	r0, r5
 80014a8:	f001 fdcc 	bl	8003044 <__clzsi2>
 80014ac:	0003      	movs	r3, r0
 80014ae:	3318      	adds	r3, #24
 80014b0:	2b1f      	cmp	r3, #31
 80014b2:	dc00      	bgt.n	80014b6 <__aeabi_dadd+0x33a>
 80014b4:	e6c2      	b.n	800123c <__aeabi_dadd+0xc0>
 80014b6:	002a      	movs	r2, r5
 80014b8:	3808      	subs	r0, #8
 80014ba:	4082      	lsls	r2, r0
 80014bc:	429f      	cmp	r7, r3
 80014be:	dd00      	ble.n	80014c2 <__aeabi_dadd+0x346>
 80014c0:	e0a9      	b.n	8001616 <__aeabi_dadd+0x49a>
 80014c2:	1bdb      	subs	r3, r3, r7
 80014c4:	1c58      	adds	r0, r3, #1
 80014c6:	281f      	cmp	r0, #31
 80014c8:	dc00      	bgt.n	80014cc <__aeabi_dadd+0x350>
 80014ca:	e1ac      	b.n	8001826 <__aeabi_dadd+0x6aa>
 80014cc:	0015      	movs	r5, r2
 80014ce:	3b1f      	subs	r3, #31
 80014d0:	40dd      	lsrs	r5, r3
 80014d2:	2820      	cmp	r0, #32
 80014d4:	d005      	beq.n	80014e2 <__aeabi_dadd+0x366>
 80014d6:	2340      	movs	r3, #64	@ 0x40
 80014d8:	1a1b      	subs	r3, r3, r0
 80014da:	409a      	lsls	r2, r3
 80014dc:	1e53      	subs	r3, r2, #1
 80014de:	419a      	sbcs	r2, r3
 80014e0:	4315      	orrs	r5, r2
 80014e2:	2307      	movs	r3, #7
 80014e4:	2700      	movs	r7, #0
 80014e6:	402b      	ands	r3, r5
 80014e8:	e7b0      	b.n	800144c <__aeabi_dadd+0x2d0>
 80014ea:	08ed      	lsrs	r5, r5, #3
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <__aeabi_dadd+0x388>)
 80014ee:	0762      	lsls	r2, r4, #29
 80014f0:	432a      	orrs	r2, r5
 80014f2:	08e4      	lsrs	r4, r4, #3
 80014f4:	429f      	cmp	r7, r3
 80014f6:	d00f      	beq.n	8001518 <__aeabi_dadd+0x39c>
 80014f8:	0324      	lsls	r4, r4, #12
 80014fa:	0b25      	lsrs	r5, r4, #12
 80014fc:	057c      	lsls	r4, r7, #21
 80014fe:	0d64      	lsrs	r4, r4, #21
 8001500:	e6d4      	b.n	80012ac <__aeabi_dadd+0x130>
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	000007ff 	.word	0x000007ff
 8001508:	ff7fffff 	.word	0xff7fffff
 800150c:	000007fe 	.word	0x000007fe
 8001510:	08c0      	lsrs	r0, r0, #3
 8001512:	0762      	lsls	r2, r4, #29
 8001514:	4302      	orrs	r2, r0
 8001516:	08e4      	lsrs	r4, r4, #3
 8001518:	0013      	movs	r3, r2
 800151a:	4323      	orrs	r3, r4
 800151c:	d100      	bne.n	8001520 <__aeabi_dadd+0x3a4>
 800151e:	e186      	b.n	800182e <__aeabi_dadd+0x6b2>
 8001520:	2580      	movs	r5, #128	@ 0x80
 8001522:	032d      	lsls	r5, r5, #12
 8001524:	4325      	orrs	r5, r4
 8001526:	032d      	lsls	r5, r5, #12
 8001528:	4cc3      	ldr	r4, [pc, #780]	@ (8001838 <__aeabi_dadd+0x6bc>)
 800152a:	0b2d      	lsrs	r5, r5, #12
 800152c:	e6be      	b.n	80012ac <__aeabi_dadd+0x130>
 800152e:	4660      	mov	r0, ip
 8001530:	4654      	mov	r4, sl
 8001532:	000e      	movs	r6, r1
 8001534:	0017      	movs	r7, r2
 8001536:	08c5      	lsrs	r5, r0, #3
 8001538:	e7d8      	b.n	80014ec <__aeabi_dadd+0x370>
 800153a:	4cc0      	ldr	r4, [pc, #768]	@ (800183c <__aeabi_dadd+0x6c0>)
 800153c:	1aff      	subs	r7, r7, r3
 800153e:	4014      	ands	r4, r2
 8001540:	e696      	b.n	8001270 <__aeabi_dadd+0xf4>
 8001542:	4abf      	ldr	r2, [pc, #764]	@ (8001840 <__aeabi_dadd+0x6c4>)
 8001544:	1c79      	adds	r1, r7, #1
 8001546:	4211      	tst	r1, r2
 8001548:	d16b      	bne.n	8001622 <__aeabi_dadd+0x4a6>
 800154a:	0022      	movs	r2, r4
 800154c:	4302      	orrs	r2, r0
 800154e:	2f00      	cmp	r7, #0
 8001550:	d000      	beq.n	8001554 <__aeabi_dadd+0x3d8>
 8001552:	e0db      	b.n	800170c <__aeabi_dadd+0x590>
 8001554:	2a00      	cmp	r2, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x3de>
 8001558:	e12d      	b.n	80017b6 <__aeabi_dadd+0x63a>
 800155a:	4662      	mov	r2, ip
 800155c:	4653      	mov	r3, sl
 800155e:	431a      	orrs	r2, r3
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x3e8>
 8001562:	e0b6      	b.n	80016d2 <__aeabi_dadd+0x556>
 8001564:	4663      	mov	r3, ip
 8001566:	18c5      	adds	r5, r0, r3
 8001568:	4285      	cmp	r5, r0
 800156a:	4180      	sbcs	r0, r0
 800156c:	4454      	add	r4, sl
 800156e:	4240      	negs	r0, r0
 8001570:	1824      	adds	r4, r4, r0
 8001572:	0223      	lsls	r3, r4, #8
 8001574:	d502      	bpl.n	800157c <__aeabi_dadd+0x400>
 8001576:	000f      	movs	r7, r1
 8001578:	4bb0      	ldr	r3, [pc, #704]	@ (800183c <__aeabi_dadd+0x6c0>)
 800157a:	401c      	ands	r4, r3
 800157c:	003a      	movs	r2, r7
 800157e:	0028      	movs	r0, r5
 8001580:	e7d8      	b.n	8001534 <__aeabi_dadd+0x3b8>
 8001582:	4662      	mov	r2, ip
 8001584:	1a85      	subs	r5, r0, r2
 8001586:	42a8      	cmp	r0, r5
 8001588:	4192      	sbcs	r2, r2
 800158a:	4653      	mov	r3, sl
 800158c:	4252      	negs	r2, r2
 800158e:	4691      	mov	r9, r2
 8001590:	1ae3      	subs	r3, r4, r3
 8001592:	001a      	movs	r2, r3
 8001594:	464b      	mov	r3, r9
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	4691      	mov	r9, r2
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	d454      	bmi.n	800164a <__aeabi_dadd+0x4ce>
 80015a0:	464a      	mov	r2, r9
 80015a2:	464c      	mov	r4, r9
 80015a4:	432a      	orrs	r2, r5
 80015a6:	d000      	beq.n	80015aa <__aeabi_dadd+0x42e>
 80015a8:	e640      	b.n	800122c <__aeabi_dadd+0xb0>
 80015aa:	2600      	movs	r6, #0
 80015ac:	2400      	movs	r4, #0
 80015ae:	2500      	movs	r5, #0
 80015b0:	e67c      	b.n	80012ac <__aeabi_dadd+0x130>
 80015b2:	4da1      	ldr	r5, [pc, #644]	@ (8001838 <__aeabi_dadd+0x6bc>)
 80015b4:	45a9      	cmp	r9, r5
 80015b6:	d100      	bne.n	80015ba <__aeabi_dadd+0x43e>
 80015b8:	e090      	b.n	80016dc <__aeabi_dadd+0x560>
 80015ba:	2501      	movs	r5, #1
 80015bc:	2a38      	cmp	r2, #56	@ 0x38
 80015be:	dd00      	ble.n	80015c2 <__aeabi_dadd+0x446>
 80015c0:	e6ab      	b.n	800131a <__aeabi_dadd+0x19e>
 80015c2:	2580      	movs	r5, #128	@ 0x80
 80015c4:	042d      	lsls	r5, r5, #16
 80015c6:	432c      	orrs	r4, r5
 80015c8:	e695      	b.n	80012f6 <__aeabi_dadd+0x17a>
 80015ca:	0011      	movs	r1, r2
 80015cc:	4655      	mov	r5, sl
 80015ce:	3920      	subs	r1, #32
 80015d0:	40cd      	lsrs	r5, r1
 80015d2:	46a9      	mov	r9, r5
 80015d4:	2a20      	cmp	r2, #32
 80015d6:	d006      	beq.n	80015e6 <__aeabi_dadd+0x46a>
 80015d8:	2140      	movs	r1, #64	@ 0x40
 80015da:	4653      	mov	r3, sl
 80015dc:	1a8a      	subs	r2, r1, r2
 80015de:	4093      	lsls	r3, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	431a      	orrs	r2, r3
 80015e4:	4694      	mov	ip, r2
 80015e6:	4665      	mov	r5, ip
 80015e8:	1e6b      	subs	r3, r5, #1
 80015ea:	419d      	sbcs	r5, r3
 80015ec:	464b      	mov	r3, r9
 80015ee:	431d      	orrs	r5, r3
 80015f0:	e612      	b.n	8001218 <__aeabi_dadd+0x9c>
 80015f2:	0021      	movs	r1, r4
 80015f4:	4301      	orrs	r1, r0
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x47e>
 80015f8:	e0c4      	b.n	8001784 <__aeabi_dadd+0x608>
 80015fa:	1e51      	subs	r1, r2, #1
 80015fc:	2a01      	cmp	r2, #1
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x486>
 8001600:	e0fb      	b.n	80017fa <__aeabi_dadd+0x67e>
 8001602:	4d8d      	ldr	r5, [pc, #564]	@ (8001838 <__aeabi_dadd+0x6bc>)
 8001604:	42aa      	cmp	r2, r5
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x48e>
 8001608:	e0b5      	b.n	8001776 <__aeabi_dadd+0x5fa>
 800160a:	2501      	movs	r5, #1
 800160c:	2938      	cmp	r1, #56	@ 0x38
 800160e:	dd00      	ble.n	8001612 <__aeabi_dadd+0x496>
 8001610:	e741      	b.n	8001496 <__aeabi_dadd+0x31a>
 8001612:	000a      	movs	r2, r1
 8001614:	e72f      	b.n	8001476 <__aeabi_dadd+0x2fa>
 8001616:	4c89      	ldr	r4, [pc, #548]	@ (800183c <__aeabi_dadd+0x6c0>)
 8001618:	1aff      	subs	r7, r7, r3
 800161a:	4014      	ands	r4, r2
 800161c:	0762      	lsls	r2, r4, #29
 800161e:	08e4      	lsrs	r4, r4, #3
 8001620:	e76a      	b.n	80014f8 <__aeabi_dadd+0x37c>
 8001622:	4a85      	ldr	r2, [pc, #532]	@ (8001838 <__aeabi_dadd+0x6bc>)
 8001624:	4291      	cmp	r1, r2
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x4ae>
 8001628:	e0e3      	b.n	80017f2 <__aeabi_dadd+0x676>
 800162a:	4663      	mov	r3, ip
 800162c:	18c2      	adds	r2, r0, r3
 800162e:	4282      	cmp	r2, r0
 8001630:	4180      	sbcs	r0, r0
 8001632:	0023      	movs	r3, r4
 8001634:	4240      	negs	r0, r0
 8001636:	4453      	add	r3, sl
 8001638:	181b      	adds	r3, r3, r0
 800163a:	07dd      	lsls	r5, r3, #31
 800163c:	085c      	lsrs	r4, r3, #1
 800163e:	2307      	movs	r3, #7
 8001640:	0852      	lsrs	r2, r2, #1
 8001642:	4315      	orrs	r5, r2
 8001644:	000f      	movs	r7, r1
 8001646:	402b      	ands	r3, r5
 8001648:	e700      	b.n	800144c <__aeabi_dadd+0x2d0>
 800164a:	4663      	mov	r3, ip
 800164c:	1a1d      	subs	r5, r3, r0
 800164e:	45ac      	cmp	ip, r5
 8001650:	4192      	sbcs	r2, r2
 8001652:	4653      	mov	r3, sl
 8001654:	4252      	negs	r2, r2
 8001656:	1b1c      	subs	r4, r3, r4
 8001658:	000e      	movs	r6, r1
 800165a:	4688      	mov	r8, r1
 800165c:	1aa4      	subs	r4, r4, r2
 800165e:	e5e5      	b.n	800122c <__aeabi_dadd+0xb0>
 8001660:	2d00      	cmp	r5, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dadd+0x4ea>
 8001664:	e091      	b.n	800178a <__aeabi_dadd+0x60e>
 8001666:	2a00      	cmp	r2, #0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x560>
 800166a:	2480      	movs	r4, #128	@ 0x80
 800166c:	2600      	movs	r6, #0
 800166e:	0324      	lsls	r4, r4, #12
 8001670:	e756      	b.n	8001520 <__aeabi_dadd+0x3a4>
 8001672:	4663      	mov	r3, ip
 8001674:	18c5      	adds	r5, r0, r3
 8001676:	4285      	cmp	r5, r0
 8001678:	4180      	sbcs	r0, r0
 800167a:	4454      	add	r4, sl
 800167c:	4240      	negs	r0, r0
 800167e:	1824      	adds	r4, r4, r0
 8001680:	2701      	movs	r7, #1
 8001682:	0223      	lsls	r3, r4, #8
 8001684:	d400      	bmi.n	8001688 <__aeabi_dadd+0x50c>
 8001686:	e6df      	b.n	8001448 <__aeabi_dadd+0x2cc>
 8001688:	2702      	movs	r7, #2
 800168a:	e687      	b.n	800139c <__aeabi_dadd+0x220>
 800168c:	4663      	mov	r3, ip
 800168e:	1ac5      	subs	r5, r0, r3
 8001690:	42a8      	cmp	r0, r5
 8001692:	4180      	sbcs	r0, r0
 8001694:	4653      	mov	r3, sl
 8001696:	4240      	negs	r0, r0
 8001698:	1ae4      	subs	r4, r4, r3
 800169a:	2701      	movs	r7, #1
 800169c:	1a24      	subs	r4, r4, r0
 800169e:	e5c0      	b.n	8001222 <__aeabi_dadd+0xa6>
 80016a0:	0762      	lsls	r2, r4, #29
 80016a2:	08c0      	lsrs	r0, r0, #3
 80016a4:	4302      	orrs	r2, r0
 80016a6:	08e4      	lsrs	r4, r4, #3
 80016a8:	e736      	b.n	8001518 <__aeabi_dadd+0x39c>
 80016aa:	0011      	movs	r1, r2
 80016ac:	4653      	mov	r3, sl
 80016ae:	3920      	subs	r1, #32
 80016b0:	40cb      	lsrs	r3, r1
 80016b2:	4699      	mov	r9, r3
 80016b4:	2a20      	cmp	r2, #32
 80016b6:	d006      	beq.n	80016c6 <__aeabi_dadd+0x54a>
 80016b8:	2140      	movs	r1, #64	@ 0x40
 80016ba:	4653      	mov	r3, sl
 80016bc:	1a8a      	subs	r2, r1, r2
 80016be:	4093      	lsls	r3, r2
 80016c0:	4662      	mov	r2, ip
 80016c2:	431a      	orrs	r2, r3
 80016c4:	4694      	mov	ip, r2
 80016c6:	4665      	mov	r5, ip
 80016c8:	1e6b      	subs	r3, r5, #1
 80016ca:	419d      	sbcs	r5, r3
 80016cc:	464b      	mov	r3, r9
 80016ce:	431d      	orrs	r5, r3
 80016d0:	e659      	b.n	8001386 <__aeabi_dadd+0x20a>
 80016d2:	0762      	lsls	r2, r4, #29
 80016d4:	08c0      	lsrs	r0, r0, #3
 80016d6:	4302      	orrs	r2, r0
 80016d8:	08e4      	lsrs	r4, r4, #3
 80016da:	e70d      	b.n	80014f8 <__aeabi_dadd+0x37c>
 80016dc:	4653      	mov	r3, sl
 80016de:	075a      	lsls	r2, r3, #29
 80016e0:	4663      	mov	r3, ip
 80016e2:	08d8      	lsrs	r0, r3, #3
 80016e4:	4653      	mov	r3, sl
 80016e6:	000e      	movs	r6, r1
 80016e8:	4302      	orrs	r2, r0
 80016ea:	08dc      	lsrs	r4, r3, #3
 80016ec:	e714      	b.n	8001518 <__aeabi_dadd+0x39c>
 80016ee:	0015      	movs	r5, r2
 80016f0:	0026      	movs	r6, r4
 80016f2:	3d20      	subs	r5, #32
 80016f4:	40ee      	lsrs	r6, r5
 80016f6:	2a20      	cmp	r2, #32
 80016f8:	d003      	beq.n	8001702 <__aeabi_dadd+0x586>
 80016fa:	2540      	movs	r5, #64	@ 0x40
 80016fc:	1aaa      	subs	r2, r5, r2
 80016fe:	4094      	lsls	r4, r2
 8001700:	4320      	orrs	r0, r4
 8001702:	1e42      	subs	r2, r0, #1
 8001704:	4190      	sbcs	r0, r2
 8001706:	0005      	movs	r5, r0
 8001708:	4335      	orrs	r5, r6
 800170a:	e606      	b.n	800131a <__aeabi_dadd+0x19e>
 800170c:	2a00      	cmp	r2, #0
 800170e:	d07c      	beq.n	800180a <__aeabi_dadd+0x68e>
 8001710:	4662      	mov	r2, ip
 8001712:	4653      	mov	r3, sl
 8001714:	08c0      	lsrs	r0, r0, #3
 8001716:	431a      	orrs	r2, r3
 8001718:	d100      	bne.n	800171c <__aeabi_dadd+0x5a0>
 800171a:	e6fa      	b.n	8001512 <__aeabi_dadd+0x396>
 800171c:	0762      	lsls	r2, r4, #29
 800171e:	4310      	orrs	r0, r2
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	08e4      	lsrs	r4, r4, #3
 8001724:	0312      	lsls	r2, r2, #12
 8001726:	4214      	tst	r4, r2
 8001728:	d008      	beq.n	800173c <__aeabi_dadd+0x5c0>
 800172a:	08d9      	lsrs	r1, r3, #3
 800172c:	4211      	tst	r1, r2
 800172e:	d105      	bne.n	800173c <__aeabi_dadd+0x5c0>
 8001730:	4663      	mov	r3, ip
 8001732:	08d8      	lsrs	r0, r3, #3
 8001734:	4653      	mov	r3, sl
 8001736:	000c      	movs	r4, r1
 8001738:	075b      	lsls	r3, r3, #29
 800173a:	4318      	orrs	r0, r3
 800173c:	0f42      	lsrs	r2, r0, #29
 800173e:	00c0      	lsls	r0, r0, #3
 8001740:	08c0      	lsrs	r0, r0, #3
 8001742:	0752      	lsls	r2, r2, #29
 8001744:	4302      	orrs	r2, r0
 8001746:	e6e7      	b.n	8001518 <__aeabi_dadd+0x39c>
 8001748:	2a00      	cmp	r2, #0
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x5d2>
 800174c:	e72d      	b.n	80015aa <__aeabi_dadd+0x42e>
 800174e:	4663      	mov	r3, ip
 8001750:	08d8      	lsrs	r0, r3, #3
 8001752:	4653      	mov	r3, sl
 8001754:	075a      	lsls	r2, r3, #29
 8001756:	000e      	movs	r6, r1
 8001758:	4302      	orrs	r2, r0
 800175a:	08dc      	lsrs	r4, r3, #3
 800175c:	e6cc      	b.n	80014f8 <__aeabi_dadd+0x37c>
 800175e:	4663      	mov	r3, ip
 8001760:	1a1d      	subs	r5, r3, r0
 8001762:	45ac      	cmp	ip, r5
 8001764:	4192      	sbcs	r2, r2
 8001766:	4653      	mov	r3, sl
 8001768:	4252      	negs	r2, r2
 800176a:	1b1c      	subs	r4, r3, r4
 800176c:	000e      	movs	r6, r1
 800176e:	4688      	mov	r8, r1
 8001770:	1aa4      	subs	r4, r4, r2
 8001772:	3701      	adds	r7, #1
 8001774:	e555      	b.n	8001222 <__aeabi_dadd+0xa6>
 8001776:	4663      	mov	r3, ip
 8001778:	08d9      	lsrs	r1, r3, #3
 800177a:	4653      	mov	r3, sl
 800177c:	075a      	lsls	r2, r3, #29
 800177e:	430a      	orrs	r2, r1
 8001780:	08dc      	lsrs	r4, r3, #3
 8001782:	e6c9      	b.n	8001518 <__aeabi_dadd+0x39c>
 8001784:	4660      	mov	r0, ip
 8001786:	4654      	mov	r4, sl
 8001788:	e6d4      	b.n	8001534 <__aeabi_dadd+0x3b8>
 800178a:	08c0      	lsrs	r0, r0, #3
 800178c:	2a00      	cmp	r2, #0
 800178e:	d100      	bne.n	8001792 <__aeabi_dadd+0x616>
 8001790:	e6bf      	b.n	8001512 <__aeabi_dadd+0x396>
 8001792:	0762      	lsls	r2, r4, #29
 8001794:	4310      	orrs	r0, r2
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	08e4      	lsrs	r4, r4, #3
 800179a:	0312      	lsls	r2, r2, #12
 800179c:	4214      	tst	r4, r2
 800179e:	d0cd      	beq.n	800173c <__aeabi_dadd+0x5c0>
 80017a0:	08dd      	lsrs	r5, r3, #3
 80017a2:	4215      	tst	r5, r2
 80017a4:	d1ca      	bne.n	800173c <__aeabi_dadd+0x5c0>
 80017a6:	4663      	mov	r3, ip
 80017a8:	08d8      	lsrs	r0, r3, #3
 80017aa:	4653      	mov	r3, sl
 80017ac:	075b      	lsls	r3, r3, #29
 80017ae:	000e      	movs	r6, r1
 80017b0:	002c      	movs	r4, r5
 80017b2:	4318      	orrs	r0, r3
 80017b4:	e7c2      	b.n	800173c <__aeabi_dadd+0x5c0>
 80017b6:	4663      	mov	r3, ip
 80017b8:	08d9      	lsrs	r1, r3, #3
 80017ba:	4653      	mov	r3, sl
 80017bc:	075a      	lsls	r2, r3, #29
 80017be:	430a      	orrs	r2, r1
 80017c0:	08dc      	lsrs	r4, r3, #3
 80017c2:	e699      	b.n	80014f8 <__aeabi_dadd+0x37c>
 80017c4:	4663      	mov	r3, ip
 80017c6:	08d8      	lsrs	r0, r3, #3
 80017c8:	4653      	mov	r3, sl
 80017ca:	075a      	lsls	r2, r3, #29
 80017cc:	000e      	movs	r6, r1
 80017ce:	4302      	orrs	r2, r0
 80017d0:	08dc      	lsrs	r4, r3, #3
 80017d2:	e6a1      	b.n	8001518 <__aeabi_dadd+0x39c>
 80017d4:	0011      	movs	r1, r2
 80017d6:	0027      	movs	r7, r4
 80017d8:	3920      	subs	r1, #32
 80017da:	40cf      	lsrs	r7, r1
 80017dc:	2a20      	cmp	r2, #32
 80017de:	d003      	beq.n	80017e8 <__aeabi_dadd+0x66c>
 80017e0:	2140      	movs	r1, #64	@ 0x40
 80017e2:	1a8a      	subs	r2, r1, r2
 80017e4:	4094      	lsls	r4, r2
 80017e6:	4320      	orrs	r0, r4
 80017e8:	1e42      	subs	r2, r0, #1
 80017ea:	4190      	sbcs	r0, r2
 80017ec:	0005      	movs	r5, r0
 80017ee:	433d      	orrs	r5, r7
 80017f0:	e651      	b.n	8001496 <__aeabi_dadd+0x31a>
 80017f2:	000c      	movs	r4, r1
 80017f4:	2500      	movs	r5, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	e558      	b.n	80012ac <__aeabi_dadd+0x130>
 80017fa:	4460      	add	r0, ip
 80017fc:	4560      	cmp	r0, ip
 80017fe:	4192      	sbcs	r2, r2
 8001800:	4454      	add	r4, sl
 8001802:	4252      	negs	r2, r2
 8001804:	0005      	movs	r5, r0
 8001806:	18a4      	adds	r4, r4, r2
 8001808:	e73a      	b.n	8001680 <__aeabi_dadd+0x504>
 800180a:	4653      	mov	r3, sl
 800180c:	075a      	lsls	r2, r3, #29
 800180e:	4663      	mov	r3, ip
 8001810:	08d9      	lsrs	r1, r3, #3
 8001812:	4653      	mov	r3, sl
 8001814:	430a      	orrs	r2, r1
 8001816:	08dc      	lsrs	r4, r3, #3
 8001818:	e67e      	b.n	8001518 <__aeabi_dadd+0x39c>
 800181a:	001a      	movs	r2, r3
 800181c:	001c      	movs	r4, r3
 800181e:	432a      	orrs	r2, r5
 8001820:	d000      	beq.n	8001824 <__aeabi_dadd+0x6a8>
 8001822:	e6ab      	b.n	800157c <__aeabi_dadd+0x400>
 8001824:	e6c1      	b.n	80015aa <__aeabi_dadd+0x42e>
 8001826:	2120      	movs	r1, #32
 8001828:	2500      	movs	r5, #0
 800182a:	1a09      	subs	r1, r1, r0
 800182c:	e519      	b.n	8001262 <__aeabi_dadd+0xe6>
 800182e:	2200      	movs	r2, #0
 8001830:	2500      	movs	r5, #0
 8001832:	4c01      	ldr	r4, [pc, #4]	@ (8001838 <__aeabi_dadd+0x6bc>)
 8001834:	e53a      	b.n	80012ac <__aeabi_dadd+0x130>
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff
 800183c:	ff7fffff 	.word	0xff7fffff
 8001840:	000007fe 	.word	0x000007fe

08001844 <__aeabi_ddiv>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	46de      	mov	lr, fp
 8001848:	4645      	mov	r5, r8
 800184a:	4657      	mov	r7, sl
 800184c:	464e      	mov	r6, r9
 800184e:	b5e0      	push	{r5, r6, r7, lr}
 8001850:	b087      	sub	sp, #28
 8001852:	9200      	str	r2, [sp, #0]
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	030b      	lsls	r3, r1, #12
 8001858:	0b1b      	lsrs	r3, r3, #12
 800185a:	469b      	mov	fp, r3
 800185c:	0fca      	lsrs	r2, r1, #31
 800185e:	004b      	lsls	r3, r1, #1
 8001860:	0004      	movs	r4, r0
 8001862:	4680      	mov	r8, r0
 8001864:	0d5b      	lsrs	r3, r3, #21
 8001866:	9202      	str	r2, [sp, #8]
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x28>
 800186a:	e16a      	b.n	8001b42 <__aeabi_ddiv+0x2fe>
 800186c:	4ad4      	ldr	r2, [pc, #848]	@ (8001bc0 <__aeabi_ddiv+0x37c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0x30>
 8001872:	e18c      	b.n	8001b8e <__aeabi_ddiv+0x34a>
 8001874:	4659      	mov	r1, fp
 8001876:	0f42      	lsrs	r2, r0, #29
 8001878:	00c9      	lsls	r1, r1, #3
 800187a:	430a      	orrs	r2, r1
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	0409      	lsls	r1, r1, #16
 8001880:	4311      	orrs	r1, r2
 8001882:	00c2      	lsls	r2, r0, #3
 8001884:	4690      	mov	r8, r2
 8001886:	4acf      	ldr	r2, [pc, #828]	@ (8001bc4 <__aeabi_ddiv+0x380>)
 8001888:	4689      	mov	r9, r1
 800188a:	4692      	mov	sl, r2
 800188c:	449a      	add	sl, r3
 800188e:	2300      	movs	r3, #0
 8001890:	2400      	movs	r4, #0
 8001892:	9303      	str	r3, [sp, #12]
 8001894:	9e00      	ldr	r6, [sp, #0]
 8001896:	9f01      	ldr	r7, [sp, #4]
 8001898:	033b      	lsls	r3, r7, #12
 800189a:	0b1b      	lsrs	r3, r3, #12
 800189c:	469b      	mov	fp, r3
 800189e:	007b      	lsls	r3, r7, #1
 80018a0:	0030      	movs	r0, r6
 80018a2:	0d5b      	lsrs	r3, r3, #21
 80018a4:	0ffd      	lsrs	r5, r7, #31
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_ddiv+0x68>
 80018aa:	e128      	b.n	8001afe <__aeabi_ddiv+0x2ba>
 80018ac:	4ac4      	ldr	r2, [pc, #784]	@ (8001bc0 <__aeabi_ddiv+0x37c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d100      	bne.n	80018b4 <__aeabi_ddiv+0x70>
 80018b2:	e177      	b.n	8001ba4 <__aeabi_ddiv+0x360>
 80018b4:	4659      	mov	r1, fp
 80018b6:	0f72      	lsrs	r2, r6, #29
 80018b8:	00c9      	lsls	r1, r1, #3
 80018ba:	430a      	orrs	r2, r1
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	4311      	orrs	r1, r2
 80018c2:	468b      	mov	fp, r1
 80018c4:	49bf      	ldr	r1, [pc, #764]	@ (8001bc4 <__aeabi_ddiv+0x380>)
 80018c6:	00f2      	lsls	r2, r6, #3
 80018c8:	468c      	mov	ip, r1
 80018ca:	4651      	mov	r1, sl
 80018cc:	4463      	add	r3, ip
 80018ce:	1acb      	subs	r3, r1, r3
 80018d0:	469a      	mov	sl, r3
 80018d2:	2300      	movs	r3, #0
 80018d4:	9e02      	ldr	r6, [sp, #8]
 80018d6:	406e      	eors	r6, r5
 80018d8:	2c0f      	cmp	r4, #15
 80018da:	d827      	bhi.n	800192c <__aeabi_ddiv+0xe8>
 80018dc:	49ba      	ldr	r1, [pc, #744]	@ (8001bc8 <__aeabi_ddiv+0x384>)
 80018de:	00a4      	lsls	r4, r4, #2
 80018e0:	5909      	ldr	r1, [r1, r4]
 80018e2:	468f      	mov	pc, r1
 80018e4:	46cb      	mov	fp, r9
 80018e6:	4642      	mov	r2, r8
 80018e8:	9e02      	ldr	r6, [sp, #8]
 80018ea:	9b03      	ldr	r3, [sp, #12]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d016      	beq.n	800191e <__aeabi_ddiv+0xda>
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0xb2>
 80018f4:	e2a6      	b.n	8001e44 <__aeabi_ddiv+0x600>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d000      	beq.n	80018fc <__aeabi_ddiv+0xb8>
 80018fa:	e0df      	b.n	8001abc <__aeabi_ddiv+0x278>
 80018fc:	2200      	movs	r2, #0
 80018fe:	2300      	movs	r3, #0
 8001900:	2400      	movs	r4, #0
 8001902:	4690      	mov	r8, r2
 8001904:	051b      	lsls	r3, r3, #20
 8001906:	4323      	orrs	r3, r4
 8001908:	07f6      	lsls	r6, r6, #31
 800190a:	4333      	orrs	r3, r6
 800190c:	4640      	mov	r0, r8
 800190e:	0019      	movs	r1, r3
 8001910:	b007      	add	sp, #28
 8001912:	bcf0      	pop	{r4, r5, r6, r7}
 8001914:	46bb      	mov	fp, r7
 8001916:	46b2      	mov	sl, r6
 8001918:	46a9      	mov	r9, r5
 800191a:	46a0      	mov	r8, r4
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191e:	2200      	movs	r2, #0
 8001920:	2400      	movs	r4, #0
 8001922:	4690      	mov	r8, r2
 8001924:	4ba6      	ldr	r3, [pc, #664]	@ (8001bc0 <__aeabi_ddiv+0x37c>)
 8001926:	e7ed      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001928:	002e      	movs	r6, r5
 800192a:	e7df      	b.n	80018ec <__aeabi_ddiv+0xa8>
 800192c:	45cb      	cmp	fp, r9
 800192e:	d200      	bcs.n	8001932 <__aeabi_ddiv+0xee>
 8001930:	e1d4      	b.n	8001cdc <__aeabi_ddiv+0x498>
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0xf2>
 8001934:	e1cf      	b.n	8001cd6 <__aeabi_ddiv+0x492>
 8001936:	2301      	movs	r3, #1
 8001938:	425b      	negs	r3, r3
 800193a:	469c      	mov	ip, r3
 800193c:	4644      	mov	r4, r8
 800193e:	4648      	mov	r0, r9
 8001940:	2700      	movs	r7, #0
 8001942:	44e2      	add	sl, ip
 8001944:	465b      	mov	r3, fp
 8001946:	0e15      	lsrs	r5, r2, #24
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	431d      	orrs	r5, r3
 800194c:	0c19      	lsrs	r1, r3, #16
 800194e:	042b      	lsls	r3, r5, #16
 8001950:	0212      	lsls	r2, r2, #8
 8001952:	9500      	str	r5, [sp, #0]
 8001954:	0c1d      	lsrs	r5, r3, #16
 8001956:	4691      	mov	r9, r2
 8001958:	9102      	str	r1, [sp, #8]
 800195a:	9503      	str	r5, [sp, #12]
 800195c:	f7fe fc5a 	bl	8000214 <__aeabi_uidivmod>
 8001960:	0002      	movs	r2, r0
 8001962:	436a      	muls	r2, r5
 8001964:	040b      	lsls	r3, r1, #16
 8001966:	0c21      	lsrs	r1, r4, #16
 8001968:	4680      	mov	r8, r0
 800196a:	4319      	orrs	r1, r3
 800196c:	428a      	cmp	r2, r1
 800196e:	d909      	bls.n	8001984 <__aeabi_ddiv+0x140>
 8001970:	9d00      	ldr	r5, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	46ac      	mov	ip, r5
 8001976:	425b      	negs	r3, r3
 8001978:	4461      	add	r1, ip
 800197a:	469c      	mov	ip, r3
 800197c:	44e0      	add	r8, ip
 800197e:	428d      	cmp	r5, r1
 8001980:	d800      	bhi.n	8001984 <__aeabi_ddiv+0x140>
 8001982:	e1fb      	b.n	8001d7c <__aeabi_ddiv+0x538>
 8001984:	1a88      	subs	r0, r1, r2
 8001986:	9902      	ldr	r1, [sp, #8]
 8001988:	f7fe fc44 	bl	8000214 <__aeabi_uidivmod>
 800198c:	9a03      	ldr	r2, [sp, #12]
 800198e:	0424      	lsls	r4, r4, #16
 8001990:	4342      	muls	r2, r0
 8001992:	0409      	lsls	r1, r1, #16
 8001994:	0c24      	lsrs	r4, r4, #16
 8001996:	0003      	movs	r3, r0
 8001998:	430c      	orrs	r4, r1
 800199a:	42a2      	cmp	r2, r4
 800199c:	d906      	bls.n	80019ac <__aeabi_ddiv+0x168>
 800199e:	9900      	ldr	r1, [sp, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	468c      	mov	ip, r1
 80019a4:	4464      	add	r4, ip
 80019a6:	42a1      	cmp	r1, r4
 80019a8:	d800      	bhi.n	80019ac <__aeabi_ddiv+0x168>
 80019aa:	e1e1      	b.n	8001d70 <__aeabi_ddiv+0x52c>
 80019ac:	1aa0      	subs	r0, r4, r2
 80019ae:	4642      	mov	r2, r8
 80019b0:	0412      	lsls	r2, r2, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	4693      	mov	fp, r2
 80019b6:	464b      	mov	r3, r9
 80019b8:	4659      	mov	r1, fp
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	001d      	movs	r5, r3
 80019be:	9304      	str	r3, [sp, #16]
 80019c0:	040b      	lsls	r3, r1, #16
 80019c2:	4649      	mov	r1, r9
 80019c4:	0409      	lsls	r1, r1, #16
 80019c6:	0c09      	lsrs	r1, r1, #16
 80019c8:	000c      	movs	r4, r1
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	435c      	muls	r4, r3
 80019ce:	0c12      	lsrs	r2, r2, #16
 80019d0:	436b      	muls	r3, r5
 80019d2:	4688      	mov	r8, r1
 80019d4:	4351      	muls	r1, r2
 80019d6:	436a      	muls	r2, r5
 80019d8:	0c25      	lsrs	r5, r4, #16
 80019da:	46ac      	mov	ip, r5
 80019dc:	185b      	adds	r3, r3, r1
 80019de:	4463      	add	r3, ip
 80019e0:	4299      	cmp	r1, r3
 80019e2:	d903      	bls.n	80019ec <__aeabi_ddiv+0x1a8>
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0249      	lsls	r1, r1, #9
 80019e8:	468c      	mov	ip, r1
 80019ea:	4462      	add	r2, ip
 80019ec:	0c19      	lsrs	r1, r3, #16
 80019ee:	0424      	lsls	r4, r4, #16
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c24      	lsrs	r4, r4, #16
 80019f4:	188a      	adds	r2, r1, r2
 80019f6:	191c      	adds	r4, r3, r4
 80019f8:	4290      	cmp	r0, r2
 80019fa:	d302      	bcc.n	8001a02 <__aeabi_ddiv+0x1be>
 80019fc:	d116      	bne.n	8001a2c <__aeabi_ddiv+0x1e8>
 80019fe:	42a7      	cmp	r7, r4
 8001a00:	d214      	bcs.n	8001a2c <__aeabi_ddiv+0x1e8>
 8001a02:	465b      	mov	r3, fp
 8001a04:	9d00      	ldr	r5, [sp, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	444f      	add	r7, r9
 8001a0a:	9305      	str	r3, [sp, #20]
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	419b      	sbcs	r3, r3
 8001a10:	46ac      	mov	ip, r5
 8001a12:	425b      	negs	r3, r3
 8001a14:	4463      	add	r3, ip
 8001a16:	18c0      	adds	r0, r0, r3
 8001a18:	4285      	cmp	r5, r0
 8001a1a:	d300      	bcc.n	8001a1e <__aeabi_ddiv+0x1da>
 8001a1c:	e1a1      	b.n	8001d62 <__aeabi_ddiv+0x51e>
 8001a1e:	4282      	cmp	r2, r0
 8001a20:	d900      	bls.n	8001a24 <__aeabi_ddiv+0x1e0>
 8001a22:	e1f6      	b.n	8001e12 <__aeabi_ddiv+0x5ce>
 8001a24:	d100      	bne.n	8001a28 <__aeabi_ddiv+0x1e4>
 8001a26:	e1f1      	b.n	8001e0c <__aeabi_ddiv+0x5c8>
 8001a28:	9b05      	ldr	r3, [sp, #20]
 8001a2a:	469b      	mov	fp, r3
 8001a2c:	1b3c      	subs	r4, r7, r4
 8001a2e:	42a7      	cmp	r7, r4
 8001a30:	41bf      	sbcs	r7, r7
 8001a32:	9d00      	ldr	r5, [sp, #0]
 8001a34:	1a80      	subs	r0, r0, r2
 8001a36:	427f      	negs	r7, r7
 8001a38:	1bc0      	subs	r0, r0, r7
 8001a3a:	4285      	cmp	r5, r0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x1fc>
 8001a3e:	e1d0      	b.n	8001de2 <__aeabi_ddiv+0x59e>
 8001a40:	9902      	ldr	r1, [sp, #8]
 8001a42:	f7fe fbe7 	bl	8000214 <__aeabi_uidivmod>
 8001a46:	9a03      	ldr	r2, [sp, #12]
 8001a48:	040b      	lsls	r3, r1, #16
 8001a4a:	4342      	muls	r2, r0
 8001a4c:	0c21      	lsrs	r1, r4, #16
 8001a4e:	0007      	movs	r7, r0
 8001a50:	4319      	orrs	r1, r3
 8001a52:	428a      	cmp	r2, r1
 8001a54:	d900      	bls.n	8001a58 <__aeabi_ddiv+0x214>
 8001a56:	e178      	b.n	8001d4a <__aeabi_ddiv+0x506>
 8001a58:	1a88      	subs	r0, r1, r2
 8001a5a:	9902      	ldr	r1, [sp, #8]
 8001a5c:	f7fe fbda 	bl	8000214 <__aeabi_uidivmod>
 8001a60:	9a03      	ldr	r2, [sp, #12]
 8001a62:	0424      	lsls	r4, r4, #16
 8001a64:	4342      	muls	r2, r0
 8001a66:	0409      	lsls	r1, r1, #16
 8001a68:	0c24      	lsrs	r4, r4, #16
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	430c      	orrs	r4, r1
 8001a6e:	42a2      	cmp	r2, r4
 8001a70:	d900      	bls.n	8001a74 <__aeabi_ddiv+0x230>
 8001a72:	e15d      	b.n	8001d30 <__aeabi_ddiv+0x4ec>
 8001a74:	4641      	mov	r1, r8
 8001a76:	1aa4      	subs	r4, r4, r2
 8001a78:	043a      	lsls	r2, r7, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	9d04      	ldr	r5, [sp, #16]
 8001a7e:	0413      	lsls	r3, r2, #16
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	4359      	muls	r1, r3
 8001a84:	4647      	mov	r7, r8
 8001a86:	436b      	muls	r3, r5
 8001a88:	469c      	mov	ip, r3
 8001a8a:	0c10      	lsrs	r0, r2, #16
 8001a8c:	4347      	muls	r7, r0
 8001a8e:	0c0b      	lsrs	r3, r1, #16
 8001a90:	44bc      	add	ip, r7
 8001a92:	4463      	add	r3, ip
 8001a94:	4368      	muls	r0, r5
 8001a96:	429f      	cmp	r7, r3
 8001a98:	d903      	bls.n	8001aa2 <__aeabi_ddiv+0x25e>
 8001a9a:	2580      	movs	r5, #128	@ 0x80
 8001a9c:	026d      	lsls	r5, r5, #9
 8001a9e:	46ac      	mov	ip, r5
 8001aa0:	4460      	add	r0, ip
 8001aa2:	0c1f      	lsrs	r7, r3, #16
 8001aa4:	0409      	lsls	r1, r1, #16
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	0c09      	lsrs	r1, r1, #16
 8001aaa:	183f      	adds	r7, r7, r0
 8001aac:	185b      	adds	r3, r3, r1
 8001aae:	42bc      	cmp	r4, r7
 8001ab0:	d200      	bcs.n	8001ab4 <__aeabi_ddiv+0x270>
 8001ab2:	e102      	b.n	8001cba <__aeabi_ddiv+0x476>
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x274>
 8001ab6:	e0fd      	b.n	8001cb4 <__aeabi_ddiv+0x470>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <__aeabi_ddiv+0x388>)
 8001abe:	4453      	add	r3, sl
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_ddiv+0x282>
 8001ac4:	e0ae      	b.n	8001c24 <__aeabi_ddiv+0x3e0>
 8001ac6:	0751      	lsls	r1, r2, #29
 8001ac8:	d000      	beq.n	8001acc <__aeabi_ddiv+0x288>
 8001aca:	e198      	b.n	8001dfe <__aeabi_ddiv+0x5ba>
 8001acc:	4659      	mov	r1, fp
 8001ace:	01c9      	lsls	r1, r1, #7
 8001ad0:	d506      	bpl.n	8001ae0 <__aeabi_ddiv+0x29c>
 8001ad2:	4659      	mov	r1, fp
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd0 <__aeabi_ddiv+0x38c>)
 8001ad6:	4019      	ands	r1, r3
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	468b      	mov	fp, r1
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4453      	add	r3, sl
 8001ae0:	493c      	ldr	r1, [pc, #240]	@ (8001bd4 <__aeabi_ddiv+0x390>)
 8001ae2:	428b      	cmp	r3, r1
 8001ae4:	dd00      	ble.n	8001ae8 <__aeabi_ddiv+0x2a4>
 8001ae6:	e71a      	b.n	800191e <__aeabi_ddiv+0xda>
 8001ae8:	4659      	mov	r1, fp
 8001aea:	08d2      	lsrs	r2, r2, #3
 8001aec:	0749      	lsls	r1, r1, #29
 8001aee:	4311      	orrs	r1, r2
 8001af0:	465a      	mov	r2, fp
 8001af2:	055b      	lsls	r3, r3, #21
 8001af4:	0254      	lsls	r4, r2, #9
 8001af6:	4688      	mov	r8, r1
 8001af8:	0b24      	lsrs	r4, r4, #12
 8001afa:	0d5b      	lsrs	r3, r3, #21
 8001afc:	e702      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001afe:	465a      	mov	r2, fp
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	d100      	bne.n	8001b08 <__aeabi_ddiv+0x2c4>
 8001b06:	e07e      	b.n	8001c06 <__aeabi_ddiv+0x3c2>
 8001b08:	465b      	mov	r3, fp
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x2cc>
 8001b0e:	e100      	b.n	8001d12 <__aeabi_ddiv+0x4ce>
 8001b10:	4658      	mov	r0, fp
 8001b12:	f001 fa97 	bl	8003044 <__clzsi2>
 8001b16:	0002      	movs	r2, r0
 8001b18:	0003      	movs	r3, r0
 8001b1a:	3a0b      	subs	r2, #11
 8001b1c:	271d      	movs	r7, #29
 8001b1e:	9e00      	ldr	r6, [sp, #0]
 8001b20:	1aba      	subs	r2, r7, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	4658      	mov	r0, fp
 8001b26:	40d6      	lsrs	r6, r2
 8001b28:	3908      	subs	r1, #8
 8001b2a:	4088      	lsls	r0, r1
 8001b2c:	0032      	movs	r2, r6
 8001b2e:	4302      	orrs	r2, r0
 8001b30:	4693      	mov	fp, r2
 8001b32:	9a00      	ldr	r2, [sp, #0]
 8001b34:	408a      	lsls	r2, r1
 8001b36:	4928      	ldr	r1, [pc, #160]	@ (8001bd8 <__aeabi_ddiv+0x394>)
 8001b38:	4453      	add	r3, sl
 8001b3a:	468a      	mov	sl, r1
 8001b3c:	449a      	add	sl, r3
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e6c8      	b.n	80018d4 <__aeabi_ddiv+0x90>
 8001b42:	465b      	mov	r3, fp
 8001b44:	4303      	orrs	r3, r0
 8001b46:	4699      	mov	r9, r3
 8001b48:	d056      	beq.n	8001bf8 <__aeabi_ddiv+0x3b4>
 8001b4a:	465b      	mov	r3, fp
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_ddiv+0x30e>
 8001b50:	e0cd      	b.n	8001cee <__aeabi_ddiv+0x4aa>
 8001b52:	4658      	mov	r0, fp
 8001b54:	f001 fa76 	bl	8003044 <__clzsi2>
 8001b58:	230b      	movs	r3, #11
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0002      	movs	r2, r0
 8001b60:	4484      	add	ip, r0
 8001b62:	4666      	mov	r6, ip
 8001b64:	231d      	movs	r3, #29
 8001b66:	1b9b      	subs	r3, r3, r6
 8001b68:	0026      	movs	r6, r4
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	4658      	mov	r0, fp
 8001b6e:	40de      	lsrs	r6, r3
 8001b70:	3908      	subs	r1, #8
 8001b72:	4088      	lsls	r0, r1
 8001b74:	0033      	movs	r3, r6
 8001b76:	4303      	orrs	r3, r0
 8001b78:	4699      	mov	r9, r3
 8001b7a:	0023      	movs	r3, r4
 8001b7c:	408b      	lsls	r3, r1
 8001b7e:	4698      	mov	r8, r3
 8001b80:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <__aeabi_ddiv+0x398>)
 8001b82:	2400      	movs	r4, #0
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	469a      	mov	sl, r3
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9303      	str	r3, [sp, #12]
 8001b8c:	e682      	b.n	8001894 <__aeabi_ddiv+0x50>
 8001b8e:	465a      	mov	r2, fp
 8001b90:	4302      	orrs	r2, r0
 8001b92:	4691      	mov	r9, r2
 8001b94:	d12a      	bne.n	8001bec <__aeabi_ddiv+0x3a8>
 8001b96:	2200      	movs	r2, #0
 8001b98:	469a      	mov	sl, r3
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	4690      	mov	r8, r2
 8001b9e:	2408      	movs	r4, #8
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	e677      	b.n	8001894 <__aeabi_ddiv+0x50>
 8001ba4:	465a      	mov	r2, fp
 8001ba6:	9b00      	ldr	r3, [sp, #0]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <__aeabi_ddiv+0x39c>)
 8001bac:	469c      	mov	ip, r3
 8001bae:	44e2      	add	sl, ip
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d117      	bne.n	8001be4 <__aeabi_ddiv+0x3a0>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	431c      	orrs	r4, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	469b      	mov	fp, r3
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	e689      	b.n	80018d4 <__aeabi_ddiv+0x90>
 8001bc0:	000007ff 	.word	0x000007ff
 8001bc4:	fffffc01 	.word	0xfffffc01
 8001bc8:	0800624c 	.word	0x0800624c
 8001bcc:	000003ff 	.word	0x000003ff
 8001bd0:	feffffff 	.word	0xfeffffff
 8001bd4:	000007fe 	.word	0x000007fe
 8001bd8:	000003f3 	.word	0x000003f3
 8001bdc:	fffffc0d 	.word	0xfffffc0d
 8001be0:	fffff801 	.word	0xfffff801
 8001be4:	2303      	movs	r3, #3
 8001be6:	0032      	movs	r2, r6
 8001be8:	431c      	orrs	r4, r3
 8001bea:	e673      	b.n	80018d4 <__aeabi_ddiv+0x90>
 8001bec:	469a      	mov	sl, r3
 8001bee:	2303      	movs	r3, #3
 8001bf0:	46d9      	mov	r9, fp
 8001bf2:	240c      	movs	r4, #12
 8001bf4:	9303      	str	r3, [sp, #12]
 8001bf6:	e64d      	b.n	8001894 <__aeabi_ddiv+0x50>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	469a      	mov	sl, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	2404      	movs	r4, #4
 8001c02:	9303      	str	r3, [sp, #12]
 8001c04:	e646      	b.n	8001894 <__aeabi_ddiv+0x50>
 8001c06:	2301      	movs	r3, #1
 8001c08:	431c      	orrs	r4, r3
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	469b      	mov	fp, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	e660      	b.n	80018d4 <__aeabi_ddiv+0x90>
 8001c12:	2300      	movs	r3, #0
 8001c14:	2480      	movs	r4, #128	@ 0x80
 8001c16:	4698      	mov	r8, r3
 8001c18:	2600      	movs	r6, #0
 8001c1a:	4b92      	ldr	r3, [pc, #584]	@ (8001e64 <__aeabi_ddiv+0x620>)
 8001c1c:	0324      	lsls	r4, r4, #12
 8001c1e:	e671      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001c20:	2201      	movs	r2, #1
 8001c22:	4252      	negs	r2, r2
 8001c24:	2101      	movs	r1, #1
 8001c26:	1ac9      	subs	r1, r1, r3
 8001c28:	2938      	cmp	r1, #56	@ 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_ddiv+0x3ea>
 8001c2c:	e666      	b.n	80018fc <__aeabi_ddiv+0xb8>
 8001c2e:	291f      	cmp	r1, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_ddiv+0x3f0>
 8001c32:	e0ab      	b.n	8001d8c <__aeabi_ddiv+0x548>
 8001c34:	201f      	movs	r0, #31
 8001c36:	4240      	negs	r0, r0
 8001c38:	1ac3      	subs	r3, r0, r3
 8001c3a:	4658      	mov	r0, fp
 8001c3c:	40d8      	lsrs	r0, r3
 8001c3e:	0003      	movs	r3, r0
 8001c40:	2920      	cmp	r1, #32
 8001c42:	d004      	beq.n	8001c4e <__aeabi_ddiv+0x40a>
 8001c44:	4658      	mov	r0, fp
 8001c46:	4988      	ldr	r1, [pc, #544]	@ (8001e68 <__aeabi_ddiv+0x624>)
 8001c48:	4451      	add	r1, sl
 8001c4a:	4088      	lsls	r0, r1
 8001c4c:	4302      	orrs	r2, r0
 8001c4e:	1e51      	subs	r1, r2, #1
 8001c50:	418a      	sbcs	r2, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	2307      	movs	r3, #7
 8001c56:	0019      	movs	r1, r3
 8001c58:	2400      	movs	r4, #0
 8001c5a:	4011      	ands	r1, r2
 8001c5c:	4213      	tst	r3, r2
 8001c5e:	d00c      	beq.n	8001c7a <__aeabi_ddiv+0x436>
 8001c60:	230f      	movs	r3, #15
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d100      	bne.n	8001c6a <__aeabi_ddiv+0x426>
 8001c68:	e0f9      	b.n	8001e5e <__aeabi_ddiv+0x61a>
 8001c6a:	1d11      	adds	r1, r2, #4
 8001c6c:	4291      	cmp	r1, r2
 8001c6e:	419b      	sbcs	r3, r3
 8001c70:	000a      	movs	r2, r1
 8001c72:	425b      	negs	r3, r3
 8001c74:	0759      	lsls	r1, r3, #29
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	0b1c      	lsrs	r4, r3, #12
 8001c7a:	08d2      	lsrs	r2, r2, #3
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4690      	mov	r8, r2
 8001c80:	2300      	movs	r3, #0
 8001c82:	e63f      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001c84:	2480      	movs	r4, #128	@ 0x80
 8001c86:	464b      	mov	r3, r9
 8001c88:	0324      	lsls	r4, r4, #12
 8001c8a:	4223      	tst	r3, r4
 8001c8c:	d009      	beq.n	8001ca2 <__aeabi_ddiv+0x45e>
 8001c8e:	465b      	mov	r3, fp
 8001c90:	4223      	tst	r3, r4
 8001c92:	d106      	bne.n	8001ca2 <__aeabi_ddiv+0x45e>
 8001c94:	431c      	orrs	r4, r3
 8001c96:	0324      	lsls	r4, r4, #12
 8001c98:	002e      	movs	r6, r5
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	4b71      	ldr	r3, [pc, #452]	@ (8001e64 <__aeabi_ddiv+0x620>)
 8001c9e:	0b24      	lsrs	r4, r4, #12
 8001ca0:	e630      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001ca2:	2480      	movs	r4, #128	@ 0x80
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	0324      	lsls	r4, r4, #12
 8001ca8:	431c      	orrs	r4, r3
 8001caa:	0324      	lsls	r4, r4, #12
 8001cac:	9e02      	ldr	r6, [sp, #8]
 8001cae:	4b6d      	ldr	r3, [pc, #436]	@ (8001e64 <__aeabi_ddiv+0x620>)
 8001cb0:	0b24      	lsrs	r4, r4, #12
 8001cb2:	e627      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_ddiv+0x476>
 8001cb8:	e700      	b.n	8001abc <__aeabi_ddiv+0x278>
 8001cba:	9800      	ldr	r0, [sp, #0]
 8001cbc:	1e51      	subs	r1, r2, #1
 8001cbe:	4684      	mov	ip, r0
 8001cc0:	4464      	add	r4, ip
 8001cc2:	4284      	cmp	r4, r0
 8001cc4:	d200      	bcs.n	8001cc8 <__aeabi_ddiv+0x484>
 8001cc6:	e084      	b.n	8001dd2 <__aeabi_ddiv+0x58e>
 8001cc8:	42bc      	cmp	r4, r7
 8001cca:	d200      	bcs.n	8001cce <__aeabi_ddiv+0x48a>
 8001ccc:	e0ae      	b.n	8001e2c <__aeabi_ddiv+0x5e8>
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_ddiv+0x48e>
 8001cd0:	e0c1      	b.n	8001e56 <__aeabi_ddiv+0x612>
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	e6f0      	b.n	8001ab8 <__aeabi_ddiv+0x274>
 8001cd6:	4542      	cmp	r2, r8
 8001cd8:	d900      	bls.n	8001cdc <__aeabi_ddiv+0x498>
 8001cda:	e62c      	b.n	8001936 <__aeabi_ddiv+0xf2>
 8001cdc:	464b      	mov	r3, r9
 8001cde:	07dc      	lsls	r4, r3, #31
 8001ce0:	0858      	lsrs	r0, r3, #1
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	431c      	orrs	r4, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	07df      	lsls	r7, r3, #31
 8001cec:	e62a      	b.n	8001944 <__aeabi_ddiv+0x100>
 8001cee:	f001 f9a9 	bl	8003044 <__clzsi2>
 8001cf2:	2315      	movs	r3, #21
 8001cf4:	469c      	mov	ip, r3
 8001cf6:	4484      	add	ip, r0
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	4663      	mov	r3, ip
 8001cfc:	3220      	adds	r2, #32
 8001cfe:	2b1c      	cmp	r3, #28
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_ddiv+0x4c0>
 8001d02:	e72e      	b.n	8001b62 <__aeabi_ddiv+0x31e>
 8001d04:	0023      	movs	r3, r4
 8001d06:	3808      	subs	r0, #8
 8001d08:	4083      	lsls	r3, r0
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4698      	mov	r8, r3
 8001d10:	e736      	b.n	8001b80 <__aeabi_ddiv+0x33c>
 8001d12:	f001 f997 	bl	8003044 <__clzsi2>
 8001d16:	0002      	movs	r2, r0
 8001d18:	0003      	movs	r3, r0
 8001d1a:	3215      	adds	r2, #21
 8001d1c:	3320      	adds	r3, #32
 8001d1e:	2a1c      	cmp	r2, #28
 8001d20:	dc00      	bgt.n	8001d24 <__aeabi_ddiv+0x4e0>
 8001d22:	e6fb      	b.n	8001b1c <__aeabi_ddiv+0x2d8>
 8001d24:	9900      	ldr	r1, [sp, #0]
 8001d26:	3808      	subs	r0, #8
 8001d28:	4081      	lsls	r1, r0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	468b      	mov	fp, r1
 8001d2e:	e702      	b.n	8001b36 <__aeabi_ddiv+0x2f2>
 8001d30:	9900      	ldr	r1, [sp, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	468c      	mov	ip, r1
 8001d36:	4464      	add	r4, ip
 8001d38:	42a1      	cmp	r1, r4
 8001d3a:	d900      	bls.n	8001d3e <__aeabi_ddiv+0x4fa>
 8001d3c:	e69a      	b.n	8001a74 <__aeabi_ddiv+0x230>
 8001d3e:	42a2      	cmp	r2, r4
 8001d40:	d800      	bhi.n	8001d44 <__aeabi_ddiv+0x500>
 8001d42:	e697      	b.n	8001a74 <__aeabi_ddiv+0x230>
 8001d44:	1e83      	subs	r3, r0, #2
 8001d46:	4464      	add	r4, ip
 8001d48:	e694      	b.n	8001a74 <__aeabi_ddiv+0x230>
 8001d4a:	46ac      	mov	ip, r5
 8001d4c:	4461      	add	r1, ip
 8001d4e:	3f01      	subs	r7, #1
 8001d50:	428d      	cmp	r5, r1
 8001d52:	d900      	bls.n	8001d56 <__aeabi_ddiv+0x512>
 8001d54:	e680      	b.n	8001a58 <__aeabi_ddiv+0x214>
 8001d56:	428a      	cmp	r2, r1
 8001d58:	d800      	bhi.n	8001d5c <__aeabi_ddiv+0x518>
 8001d5a:	e67d      	b.n	8001a58 <__aeabi_ddiv+0x214>
 8001d5c:	1e87      	subs	r7, r0, #2
 8001d5e:	4461      	add	r1, ip
 8001d60:	e67a      	b.n	8001a58 <__aeabi_ddiv+0x214>
 8001d62:	4285      	cmp	r5, r0
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0x524>
 8001d66:	e65f      	b.n	8001a28 <__aeabi_ddiv+0x1e4>
 8001d68:	45b9      	cmp	r9, r7
 8001d6a:	d900      	bls.n	8001d6e <__aeabi_ddiv+0x52a>
 8001d6c:	e65c      	b.n	8001a28 <__aeabi_ddiv+0x1e4>
 8001d6e:	e656      	b.n	8001a1e <__aeabi_ddiv+0x1da>
 8001d70:	42a2      	cmp	r2, r4
 8001d72:	d800      	bhi.n	8001d76 <__aeabi_ddiv+0x532>
 8001d74:	e61a      	b.n	80019ac <__aeabi_ddiv+0x168>
 8001d76:	1e83      	subs	r3, r0, #2
 8001d78:	4464      	add	r4, ip
 8001d7a:	e617      	b.n	80019ac <__aeabi_ddiv+0x168>
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	d800      	bhi.n	8001d82 <__aeabi_ddiv+0x53e>
 8001d80:	e600      	b.n	8001984 <__aeabi_ddiv+0x140>
 8001d82:	46ac      	mov	ip, r5
 8001d84:	1e83      	subs	r3, r0, #2
 8001d86:	4698      	mov	r8, r3
 8001d88:	4461      	add	r1, ip
 8001d8a:	e5fb      	b.n	8001984 <__aeabi_ddiv+0x140>
 8001d8c:	4837      	ldr	r0, [pc, #220]	@ (8001e6c <__aeabi_ddiv+0x628>)
 8001d8e:	0014      	movs	r4, r2
 8001d90:	4450      	add	r0, sl
 8001d92:	4082      	lsls	r2, r0
 8001d94:	465b      	mov	r3, fp
 8001d96:	0017      	movs	r7, r2
 8001d98:	4083      	lsls	r3, r0
 8001d9a:	40cc      	lsrs	r4, r1
 8001d9c:	1e7a      	subs	r2, r7, #1
 8001d9e:	4197      	sbcs	r7, r2
 8001da0:	4323      	orrs	r3, r4
 8001da2:	433b      	orrs	r3, r7
 8001da4:	001a      	movs	r2, r3
 8001da6:	465b      	mov	r3, fp
 8001da8:	40cb      	lsrs	r3, r1
 8001daa:	0751      	lsls	r1, r2, #29
 8001dac:	d009      	beq.n	8001dc2 <__aeabi_ddiv+0x57e>
 8001dae:	210f      	movs	r1, #15
 8001db0:	4011      	ands	r1, r2
 8001db2:	2904      	cmp	r1, #4
 8001db4:	d005      	beq.n	8001dc2 <__aeabi_ddiv+0x57e>
 8001db6:	1d11      	adds	r1, r2, #4
 8001db8:	4291      	cmp	r1, r2
 8001dba:	4192      	sbcs	r2, r2
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	189b      	adds	r3, r3, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	0219      	lsls	r1, r3, #8
 8001dc4:	d400      	bmi.n	8001dc8 <__aeabi_ddiv+0x584>
 8001dc6:	e755      	b.n	8001c74 <__aeabi_ddiv+0x430>
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2301      	movs	r3, #1
 8001dcc:	2400      	movs	r4, #0
 8001dce:	4690      	mov	r8, r2
 8001dd0:	e598      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	42bc      	cmp	r4, r7
 8001dd6:	d000      	beq.n	8001dda <__aeabi_ddiv+0x596>
 8001dd8:	e66e      	b.n	8001ab8 <__aeabi_ddiv+0x274>
 8001dda:	454b      	cmp	r3, r9
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_ddiv+0x59c>
 8001dde:	e66b      	b.n	8001ab8 <__aeabi_ddiv+0x274>
 8001de0:	e66c      	b.n	8001abc <__aeabi_ddiv+0x278>
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <__aeabi_ddiv+0x62c>)
 8001de4:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <__aeabi_ddiv+0x630>)
 8001de6:	4453      	add	r3, sl
 8001de8:	4592      	cmp	sl, r2
 8001dea:	da00      	bge.n	8001dee <__aeabi_ddiv+0x5aa>
 8001dec:	e718      	b.n	8001c20 <__aeabi_ddiv+0x3dc>
 8001dee:	2101      	movs	r1, #1
 8001df0:	4249      	negs	r1, r1
 8001df2:	1d0a      	adds	r2, r1, #4
 8001df4:	428a      	cmp	r2, r1
 8001df6:	4189      	sbcs	r1, r1
 8001df8:	4249      	negs	r1, r1
 8001dfa:	448b      	add	fp, r1
 8001dfc:	e666      	b.n	8001acc <__aeabi_ddiv+0x288>
 8001dfe:	210f      	movs	r1, #15
 8001e00:	4011      	ands	r1, r2
 8001e02:	2904      	cmp	r1, #4
 8001e04:	d100      	bne.n	8001e08 <__aeabi_ddiv+0x5c4>
 8001e06:	e661      	b.n	8001acc <__aeabi_ddiv+0x288>
 8001e08:	0011      	movs	r1, r2
 8001e0a:	e7f2      	b.n	8001df2 <__aeabi_ddiv+0x5ae>
 8001e0c:	42bc      	cmp	r4, r7
 8001e0e:	d800      	bhi.n	8001e12 <__aeabi_ddiv+0x5ce>
 8001e10:	e60a      	b.n	8001a28 <__aeabi_ddiv+0x1e4>
 8001e12:	2302      	movs	r3, #2
 8001e14:	425b      	negs	r3, r3
 8001e16:	469c      	mov	ip, r3
 8001e18:	9900      	ldr	r1, [sp, #0]
 8001e1a:	444f      	add	r7, r9
 8001e1c:	454f      	cmp	r7, r9
 8001e1e:	419b      	sbcs	r3, r3
 8001e20:	44e3      	add	fp, ip
 8001e22:	468c      	mov	ip, r1
 8001e24:	425b      	negs	r3, r3
 8001e26:	4463      	add	r3, ip
 8001e28:	18c0      	adds	r0, r0, r3
 8001e2a:	e5ff      	b.n	8001a2c <__aeabi_ddiv+0x1e8>
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	9d00      	ldr	r5, [sp, #0]
 8001e30:	0048      	lsls	r0, r1, #1
 8001e32:	4548      	cmp	r0, r9
 8001e34:	4189      	sbcs	r1, r1
 8001e36:	46ac      	mov	ip, r5
 8001e38:	4249      	negs	r1, r1
 8001e3a:	4461      	add	r1, ip
 8001e3c:	4681      	mov	r9, r0
 8001e3e:	3a02      	subs	r2, #2
 8001e40:	1864      	adds	r4, r4, r1
 8001e42:	e7c7      	b.n	8001dd4 <__aeabi_ddiv+0x590>
 8001e44:	2480      	movs	r4, #128	@ 0x80
 8001e46:	465b      	mov	r3, fp
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	431c      	orrs	r4, r3
 8001e4c:	0324      	lsls	r4, r4, #12
 8001e4e:	4690      	mov	r8, r2
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__aeabi_ddiv+0x620>)
 8001e52:	0b24      	lsrs	r4, r4, #12
 8001e54:	e556      	b.n	8001904 <__aeabi_ddiv+0xc0>
 8001e56:	4599      	cmp	r9, r3
 8001e58:	d3e8      	bcc.n	8001e2c <__aeabi_ddiv+0x5e8>
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	e7bd      	b.n	8001dda <__aeabi_ddiv+0x596>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e708      	b.n	8001c74 <__aeabi_ddiv+0x430>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff
 8001e68:	0000043e 	.word	0x0000043e
 8001e6c:	0000041e 	.word	0x0000041e
 8001e70:	000003ff 	.word	0x000003ff
 8001e74:	fffffc02 	.word	0xfffffc02

08001e78 <__eqdf2>:
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	4657      	mov	r7, sl
 8001e7c:	46de      	mov	lr, fp
 8001e7e:	464e      	mov	r6, r9
 8001e80:	4645      	mov	r5, r8
 8001e82:	b5e0      	push	{r5, r6, r7, lr}
 8001e84:	000d      	movs	r5, r1
 8001e86:	0004      	movs	r4, r0
 8001e88:	0fe8      	lsrs	r0, r5, #31
 8001e8a:	4683      	mov	fp, r0
 8001e8c:	0309      	lsls	r1, r1, #12
 8001e8e:	0fd8      	lsrs	r0, r3, #31
 8001e90:	0b09      	lsrs	r1, r1, #12
 8001e92:	4682      	mov	sl, r0
 8001e94:	4819      	ldr	r0, [pc, #100]	@ (8001efc <__eqdf2+0x84>)
 8001e96:	468c      	mov	ip, r1
 8001e98:	031f      	lsls	r7, r3, #12
 8001e9a:	0069      	lsls	r1, r5, #1
 8001e9c:	005e      	lsls	r6, r3, #1
 8001e9e:	0d49      	lsrs	r1, r1, #21
 8001ea0:	0b3f      	lsrs	r7, r7, #12
 8001ea2:	0d76      	lsrs	r6, r6, #21
 8001ea4:	4281      	cmp	r1, r0
 8001ea6:	d018      	beq.n	8001eda <__eqdf2+0x62>
 8001ea8:	4286      	cmp	r6, r0
 8001eaa:	d00f      	beq.n	8001ecc <__eqdf2+0x54>
 8001eac:	2001      	movs	r0, #1
 8001eae:	42b1      	cmp	r1, r6
 8001eb0:	d10d      	bne.n	8001ece <__eqdf2+0x56>
 8001eb2:	45bc      	cmp	ip, r7
 8001eb4:	d10b      	bne.n	8001ece <__eqdf2+0x56>
 8001eb6:	4294      	cmp	r4, r2
 8001eb8:	d109      	bne.n	8001ece <__eqdf2+0x56>
 8001eba:	45d3      	cmp	fp, sl
 8001ebc:	d01c      	beq.n	8001ef8 <__eqdf2+0x80>
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d105      	bne.n	8001ece <__eqdf2+0x56>
 8001ec2:	4660      	mov	r0, ip
 8001ec4:	4320      	orrs	r0, r4
 8001ec6:	1e43      	subs	r3, r0, #1
 8001ec8:	4198      	sbcs	r0, r3
 8001eca:	e000      	b.n	8001ece <__eqdf2+0x56>
 8001ecc:	2001      	movs	r0, #1
 8001ece:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed0:	46bb      	mov	fp, r7
 8001ed2:	46b2      	mov	sl, r6
 8001ed4:	46a9      	mov	r9, r5
 8001ed6:	46a0      	mov	r8, r4
 8001ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eda:	2001      	movs	r0, #1
 8001edc:	428e      	cmp	r6, r1
 8001ede:	d1f6      	bne.n	8001ece <__eqdf2+0x56>
 8001ee0:	4661      	mov	r1, ip
 8001ee2:	4339      	orrs	r1, r7
 8001ee4:	000f      	movs	r7, r1
 8001ee6:	4317      	orrs	r7, r2
 8001ee8:	4327      	orrs	r7, r4
 8001eea:	d1f0      	bne.n	8001ece <__eqdf2+0x56>
 8001eec:	465b      	mov	r3, fp
 8001eee:	4652      	mov	r2, sl
 8001ef0:	1a98      	subs	r0, r3, r2
 8001ef2:	1e43      	subs	r3, r0, #1
 8001ef4:	4198      	sbcs	r0, r3
 8001ef6:	e7ea      	b.n	8001ece <__eqdf2+0x56>
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7e8      	b.n	8001ece <__eqdf2+0x56>
 8001efc:	000007ff 	.word	0x000007ff

08001f00 <__gedf2>:
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	4657      	mov	r7, sl
 8001f04:	464e      	mov	r6, r9
 8001f06:	4645      	mov	r5, r8
 8001f08:	46de      	mov	lr, fp
 8001f0a:	b5e0      	push	{r5, r6, r7, lr}
 8001f0c:	000d      	movs	r5, r1
 8001f0e:	030f      	lsls	r7, r1, #12
 8001f10:	0b39      	lsrs	r1, r7, #12
 8001f12:	b083      	sub	sp, #12
 8001f14:	0004      	movs	r4, r0
 8001f16:	4680      	mov	r8, r0
 8001f18:	9101      	str	r1, [sp, #4]
 8001f1a:	0058      	lsls	r0, r3, #1
 8001f1c:	0fe9      	lsrs	r1, r5, #31
 8001f1e:	4f31      	ldr	r7, [pc, #196]	@ (8001fe4 <__gedf2+0xe4>)
 8001f20:	0d40      	lsrs	r0, r0, #21
 8001f22:	468c      	mov	ip, r1
 8001f24:	006e      	lsls	r6, r5, #1
 8001f26:	0319      	lsls	r1, r3, #12
 8001f28:	4682      	mov	sl, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	0d76      	lsrs	r6, r6, #21
 8001f2e:	0b09      	lsrs	r1, r1, #12
 8001f30:	0fd8      	lsrs	r0, r3, #31
 8001f32:	42be      	cmp	r6, r7
 8001f34:	d01f      	beq.n	8001f76 <__gedf2+0x76>
 8001f36:	45ba      	cmp	sl, r7
 8001f38:	d00f      	beq.n	8001f5a <__gedf2+0x5a>
 8001f3a:	2e00      	cmp	r6, #0
 8001f3c:	d12f      	bne.n	8001f9e <__gedf2+0x9e>
 8001f3e:	4655      	mov	r5, sl
 8001f40:	9e01      	ldr	r6, [sp, #4]
 8001f42:	4334      	orrs	r4, r6
 8001f44:	2d00      	cmp	r5, #0
 8001f46:	d127      	bne.n	8001f98 <__gedf2+0x98>
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	d03a      	beq.n	8001fc2 <__gedf2+0xc2>
 8001f4c:	2c00      	cmp	r4, #0
 8001f4e:	d145      	bne.n	8001fdc <__gedf2+0xdc>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d11a      	bne.n	8001f8a <__gedf2+0x8a>
 8001f54:	2001      	movs	r0, #1
 8001f56:	4240      	negs	r0, r0
 8001f58:	e017      	b.n	8001f8a <__gedf2+0x8a>
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	d13b      	bne.n	8001fd6 <__gedf2+0xd6>
 8001f5e:	2e00      	cmp	r6, #0
 8001f60:	d102      	bne.n	8001f68 <__gedf2+0x68>
 8001f62:	9f01      	ldr	r7, [sp, #4]
 8001f64:	4327      	orrs	r7, r4
 8001f66:	d0f3      	beq.n	8001f50 <__gedf2+0x50>
 8001f68:	4584      	cmp	ip, r0
 8001f6a:	d109      	bne.n	8001f80 <__gedf2+0x80>
 8001f6c:	4663      	mov	r3, ip
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <__gedf2+0x54>
 8001f72:	4660      	mov	r0, ip
 8001f74:	e009      	b.n	8001f8a <__gedf2+0x8a>
 8001f76:	9f01      	ldr	r7, [sp, #4]
 8001f78:	4327      	orrs	r7, r4
 8001f7a:	d12c      	bne.n	8001fd6 <__gedf2+0xd6>
 8001f7c:	45b2      	cmp	sl, r6
 8001f7e:	d024      	beq.n	8001fca <__gedf2+0xca>
 8001f80:	4663      	mov	r3, ip
 8001f82:	2002      	movs	r0, #2
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4018      	ands	r0, r3
 8001f88:	3801      	subs	r0, #1
 8001f8a:	b003      	add	sp, #12
 8001f8c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f8e:	46bb      	mov	fp, r7
 8001f90:	46b2      	mov	sl, r6
 8001f92:	46a9      	mov	r9, r5
 8001f94:	46a0      	mov	r8, r4
 8001f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f98:	2c00      	cmp	r4, #0
 8001f9a:	d0d9      	beq.n	8001f50 <__gedf2+0x50>
 8001f9c:	e7e4      	b.n	8001f68 <__gedf2+0x68>
 8001f9e:	4654      	mov	r4, sl
 8001fa0:	2c00      	cmp	r4, #0
 8001fa2:	d0ed      	beq.n	8001f80 <__gedf2+0x80>
 8001fa4:	4584      	cmp	ip, r0
 8001fa6:	d1eb      	bne.n	8001f80 <__gedf2+0x80>
 8001fa8:	4556      	cmp	r6, sl
 8001faa:	dce9      	bgt.n	8001f80 <__gedf2+0x80>
 8001fac:	dbde      	blt.n	8001f6c <__gedf2+0x6c>
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d8e5      	bhi.n	8001f80 <__gedf2+0x80>
 8001fb4:	d1da      	bne.n	8001f6c <__gedf2+0x6c>
 8001fb6:	45c8      	cmp	r8, r9
 8001fb8:	d8e2      	bhi.n	8001f80 <__gedf2+0x80>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	45c8      	cmp	r8, r9
 8001fbe:	d2e4      	bcs.n	8001f8a <__gedf2+0x8a>
 8001fc0:	e7d4      	b.n	8001f6c <__gedf2+0x6c>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	2c00      	cmp	r4, #0
 8001fc6:	d0e0      	beq.n	8001f8a <__gedf2+0x8a>
 8001fc8:	e7da      	b.n	8001f80 <__gedf2+0x80>
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	d103      	bne.n	8001fd6 <__gedf2+0xd6>
 8001fce:	4584      	cmp	ip, r0
 8001fd0:	d1d6      	bne.n	8001f80 <__gedf2+0x80>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e7d9      	b.n	8001f8a <__gedf2+0x8a>
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	4240      	negs	r0, r0
 8001fda:	e7d6      	b.n	8001f8a <__gedf2+0x8a>
 8001fdc:	4584      	cmp	ip, r0
 8001fde:	d0e6      	beq.n	8001fae <__gedf2+0xae>
 8001fe0:	e7ce      	b.n	8001f80 <__gedf2+0x80>
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	000007ff 	.word	0x000007ff

08001fe8 <__ledf2>:
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	4657      	mov	r7, sl
 8001fec:	464e      	mov	r6, r9
 8001fee:	4645      	mov	r5, r8
 8001ff0:	46de      	mov	lr, fp
 8001ff2:	b5e0      	push	{r5, r6, r7, lr}
 8001ff4:	000d      	movs	r5, r1
 8001ff6:	030f      	lsls	r7, r1, #12
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	4680      	mov	r8, r0
 8001ffc:	0fe8      	lsrs	r0, r5, #31
 8001ffe:	0b39      	lsrs	r1, r7, #12
 8002000:	4684      	mov	ip, r0
 8002002:	b083      	sub	sp, #12
 8002004:	0058      	lsls	r0, r3, #1
 8002006:	4f30      	ldr	r7, [pc, #192]	@ (80020c8 <__ledf2+0xe0>)
 8002008:	0d40      	lsrs	r0, r0, #21
 800200a:	9101      	str	r1, [sp, #4]
 800200c:	031e      	lsls	r6, r3, #12
 800200e:	0069      	lsls	r1, r5, #1
 8002010:	4682      	mov	sl, r0
 8002012:	4691      	mov	r9, r2
 8002014:	0d49      	lsrs	r1, r1, #21
 8002016:	0b36      	lsrs	r6, r6, #12
 8002018:	0fd8      	lsrs	r0, r3, #31
 800201a:	42b9      	cmp	r1, r7
 800201c:	d020      	beq.n	8002060 <__ledf2+0x78>
 800201e:	45ba      	cmp	sl, r7
 8002020:	d00f      	beq.n	8002042 <__ledf2+0x5a>
 8002022:	2900      	cmp	r1, #0
 8002024:	d12b      	bne.n	800207e <__ledf2+0x96>
 8002026:	9901      	ldr	r1, [sp, #4]
 8002028:	430c      	orrs	r4, r1
 800202a:	4651      	mov	r1, sl
 800202c:	2900      	cmp	r1, #0
 800202e:	d137      	bne.n	80020a0 <__ledf2+0xb8>
 8002030:	4332      	orrs	r2, r6
 8002032:	d038      	beq.n	80020a6 <__ledf2+0xbe>
 8002034:	2c00      	cmp	r4, #0
 8002036:	d144      	bne.n	80020c2 <__ledf2+0xda>
 8002038:	2800      	cmp	r0, #0
 800203a:	d119      	bne.n	8002070 <__ledf2+0x88>
 800203c:	2001      	movs	r0, #1
 800203e:	4240      	negs	r0, r0
 8002040:	e016      	b.n	8002070 <__ledf2+0x88>
 8002042:	4316      	orrs	r6, r2
 8002044:	d113      	bne.n	800206e <__ledf2+0x86>
 8002046:	2900      	cmp	r1, #0
 8002048:	d102      	bne.n	8002050 <__ledf2+0x68>
 800204a:	9f01      	ldr	r7, [sp, #4]
 800204c:	4327      	orrs	r7, r4
 800204e:	d0f3      	beq.n	8002038 <__ledf2+0x50>
 8002050:	4584      	cmp	ip, r0
 8002052:	d020      	beq.n	8002096 <__ledf2+0xae>
 8002054:	4663      	mov	r3, ip
 8002056:	2002      	movs	r0, #2
 8002058:	3b01      	subs	r3, #1
 800205a:	4018      	ands	r0, r3
 800205c:	3801      	subs	r0, #1
 800205e:	e007      	b.n	8002070 <__ledf2+0x88>
 8002060:	9f01      	ldr	r7, [sp, #4]
 8002062:	4327      	orrs	r7, r4
 8002064:	d103      	bne.n	800206e <__ledf2+0x86>
 8002066:	458a      	cmp	sl, r1
 8002068:	d1f4      	bne.n	8002054 <__ledf2+0x6c>
 800206a:	4316      	orrs	r6, r2
 800206c:	d01f      	beq.n	80020ae <__ledf2+0xc6>
 800206e:	2002      	movs	r0, #2
 8002070:	b003      	add	sp, #12
 8002072:	bcf0      	pop	{r4, r5, r6, r7}
 8002074:	46bb      	mov	fp, r7
 8002076:	46b2      	mov	sl, r6
 8002078:	46a9      	mov	r9, r5
 800207a:	46a0      	mov	r8, r4
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	4654      	mov	r4, sl
 8002080:	2c00      	cmp	r4, #0
 8002082:	d0e7      	beq.n	8002054 <__ledf2+0x6c>
 8002084:	4584      	cmp	ip, r0
 8002086:	d1e5      	bne.n	8002054 <__ledf2+0x6c>
 8002088:	4551      	cmp	r1, sl
 800208a:	dce3      	bgt.n	8002054 <__ledf2+0x6c>
 800208c:	db03      	blt.n	8002096 <__ledf2+0xae>
 800208e:	9b01      	ldr	r3, [sp, #4]
 8002090:	42b3      	cmp	r3, r6
 8002092:	d8df      	bhi.n	8002054 <__ledf2+0x6c>
 8002094:	d00f      	beq.n	80020b6 <__ledf2+0xce>
 8002096:	4663      	mov	r3, ip
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0cf      	beq.n	800203c <__ledf2+0x54>
 800209c:	4660      	mov	r0, ip
 800209e:	e7e7      	b.n	8002070 <__ledf2+0x88>
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	d0c9      	beq.n	8002038 <__ledf2+0x50>
 80020a4:	e7d4      	b.n	8002050 <__ledf2+0x68>
 80020a6:	2000      	movs	r0, #0
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d0e1      	beq.n	8002070 <__ledf2+0x88>
 80020ac:	e7d2      	b.n	8002054 <__ledf2+0x6c>
 80020ae:	4584      	cmp	ip, r0
 80020b0:	d1d0      	bne.n	8002054 <__ledf2+0x6c>
 80020b2:	2000      	movs	r0, #0
 80020b4:	e7dc      	b.n	8002070 <__ledf2+0x88>
 80020b6:	45c8      	cmp	r8, r9
 80020b8:	d8cc      	bhi.n	8002054 <__ledf2+0x6c>
 80020ba:	2000      	movs	r0, #0
 80020bc:	45c8      	cmp	r8, r9
 80020be:	d2d7      	bcs.n	8002070 <__ledf2+0x88>
 80020c0:	e7e9      	b.n	8002096 <__ledf2+0xae>
 80020c2:	4584      	cmp	ip, r0
 80020c4:	d0e3      	beq.n	800208e <__ledf2+0xa6>
 80020c6:	e7c5      	b.n	8002054 <__ledf2+0x6c>
 80020c8:	000007ff 	.word	0x000007ff

080020cc <__aeabi_dmul>:
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	4657      	mov	r7, sl
 80020d0:	46de      	mov	lr, fp
 80020d2:	464e      	mov	r6, r9
 80020d4:	4645      	mov	r5, r8
 80020d6:	b5e0      	push	{r5, r6, r7, lr}
 80020d8:	001f      	movs	r7, r3
 80020da:	030b      	lsls	r3, r1, #12
 80020dc:	0b1b      	lsrs	r3, r3, #12
 80020de:	0016      	movs	r6, r2
 80020e0:	469a      	mov	sl, r3
 80020e2:	0fca      	lsrs	r2, r1, #31
 80020e4:	004b      	lsls	r3, r1, #1
 80020e6:	0004      	movs	r4, r0
 80020e8:	4693      	mov	fp, r2
 80020ea:	b087      	sub	sp, #28
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dmul+0x26>
 80020f0:	e0d5      	b.n	800229e <__aeabi_dmul+0x1d2>
 80020f2:	4abb      	ldr	r2, [pc, #748]	@ (80023e0 <__aeabi_dmul+0x314>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d100      	bne.n	80020fa <__aeabi_dmul+0x2e>
 80020f8:	e0f8      	b.n	80022ec <__aeabi_dmul+0x220>
 80020fa:	4651      	mov	r1, sl
 80020fc:	0f42      	lsrs	r2, r0, #29
 80020fe:	00c9      	lsls	r1, r1, #3
 8002100:	430a      	orrs	r2, r1
 8002102:	2180      	movs	r1, #128	@ 0x80
 8002104:	0409      	lsls	r1, r1, #16
 8002106:	4311      	orrs	r1, r2
 8002108:	00c2      	lsls	r2, r0, #3
 800210a:	4691      	mov	r9, r2
 800210c:	4ab5      	ldr	r2, [pc, #724]	@ (80023e4 <__aeabi_dmul+0x318>)
 800210e:	468a      	mov	sl, r1
 8002110:	189d      	adds	r5, r3, r2
 8002112:	2300      	movs	r3, #0
 8002114:	4698      	mov	r8, r3
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	033c      	lsls	r4, r7, #12
 800211a:	007b      	lsls	r3, r7, #1
 800211c:	0ffa      	lsrs	r2, r7, #31
 800211e:	0030      	movs	r0, r6
 8002120:	0b24      	lsrs	r4, r4, #12
 8002122:	0d5b      	lsrs	r3, r3, #21
 8002124:	9200      	str	r2, [sp, #0]
 8002126:	d100      	bne.n	800212a <__aeabi_dmul+0x5e>
 8002128:	e096      	b.n	8002258 <__aeabi_dmul+0x18c>
 800212a:	4aad      	ldr	r2, [pc, #692]	@ (80023e0 <__aeabi_dmul+0x314>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d031      	beq.n	8002194 <__aeabi_dmul+0xc8>
 8002130:	0f72      	lsrs	r2, r6, #29
 8002132:	00e4      	lsls	r4, r4, #3
 8002134:	4322      	orrs	r2, r4
 8002136:	2480      	movs	r4, #128	@ 0x80
 8002138:	0424      	lsls	r4, r4, #16
 800213a:	4314      	orrs	r4, r2
 800213c:	4aa9      	ldr	r2, [pc, #676]	@ (80023e4 <__aeabi_dmul+0x318>)
 800213e:	00f0      	lsls	r0, r6, #3
 8002140:	4694      	mov	ip, r2
 8002142:	4463      	add	r3, ip
 8002144:	195b      	adds	r3, r3, r5
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	9201      	str	r2, [sp, #4]
 800214a:	4642      	mov	r2, r8
 800214c:	2600      	movs	r6, #0
 800214e:	2a0a      	cmp	r2, #10
 8002150:	dc42      	bgt.n	80021d8 <__aeabi_dmul+0x10c>
 8002152:	465a      	mov	r2, fp
 8002154:	9900      	ldr	r1, [sp, #0]
 8002156:	404a      	eors	r2, r1
 8002158:	4693      	mov	fp, r2
 800215a:	4642      	mov	r2, r8
 800215c:	2a02      	cmp	r2, #2
 800215e:	dc32      	bgt.n	80021c6 <__aeabi_dmul+0xfa>
 8002160:	3a01      	subs	r2, #1
 8002162:	2a01      	cmp	r2, #1
 8002164:	d900      	bls.n	8002168 <__aeabi_dmul+0x9c>
 8002166:	e149      	b.n	80023fc <__aeabi_dmul+0x330>
 8002168:	2e02      	cmp	r6, #2
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0xa2>
 800216c:	e0ca      	b.n	8002304 <__aeabi_dmul+0x238>
 800216e:	2e01      	cmp	r6, #1
 8002170:	d13d      	bne.n	80021ee <__aeabi_dmul+0x122>
 8002172:	2300      	movs	r3, #0
 8002174:	2400      	movs	r4, #0
 8002176:	2200      	movs	r2, #0
 8002178:	0010      	movs	r0, r2
 800217a:	465a      	mov	r2, fp
 800217c:	051b      	lsls	r3, r3, #20
 800217e:	4323      	orrs	r3, r4
 8002180:	07d2      	lsls	r2, r2, #31
 8002182:	4313      	orrs	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	b007      	add	sp, #28
 8002188:	bcf0      	pop	{r4, r5, r6, r7}
 800218a:	46bb      	mov	fp, r7
 800218c:	46b2      	mov	sl, r6
 800218e:	46a9      	mov	r9, r5
 8002190:	46a0      	mov	r8, r4
 8002192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002194:	4b92      	ldr	r3, [pc, #584]	@ (80023e0 <__aeabi_dmul+0x314>)
 8002196:	4326      	orrs	r6, r4
 8002198:	18eb      	adds	r3, r5, r3
 800219a:	2e00      	cmp	r6, #0
 800219c:	d100      	bne.n	80021a0 <__aeabi_dmul+0xd4>
 800219e:	e0bb      	b.n	8002318 <__aeabi_dmul+0x24c>
 80021a0:	2203      	movs	r2, #3
 80021a2:	4641      	mov	r1, r8
 80021a4:	4311      	orrs	r1, r2
 80021a6:	465a      	mov	r2, fp
 80021a8:	4688      	mov	r8, r1
 80021aa:	9900      	ldr	r1, [sp, #0]
 80021ac:	404a      	eors	r2, r1
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	0109      	lsls	r1, r1, #4
 80021b2:	468c      	mov	ip, r1
 80021b4:	0029      	movs	r1, r5
 80021b6:	4461      	add	r1, ip
 80021b8:	9101      	str	r1, [sp, #4]
 80021ba:	4641      	mov	r1, r8
 80021bc:	290a      	cmp	r1, #10
 80021be:	dd00      	ble.n	80021c2 <__aeabi_dmul+0xf6>
 80021c0:	e233      	b.n	800262a <__aeabi_dmul+0x55e>
 80021c2:	4693      	mov	fp, r2
 80021c4:	2603      	movs	r6, #3
 80021c6:	4642      	mov	r2, r8
 80021c8:	2701      	movs	r7, #1
 80021ca:	4097      	lsls	r7, r2
 80021cc:	21a6      	movs	r1, #166	@ 0xa6
 80021ce:	003a      	movs	r2, r7
 80021d0:	00c9      	lsls	r1, r1, #3
 80021d2:	400a      	ands	r2, r1
 80021d4:	420f      	tst	r7, r1
 80021d6:	d031      	beq.n	800223c <__aeabi_dmul+0x170>
 80021d8:	9e02      	ldr	r6, [sp, #8]
 80021da:	2e02      	cmp	r6, #2
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dmul+0x114>
 80021de:	e235      	b.n	800264c <__aeabi_dmul+0x580>
 80021e0:	2e03      	cmp	r6, #3
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dmul+0x11a>
 80021e4:	e1d2      	b.n	800258c <__aeabi_dmul+0x4c0>
 80021e6:	4654      	mov	r4, sl
 80021e8:	4648      	mov	r0, r9
 80021ea:	2e01      	cmp	r6, #1
 80021ec:	d0c1      	beq.n	8002172 <__aeabi_dmul+0xa6>
 80021ee:	9a01      	ldr	r2, [sp, #4]
 80021f0:	4b7d      	ldr	r3, [pc, #500]	@ (80023e8 <__aeabi_dmul+0x31c>)
 80021f2:	4694      	mov	ip, r2
 80021f4:	4463      	add	r3, ip
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_dmul+0x130>
 80021fa:	e0c0      	b.n	800237e <__aeabi_dmul+0x2b2>
 80021fc:	0742      	lsls	r2, r0, #29
 80021fe:	d009      	beq.n	8002214 <__aeabi_dmul+0x148>
 8002200:	220f      	movs	r2, #15
 8002202:	4002      	ands	r2, r0
 8002204:	2a04      	cmp	r2, #4
 8002206:	d005      	beq.n	8002214 <__aeabi_dmul+0x148>
 8002208:	1d02      	adds	r2, r0, #4
 800220a:	4282      	cmp	r2, r0
 800220c:	4180      	sbcs	r0, r0
 800220e:	4240      	negs	r0, r0
 8002210:	1824      	adds	r4, r4, r0
 8002212:	0010      	movs	r0, r2
 8002214:	01e2      	lsls	r2, r4, #7
 8002216:	d506      	bpl.n	8002226 <__aeabi_dmul+0x15a>
 8002218:	4b74      	ldr	r3, [pc, #464]	@ (80023ec <__aeabi_dmul+0x320>)
 800221a:	9a01      	ldr	r2, [sp, #4]
 800221c:	401c      	ands	r4, r3
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	4694      	mov	ip, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4463      	add	r3, ip
 8002226:	4a72      	ldr	r2, [pc, #456]	@ (80023f0 <__aeabi_dmul+0x324>)
 8002228:	4293      	cmp	r3, r2
 800222a:	dc6b      	bgt.n	8002304 <__aeabi_dmul+0x238>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	08c0      	lsrs	r0, r0, #3
 8002230:	0264      	lsls	r4, r4, #9
 8002232:	055b      	lsls	r3, r3, #21
 8002234:	4302      	orrs	r2, r0
 8002236:	0b24      	lsrs	r4, r4, #12
 8002238:	0d5b      	lsrs	r3, r3, #21
 800223a:	e79d      	b.n	8002178 <__aeabi_dmul+0xac>
 800223c:	2190      	movs	r1, #144	@ 0x90
 800223e:	0089      	lsls	r1, r1, #2
 8002240:	420f      	tst	r7, r1
 8002242:	d163      	bne.n	800230c <__aeabi_dmul+0x240>
 8002244:	2288      	movs	r2, #136	@ 0x88
 8002246:	423a      	tst	r2, r7
 8002248:	d100      	bne.n	800224c <__aeabi_dmul+0x180>
 800224a:	e0d7      	b.n	80023fc <__aeabi_dmul+0x330>
 800224c:	9b00      	ldr	r3, [sp, #0]
 800224e:	46a2      	mov	sl, r4
 8002250:	469b      	mov	fp, r3
 8002252:	4681      	mov	r9, r0
 8002254:	9602      	str	r6, [sp, #8]
 8002256:	e7bf      	b.n	80021d8 <__aeabi_dmul+0x10c>
 8002258:	0023      	movs	r3, r4
 800225a:	4333      	orrs	r3, r6
 800225c:	d100      	bne.n	8002260 <__aeabi_dmul+0x194>
 800225e:	e07f      	b.n	8002360 <__aeabi_dmul+0x294>
 8002260:	2c00      	cmp	r4, #0
 8002262:	d100      	bne.n	8002266 <__aeabi_dmul+0x19a>
 8002264:	e1ad      	b.n	80025c2 <__aeabi_dmul+0x4f6>
 8002266:	0020      	movs	r0, r4
 8002268:	f000 feec 	bl	8003044 <__clzsi2>
 800226c:	0002      	movs	r2, r0
 800226e:	0003      	movs	r3, r0
 8002270:	3a0b      	subs	r2, #11
 8002272:	201d      	movs	r0, #29
 8002274:	0019      	movs	r1, r3
 8002276:	1a82      	subs	r2, r0, r2
 8002278:	0030      	movs	r0, r6
 800227a:	3908      	subs	r1, #8
 800227c:	40d0      	lsrs	r0, r2
 800227e:	408c      	lsls	r4, r1
 8002280:	4304      	orrs	r4, r0
 8002282:	0030      	movs	r0, r6
 8002284:	4088      	lsls	r0, r1
 8002286:	4a5b      	ldr	r2, [pc, #364]	@ (80023f4 <__aeabi_dmul+0x328>)
 8002288:	1aeb      	subs	r3, r5, r3
 800228a:	4694      	mov	ip, r2
 800228c:	4463      	add	r3, ip
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	4642      	mov	r2, r8
 8002294:	2600      	movs	r6, #0
 8002296:	2a0a      	cmp	r2, #10
 8002298:	dc00      	bgt.n	800229c <__aeabi_dmul+0x1d0>
 800229a:	e75a      	b.n	8002152 <__aeabi_dmul+0x86>
 800229c:	e79c      	b.n	80021d8 <__aeabi_dmul+0x10c>
 800229e:	4653      	mov	r3, sl
 80022a0:	4303      	orrs	r3, r0
 80022a2:	4699      	mov	r9, r3
 80022a4:	d054      	beq.n	8002350 <__aeabi_dmul+0x284>
 80022a6:	4653      	mov	r3, sl
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d100      	bne.n	80022ae <__aeabi_dmul+0x1e2>
 80022ac:	e177      	b.n	800259e <__aeabi_dmul+0x4d2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fec8 	bl	8003044 <__clzsi2>
 80022b4:	230b      	movs	r3, #11
 80022b6:	425b      	negs	r3, r3
 80022b8:	469c      	mov	ip, r3
 80022ba:	0002      	movs	r2, r0
 80022bc:	4484      	add	ip, r0
 80022be:	0011      	movs	r1, r2
 80022c0:	4650      	mov	r0, sl
 80022c2:	3908      	subs	r1, #8
 80022c4:	4088      	lsls	r0, r1
 80022c6:	231d      	movs	r3, #29
 80022c8:	4680      	mov	r8, r0
 80022ca:	4660      	mov	r0, ip
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	0020      	movs	r0, r4
 80022d0:	40d8      	lsrs	r0, r3
 80022d2:	0003      	movs	r3, r0
 80022d4:	4640      	mov	r0, r8
 80022d6:	4303      	orrs	r3, r0
 80022d8:	469a      	mov	sl, r3
 80022da:	0023      	movs	r3, r4
 80022dc:	408b      	lsls	r3, r1
 80022de:	4699      	mov	r9, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	4d44      	ldr	r5, [pc, #272]	@ (80023f4 <__aeabi_dmul+0x328>)
 80022e4:	4698      	mov	r8, r3
 80022e6:	1aad      	subs	r5, r5, r2
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	e715      	b.n	8002118 <__aeabi_dmul+0x4c>
 80022ec:	4652      	mov	r2, sl
 80022ee:	4302      	orrs	r2, r0
 80022f0:	4691      	mov	r9, r2
 80022f2:	d126      	bne.n	8002342 <__aeabi_dmul+0x276>
 80022f4:	2200      	movs	r2, #0
 80022f6:	001d      	movs	r5, r3
 80022f8:	2302      	movs	r3, #2
 80022fa:	4692      	mov	sl, r2
 80022fc:	3208      	adds	r2, #8
 80022fe:	4690      	mov	r8, r2
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	e709      	b.n	8002118 <__aeabi_dmul+0x4c>
 8002304:	2400      	movs	r4, #0
 8002306:	2200      	movs	r2, #0
 8002308:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <__aeabi_dmul+0x314>)
 800230a:	e735      	b.n	8002178 <__aeabi_dmul+0xac>
 800230c:	2300      	movs	r3, #0
 800230e:	2480      	movs	r4, #128	@ 0x80
 8002310:	469b      	mov	fp, r3
 8002312:	0324      	lsls	r4, r4, #12
 8002314:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <__aeabi_dmul+0x314>)
 8002316:	e72f      	b.n	8002178 <__aeabi_dmul+0xac>
 8002318:	2202      	movs	r2, #2
 800231a:	4641      	mov	r1, r8
 800231c:	4311      	orrs	r1, r2
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	4694      	mov	ip, r2
 8002324:	002a      	movs	r2, r5
 8002326:	4462      	add	r2, ip
 8002328:	4688      	mov	r8, r1
 800232a:	9201      	str	r2, [sp, #4]
 800232c:	290a      	cmp	r1, #10
 800232e:	dd00      	ble.n	8002332 <__aeabi_dmul+0x266>
 8002330:	e752      	b.n	80021d8 <__aeabi_dmul+0x10c>
 8002332:	465a      	mov	r2, fp
 8002334:	2000      	movs	r0, #0
 8002336:	9900      	ldr	r1, [sp, #0]
 8002338:	0004      	movs	r4, r0
 800233a:	404a      	eors	r2, r1
 800233c:	4693      	mov	fp, r2
 800233e:	2602      	movs	r6, #2
 8002340:	e70b      	b.n	800215a <__aeabi_dmul+0x8e>
 8002342:	220c      	movs	r2, #12
 8002344:	001d      	movs	r5, r3
 8002346:	2303      	movs	r3, #3
 8002348:	4681      	mov	r9, r0
 800234a:	4690      	mov	r8, r2
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	e6e3      	b.n	8002118 <__aeabi_dmul+0x4c>
 8002350:	2300      	movs	r3, #0
 8002352:	469a      	mov	sl, r3
 8002354:	3304      	adds	r3, #4
 8002356:	4698      	mov	r8, r3
 8002358:	3b03      	subs	r3, #3
 800235a:	2500      	movs	r5, #0
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	e6db      	b.n	8002118 <__aeabi_dmul+0x4c>
 8002360:	4642      	mov	r2, r8
 8002362:	3301      	adds	r3, #1
 8002364:	431a      	orrs	r2, r3
 8002366:	002b      	movs	r3, r5
 8002368:	4690      	mov	r8, r2
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	4642      	mov	r2, r8
 8002370:	2400      	movs	r4, #0
 8002372:	2000      	movs	r0, #0
 8002374:	2601      	movs	r6, #1
 8002376:	2a0a      	cmp	r2, #10
 8002378:	dc00      	bgt.n	800237c <__aeabi_dmul+0x2b0>
 800237a:	e6ea      	b.n	8002152 <__aeabi_dmul+0x86>
 800237c:	e72c      	b.n	80021d8 <__aeabi_dmul+0x10c>
 800237e:	2201      	movs	r2, #1
 8002380:	1ad2      	subs	r2, r2, r3
 8002382:	2a38      	cmp	r2, #56	@ 0x38
 8002384:	dd00      	ble.n	8002388 <__aeabi_dmul+0x2bc>
 8002386:	e6f4      	b.n	8002172 <__aeabi_dmul+0xa6>
 8002388:	2a1f      	cmp	r2, #31
 800238a:	dc00      	bgt.n	800238e <__aeabi_dmul+0x2c2>
 800238c:	e12a      	b.n	80025e4 <__aeabi_dmul+0x518>
 800238e:	211f      	movs	r1, #31
 8002390:	4249      	negs	r1, r1
 8002392:	1acb      	subs	r3, r1, r3
 8002394:	0021      	movs	r1, r4
 8002396:	40d9      	lsrs	r1, r3
 8002398:	000b      	movs	r3, r1
 800239a:	2a20      	cmp	r2, #32
 800239c:	d005      	beq.n	80023aa <__aeabi_dmul+0x2de>
 800239e:	4a16      	ldr	r2, [pc, #88]	@ (80023f8 <__aeabi_dmul+0x32c>)
 80023a0:	9d01      	ldr	r5, [sp, #4]
 80023a2:	4694      	mov	ip, r2
 80023a4:	4465      	add	r5, ip
 80023a6:	40ac      	lsls	r4, r5
 80023a8:	4320      	orrs	r0, r4
 80023aa:	1e42      	subs	r2, r0, #1
 80023ac:	4190      	sbcs	r0, r2
 80023ae:	4318      	orrs	r0, r3
 80023b0:	2307      	movs	r3, #7
 80023b2:	0019      	movs	r1, r3
 80023b4:	2400      	movs	r4, #0
 80023b6:	4001      	ands	r1, r0
 80023b8:	4203      	tst	r3, r0
 80023ba:	d00c      	beq.n	80023d6 <__aeabi_dmul+0x30a>
 80023bc:	230f      	movs	r3, #15
 80023be:	4003      	ands	r3, r0
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dmul+0x2fa>
 80023c4:	e140      	b.n	8002648 <__aeabi_dmul+0x57c>
 80023c6:	1d03      	adds	r3, r0, #4
 80023c8:	4283      	cmp	r3, r0
 80023ca:	41a4      	sbcs	r4, r4
 80023cc:	0018      	movs	r0, r3
 80023ce:	4264      	negs	r4, r4
 80023d0:	0761      	lsls	r1, r4, #29
 80023d2:	0264      	lsls	r4, r4, #9
 80023d4:	0b24      	lsrs	r4, r4, #12
 80023d6:	08c2      	lsrs	r2, r0, #3
 80023d8:	2300      	movs	r3, #0
 80023da:	430a      	orrs	r2, r1
 80023dc:	e6cc      	b.n	8002178 <__aeabi_dmul+0xac>
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	000007ff 	.word	0x000007ff
 80023e4:	fffffc01 	.word	0xfffffc01
 80023e8:	000003ff 	.word	0x000003ff
 80023ec:	feffffff 	.word	0xfeffffff
 80023f0:	000007fe 	.word	0x000007fe
 80023f4:	fffffc0d 	.word	0xfffffc0d
 80023f8:	0000043e 	.word	0x0000043e
 80023fc:	4649      	mov	r1, r9
 80023fe:	464a      	mov	r2, r9
 8002400:	0409      	lsls	r1, r1, #16
 8002402:	0c09      	lsrs	r1, r1, #16
 8002404:	000d      	movs	r5, r1
 8002406:	0c16      	lsrs	r6, r2, #16
 8002408:	0c02      	lsrs	r2, r0, #16
 800240a:	0400      	lsls	r0, r0, #16
 800240c:	0c00      	lsrs	r0, r0, #16
 800240e:	4345      	muls	r5, r0
 8002410:	46ac      	mov	ip, r5
 8002412:	0005      	movs	r5, r0
 8002414:	4375      	muls	r5, r6
 8002416:	46a8      	mov	r8, r5
 8002418:	0015      	movs	r5, r2
 800241a:	000f      	movs	r7, r1
 800241c:	4375      	muls	r5, r6
 800241e:	9200      	str	r2, [sp, #0]
 8002420:	9502      	str	r5, [sp, #8]
 8002422:	002a      	movs	r2, r5
 8002424:	9d00      	ldr	r5, [sp, #0]
 8002426:	436f      	muls	r7, r5
 8002428:	4665      	mov	r5, ip
 800242a:	0c2d      	lsrs	r5, r5, #16
 800242c:	46a9      	mov	r9, r5
 800242e:	4447      	add	r7, r8
 8002430:	444f      	add	r7, r9
 8002432:	45b8      	cmp	r8, r7
 8002434:	d905      	bls.n	8002442 <__aeabi_dmul+0x376>
 8002436:	0015      	movs	r5, r2
 8002438:	2280      	movs	r2, #128	@ 0x80
 800243a:	0252      	lsls	r2, r2, #9
 800243c:	4690      	mov	r8, r2
 800243e:	4445      	add	r5, r8
 8002440:	9502      	str	r5, [sp, #8]
 8002442:	0c3d      	lsrs	r5, r7, #16
 8002444:	9503      	str	r5, [sp, #12]
 8002446:	4665      	mov	r5, ip
 8002448:	042d      	lsls	r5, r5, #16
 800244a:	043f      	lsls	r7, r7, #16
 800244c:	0c2d      	lsrs	r5, r5, #16
 800244e:	46ac      	mov	ip, r5
 8002450:	003d      	movs	r5, r7
 8002452:	4465      	add	r5, ip
 8002454:	9504      	str	r5, [sp, #16]
 8002456:	0c25      	lsrs	r5, r4, #16
 8002458:	0424      	lsls	r4, r4, #16
 800245a:	0c24      	lsrs	r4, r4, #16
 800245c:	46ac      	mov	ip, r5
 800245e:	0025      	movs	r5, r4
 8002460:	4375      	muls	r5, r6
 8002462:	46a8      	mov	r8, r5
 8002464:	4665      	mov	r5, ip
 8002466:	000f      	movs	r7, r1
 8002468:	4369      	muls	r1, r5
 800246a:	4441      	add	r1, r8
 800246c:	4689      	mov	r9, r1
 800246e:	4367      	muls	r7, r4
 8002470:	0c39      	lsrs	r1, r7, #16
 8002472:	4449      	add	r1, r9
 8002474:	436e      	muls	r6, r5
 8002476:	4588      	cmp	r8, r1
 8002478:	d903      	bls.n	8002482 <__aeabi_dmul+0x3b6>
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	0252      	lsls	r2, r2, #9
 800247e:	4690      	mov	r8, r2
 8002480:	4446      	add	r6, r8
 8002482:	0c0d      	lsrs	r5, r1, #16
 8002484:	46a8      	mov	r8, r5
 8002486:	0035      	movs	r5, r6
 8002488:	4445      	add	r5, r8
 800248a:	9505      	str	r5, [sp, #20]
 800248c:	9d03      	ldr	r5, [sp, #12]
 800248e:	043f      	lsls	r7, r7, #16
 8002490:	46a8      	mov	r8, r5
 8002492:	0c3f      	lsrs	r7, r7, #16
 8002494:	0409      	lsls	r1, r1, #16
 8002496:	19c9      	adds	r1, r1, r7
 8002498:	4488      	add	r8, r1
 800249a:	4645      	mov	r5, r8
 800249c:	9503      	str	r5, [sp, #12]
 800249e:	4655      	mov	r5, sl
 80024a0:	042e      	lsls	r6, r5, #16
 80024a2:	0c36      	lsrs	r6, r6, #16
 80024a4:	0c2f      	lsrs	r7, r5, #16
 80024a6:	0035      	movs	r5, r6
 80024a8:	4345      	muls	r5, r0
 80024aa:	4378      	muls	r0, r7
 80024ac:	4681      	mov	r9, r0
 80024ae:	0038      	movs	r0, r7
 80024b0:	46a8      	mov	r8, r5
 80024b2:	0c2d      	lsrs	r5, r5, #16
 80024b4:	46aa      	mov	sl, r5
 80024b6:	9a00      	ldr	r2, [sp, #0]
 80024b8:	4350      	muls	r0, r2
 80024ba:	4372      	muls	r2, r6
 80024bc:	444a      	add	r2, r9
 80024be:	4452      	add	r2, sl
 80024c0:	4591      	cmp	r9, r2
 80024c2:	d903      	bls.n	80024cc <__aeabi_dmul+0x400>
 80024c4:	2580      	movs	r5, #128	@ 0x80
 80024c6:	026d      	lsls	r5, r5, #9
 80024c8:	46a9      	mov	r9, r5
 80024ca:	4448      	add	r0, r9
 80024cc:	0c15      	lsrs	r5, r2, #16
 80024ce:	46a9      	mov	r9, r5
 80024d0:	4645      	mov	r5, r8
 80024d2:	042d      	lsls	r5, r5, #16
 80024d4:	0c2d      	lsrs	r5, r5, #16
 80024d6:	46a8      	mov	r8, r5
 80024d8:	4665      	mov	r5, ip
 80024da:	437d      	muls	r5, r7
 80024dc:	0412      	lsls	r2, r2, #16
 80024de:	4448      	add	r0, r9
 80024e0:	4490      	add	r8, r2
 80024e2:	46a9      	mov	r9, r5
 80024e4:	0032      	movs	r2, r6
 80024e6:	4665      	mov	r5, ip
 80024e8:	4362      	muls	r2, r4
 80024ea:	436e      	muls	r6, r5
 80024ec:	437c      	muls	r4, r7
 80024ee:	0c17      	lsrs	r7, r2, #16
 80024f0:	1936      	adds	r6, r6, r4
 80024f2:	19bf      	adds	r7, r7, r6
 80024f4:	42bc      	cmp	r4, r7
 80024f6:	d903      	bls.n	8002500 <__aeabi_dmul+0x434>
 80024f8:	2480      	movs	r4, #128	@ 0x80
 80024fa:	0264      	lsls	r4, r4, #9
 80024fc:	46a4      	mov	ip, r4
 80024fe:	44e1      	add	r9, ip
 8002500:	9c02      	ldr	r4, [sp, #8]
 8002502:	9e03      	ldr	r6, [sp, #12]
 8002504:	46a4      	mov	ip, r4
 8002506:	9d05      	ldr	r5, [sp, #20]
 8002508:	4466      	add	r6, ip
 800250a:	428e      	cmp	r6, r1
 800250c:	4189      	sbcs	r1, r1
 800250e:	46ac      	mov	ip, r5
 8002510:	0412      	lsls	r2, r2, #16
 8002512:	043c      	lsls	r4, r7, #16
 8002514:	0c12      	lsrs	r2, r2, #16
 8002516:	18a2      	adds	r2, r4, r2
 8002518:	4462      	add	r2, ip
 800251a:	4249      	negs	r1, r1
 800251c:	1854      	adds	r4, r2, r1
 800251e:	4446      	add	r6, r8
 8002520:	46a4      	mov	ip, r4
 8002522:	4546      	cmp	r6, r8
 8002524:	41a4      	sbcs	r4, r4
 8002526:	4682      	mov	sl, r0
 8002528:	4264      	negs	r4, r4
 800252a:	46a0      	mov	r8, r4
 800252c:	42aa      	cmp	r2, r5
 800252e:	4192      	sbcs	r2, r2
 8002530:	458c      	cmp	ip, r1
 8002532:	4189      	sbcs	r1, r1
 8002534:	44e2      	add	sl, ip
 8002536:	44d0      	add	r8, sl
 8002538:	4249      	negs	r1, r1
 800253a:	4252      	negs	r2, r2
 800253c:	430a      	orrs	r2, r1
 800253e:	45a0      	cmp	r8, r4
 8002540:	41a4      	sbcs	r4, r4
 8002542:	4582      	cmp	sl, r0
 8002544:	4189      	sbcs	r1, r1
 8002546:	4264      	negs	r4, r4
 8002548:	4249      	negs	r1, r1
 800254a:	430c      	orrs	r4, r1
 800254c:	4641      	mov	r1, r8
 800254e:	0c3f      	lsrs	r7, r7, #16
 8002550:	19d2      	adds	r2, r2, r7
 8002552:	1912      	adds	r2, r2, r4
 8002554:	0dcc      	lsrs	r4, r1, #23
 8002556:	9904      	ldr	r1, [sp, #16]
 8002558:	0270      	lsls	r0, r6, #9
 800255a:	4308      	orrs	r0, r1
 800255c:	1e41      	subs	r1, r0, #1
 800255e:	4188      	sbcs	r0, r1
 8002560:	4641      	mov	r1, r8
 8002562:	444a      	add	r2, r9
 8002564:	0df6      	lsrs	r6, r6, #23
 8002566:	0252      	lsls	r2, r2, #9
 8002568:	4330      	orrs	r0, r6
 800256a:	0249      	lsls	r1, r1, #9
 800256c:	4314      	orrs	r4, r2
 800256e:	4308      	orrs	r0, r1
 8002570:	01d2      	lsls	r2, r2, #7
 8002572:	d535      	bpl.n	80025e0 <__aeabi_dmul+0x514>
 8002574:	2201      	movs	r2, #1
 8002576:	0843      	lsrs	r3, r0, #1
 8002578:	4002      	ands	r2, r0
 800257a:	4313      	orrs	r3, r2
 800257c:	07e0      	lsls	r0, r4, #31
 800257e:	4318      	orrs	r0, r3
 8002580:	0864      	lsrs	r4, r4, #1
 8002582:	e634      	b.n	80021ee <__aeabi_dmul+0x122>
 8002584:	9b00      	ldr	r3, [sp, #0]
 8002586:	46a2      	mov	sl, r4
 8002588:	469b      	mov	fp, r3
 800258a:	4681      	mov	r9, r0
 800258c:	2480      	movs	r4, #128	@ 0x80
 800258e:	4653      	mov	r3, sl
 8002590:	0324      	lsls	r4, r4, #12
 8002592:	431c      	orrs	r4, r3
 8002594:	0324      	lsls	r4, r4, #12
 8002596:	464a      	mov	r2, r9
 8002598:	4b2e      	ldr	r3, [pc, #184]	@ (8002654 <__aeabi_dmul+0x588>)
 800259a:	0b24      	lsrs	r4, r4, #12
 800259c:	e5ec      	b.n	8002178 <__aeabi_dmul+0xac>
 800259e:	f000 fd51 	bl	8003044 <__clzsi2>
 80025a2:	2315      	movs	r3, #21
 80025a4:	469c      	mov	ip, r3
 80025a6:	4484      	add	ip, r0
 80025a8:	0002      	movs	r2, r0
 80025aa:	4663      	mov	r3, ip
 80025ac:	3220      	adds	r2, #32
 80025ae:	2b1c      	cmp	r3, #28
 80025b0:	dc00      	bgt.n	80025b4 <__aeabi_dmul+0x4e8>
 80025b2:	e684      	b.n	80022be <__aeabi_dmul+0x1f2>
 80025b4:	2300      	movs	r3, #0
 80025b6:	4699      	mov	r9, r3
 80025b8:	0023      	movs	r3, r4
 80025ba:	3808      	subs	r0, #8
 80025bc:	4083      	lsls	r3, r0
 80025be:	469a      	mov	sl, r3
 80025c0:	e68e      	b.n	80022e0 <__aeabi_dmul+0x214>
 80025c2:	f000 fd3f 	bl	8003044 <__clzsi2>
 80025c6:	0002      	movs	r2, r0
 80025c8:	0003      	movs	r3, r0
 80025ca:	3215      	adds	r2, #21
 80025cc:	3320      	adds	r3, #32
 80025ce:	2a1c      	cmp	r2, #28
 80025d0:	dc00      	bgt.n	80025d4 <__aeabi_dmul+0x508>
 80025d2:	e64e      	b.n	8002272 <__aeabi_dmul+0x1a6>
 80025d4:	0002      	movs	r2, r0
 80025d6:	0034      	movs	r4, r6
 80025d8:	3a08      	subs	r2, #8
 80025da:	2000      	movs	r0, #0
 80025dc:	4094      	lsls	r4, r2
 80025de:	e652      	b.n	8002286 <__aeabi_dmul+0x1ba>
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	e604      	b.n	80021ee <__aeabi_dmul+0x122>
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <__aeabi_dmul+0x58c>)
 80025e6:	0021      	movs	r1, r4
 80025e8:	469c      	mov	ip, r3
 80025ea:	0003      	movs	r3, r0
 80025ec:	9d01      	ldr	r5, [sp, #4]
 80025ee:	40d3      	lsrs	r3, r2
 80025f0:	4465      	add	r5, ip
 80025f2:	40a9      	lsls	r1, r5
 80025f4:	4319      	orrs	r1, r3
 80025f6:	0003      	movs	r3, r0
 80025f8:	40ab      	lsls	r3, r5
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	4183      	sbcs	r3, r0
 80025fe:	4319      	orrs	r1, r3
 8002600:	0008      	movs	r0, r1
 8002602:	40d4      	lsrs	r4, r2
 8002604:	074b      	lsls	r3, r1, #29
 8002606:	d009      	beq.n	800261c <__aeabi_dmul+0x550>
 8002608:	230f      	movs	r3, #15
 800260a:	400b      	ands	r3, r1
 800260c:	2b04      	cmp	r3, #4
 800260e:	d005      	beq.n	800261c <__aeabi_dmul+0x550>
 8002610:	1d0b      	adds	r3, r1, #4
 8002612:	428b      	cmp	r3, r1
 8002614:	4180      	sbcs	r0, r0
 8002616:	4240      	negs	r0, r0
 8002618:	1824      	adds	r4, r4, r0
 800261a:	0018      	movs	r0, r3
 800261c:	0223      	lsls	r3, r4, #8
 800261e:	d400      	bmi.n	8002622 <__aeabi_dmul+0x556>
 8002620:	e6d6      	b.n	80023d0 <__aeabi_dmul+0x304>
 8002622:	2301      	movs	r3, #1
 8002624:	2400      	movs	r4, #0
 8002626:	2200      	movs	r2, #0
 8002628:	e5a6      	b.n	8002178 <__aeabi_dmul+0xac>
 800262a:	290f      	cmp	r1, #15
 800262c:	d1aa      	bne.n	8002584 <__aeabi_dmul+0x4b8>
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	4652      	mov	r2, sl
 8002632:	031b      	lsls	r3, r3, #12
 8002634:	421a      	tst	r2, r3
 8002636:	d0a9      	beq.n	800258c <__aeabi_dmul+0x4c0>
 8002638:	421c      	tst	r4, r3
 800263a:	d1a7      	bne.n	800258c <__aeabi_dmul+0x4c0>
 800263c:	431c      	orrs	r4, r3
 800263e:	9b00      	ldr	r3, [sp, #0]
 8002640:	0002      	movs	r2, r0
 8002642:	469b      	mov	fp, r3
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <__aeabi_dmul+0x588>)
 8002646:	e597      	b.n	8002178 <__aeabi_dmul+0xac>
 8002648:	2400      	movs	r4, #0
 800264a:	e6c1      	b.n	80023d0 <__aeabi_dmul+0x304>
 800264c:	2400      	movs	r4, #0
 800264e:	4b01      	ldr	r3, [pc, #4]	@ (8002654 <__aeabi_dmul+0x588>)
 8002650:	0022      	movs	r2, r4
 8002652:	e591      	b.n	8002178 <__aeabi_dmul+0xac>
 8002654:	000007ff 	.word	0x000007ff
 8002658:	0000041e 	.word	0x0000041e

0800265c <__aeabi_dsub>:
 800265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265e:	464e      	mov	r6, r9
 8002660:	4645      	mov	r5, r8
 8002662:	46de      	mov	lr, fp
 8002664:	4657      	mov	r7, sl
 8002666:	b5e0      	push	{r5, r6, r7, lr}
 8002668:	b085      	sub	sp, #20
 800266a:	9000      	str	r0, [sp, #0]
 800266c:	9101      	str	r1, [sp, #4]
 800266e:	030c      	lsls	r4, r1, #12
 8002670:	004f      	lsls	r7, r1, #1
 8002672:	0fce      	lsrs	r6, r1, #31
 8002674:	0a61      	lsrs	r1, r4, #9
 8002676:	9c00      	ldr	r4, [sp, #0]
 8002678:	46b0      	mov	r8, r6
 800267a:	0f64      	lsrs	r4, r4, #29
 800267c:	430c      	orrs	r4, r1
 800267e:	9900      	ldr	r1, [sp, #0]
 8002680:	0d7f      	lsrs	r7, r7, #21
 8002682:	00c8      	lsls	r0, r1, #3
 8002684:	0011      	movs	r1, r2
 8002686:	001a      	movs	r2, r3
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	469c      	mov	ip, r3
 800268c:	9100      	str	r1, [sp, #0]
 800268e:	9201      	str	r2, [sp, #4]
 8002690:	0051      	lsls	r1, r2, #1
 8002692:	0d4b      	lsrs	r3, r1, #21
 8002694:	4699      	mov	r9, r3
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	9d00      	ldr	r5, [sp, #0]
 800269a:	0fd9      	lsrs	r1, r3, #31
 800269c:	4663      	mov	r3, ip
 800269e:	0f6a      	lsrs	r2, r5, #29
 80026a0:	0a5b      	lsrs	r3, r3, #9
 80026a2:	4313      	orrs	r3, r2
 80026a4:	00ea      	lsls	r2, r5, #3
 80026a6:	4694      	mov	ip, r2
 80026a8:	4693      	mov	fp, r2
 80026aa:	4ac1      	ldr	r2, [pc, #772]	@ (80029b0 <__aeabi_dsub+0x354>)
 80026ac:	9003      	str	r0, [sp, #12]
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	4591      	cmp	r9, r2
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x5a>
 80026b4:	e0cd      	b.n	8002852 <__aeabi_dsub+0x1f6>
 80026b6:	2501      	movs	r5, #1
 80026b8:	4069      	eors	r1, r5
 80026ba:	464d      	mov	r5, r9
 80026bc:	1b7d      	subs	r5, r7, r5
 80026be:	46aa      	mov	sl, r5
 80026c0:	428e      	cmp	r6, r1
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x6a>
 80026c4:	e080      	b.n	80027c8 <__aeabi_dsub+0x16c>
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	dc00      	bgt.n	80026cc <__aeabi_dsub+0x70>
 80026ca:	e335      	b.n	8002d38 <__aeabi_dsub+0x6dc>
 80026cc:	4649      	mov	r1, r9
 80026ce:	2900      	cmp	r1, #0
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dsub+0x78>
 80026d2:	e0df      	b.n	8002894 <__aeabi_dsub+0x238>
 80026d4:	4297      	cmp	r7, r2
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x7e>
 80026d8:	e194      	b.n	8002a04 <__aeabi_dsub+0x3a8>
 80026da:	4652      	mov	r2, sl
 80026dc:	2501      	movs	r5, #1
 80026de:	2a38      	cmp	r2, #56	@ 0x38
 80026e0:	dc19      	bgt.n	8002716 <__aeabi_dsub+0xba>
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	9b02      	ldr	r3, [sp, #8]
 80026e6:	0412      	lsls	r2, r2, #16
 80026e8:	4313      	orrs	r3, r2
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	4652      	mov	r2, sl
 80026ee:	2a1f      	cmp	r2, #31
 80026f0:	dd00      	ble.n	80026f4 <__aeabi_dsub+0x98>
 80026f2:	e1e3      	b.n	8002abc <__aeabi_dsub+0x460>
 80026f4:	4653      	mov	r3, sl
 80026f6:	2220      	movs	r2, #32
 80026f8:	4661      	mov	r1, ip
 80026fa:	9d02      	ldr	r5, [sp, #8]
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	4095      	lsls	r5, r2
 8002700:	40d9      	lsrs	r1, r3
 8002702:	430d      	orrs	r5, r1
 8002704:	4661      	mov	r1, ip
 8002706:	4091      	lsls	r1, r2
 8002708:	000a      	movs	r2, r1
 800270a:	1e51      	subs	r1, r2, #1
 800270c:	418a      	sbcs	r2, r1
 800270e:	4315      	orrs	r5, r2
 8002710:	9a02      	ldr	r2, [sp, #8]
 8002712:	40da      	lsrs	r2, r3
 8002714:	1aa4      	subs	r4, r4, r2
 8002716:	1b45      	subs	r5, r0, r5
 8002718:	42a8      	cmp	r0, r5
 800271a:	4180      	sbcs	r0, r0
 800271c:	4240      	negs	r0, r0
 800271e:	1a24      	subs	r4, r4, r0
 8002720:	0223      	lsls	r3, r4, #8
 8002722:	d400      	bmi.n	8002726 <__aeabi_dsub+0xca>
 8002724:	e13d      	b.n	80029a2 <__aeabi_dsub+0x346>
 8002726:	0264      	lsls	r4, r4, #9
 8002728:	0a64      	lsrs	r4, r4, #9
 800272a:	2c00      	cmp	r4, #0
 800272c:	d100      	bne.n	8002730 <__aeabi_dsub+0xd4>
 800272e:	e147      	b.n	80029c0 <__aeabi_dsub+0x364>
 8002730:	0020      	movs	r0, r4
 8002732:	f000 fc87 	bl	8003044 <__clzsi2>
 8002736:	0003      	movs	r3, r0
 8002738:	3b08      	subs	r3, #8
 800273a:	2120      	movs	r1, #32
 800273c:	0028      	movs	r0, r5
 800273e:	1aca      	subs	r2, r1, r3
 8002740:	40d0      	lsrs	r0, r2
 8002742:	409c      	lsls	r4, r3
 8002744:	0002      	movs	r2, r0
 8002746:	409d      	lsls	r5, r3
 8002748:	4322      	orrs	r2, r4
 800274a:	429f      	cmp	r7, r3
 800274c:	dd00      	ble.n	8002750 <__aeabi_dsub+0xf4>
 800274e:	e177      	b.n	8002a40 <__aeabi_dsub+0x3e4>
 8002750:	1bd8      	subs	r0, r3, r7
 8002752:	3001      	adds	r0, #1
 8002754:	1a09      	subs	r1, r1, r0
 8002756:	002c      	movs	r4, r5
 8002758:	408d      	lsls	r5, r1
 800275a:	40c4      	lsrs	r4, r0
 800275c:	1e6b      	subs	r3, r5, #1
 800275e:	419d      	sbcs	r5, r3
 8002760:	0013      	movs	r3, r2
 8002762:	40c2      	lsrs	r2, r0
 8002764:	408b      	lsls	r3, r1
 8002766:	4325      	orrs	r5, r4
 8002768:	2700      	movs	r7, #0
 800276a:	0014      	movs	r4, r2
 800276c:	431d      	orrs	r5, r3
 800276e:	076b      	lsls	r3, r5, #29
 8002770:	d009      	beq.n	8002786 <__aeabi_dsub+0x12a>
 8002772:	230f      	movs	r3, #15
 8002774:	402b      	ands	r3, r5
 8002776:	2b04      	cmp	r3, #4
 8002778:	d005      	beq.n	8002786 <__aeabi_dsub+0x12a>
 800277a:	1d2b      	adds	r3, r5, #4
 800277c:	42ab      	cmp	r3, r5
 800277e:	41ad      	sbcs	r5, r5
 8002780:	426d      	negs	r5, r5
 8002782:	1964      	adds	r4, r4, r5
 8002784:	001d      	movs	r5, r3
 8002786:	0223      	lsls	r3, r4, #8
 8002788:	d400      	bmi.n	800278c <__aeabi_dsub+0x130>
 800278a:	e140      	b.n	8002a0e <__aeabi_dsub+0x3b2>
 800278c:	4a88      	ldr	r2, [pc, #544]	@ (80029b0 <__aeabi_dsub+0x354>)
 800278e:	3701      	adds	r7, #1
 8002790:	4297      	cmp	r7, r2
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x13a>
 8002794:	e101      	b.n	800299a <__aeabi_dsub+0x33e>
 8002796:	2601      	movs	r6, #1
 8002798:	4643      	mov	r3, r8
 800279a:	4986      	ldr	r1, [pc, #536]	@ (80029b4 <__aeabi_dsub+0x358>)
 800279c:	08ed      	lsrs	r5, r5, #3
 800279e:	4021      	ands	r1, r4
 80027a0:	074a      	lsls	r2, r1, #29
 80027a2:	432a      	orrs	r2, r5
 80027a4:	057c      	lsls	r4, r7, #21
 80027a6:	024d      	lsls	r5, r1, #9
 80027a8:	0b2d      	lsrs	r5, r5, #12
 80027aa:	0d64      	lsrs	r4, r4, #21
 80027ac:	401e      	ands	r6, r3
 80027ae:	0524      	lsls	r4, r4, #20
 80027b0:	432c      	orrs	r4, r5
 80027b2:	07f6      	lsls	r6, r6, #31
 80027b4:	4334      	orrs	r4, r6
 80027b6:	0010      	movs	r0, r2
 80027b8:	0021      	movs	r1, r4
 80027ba:	b005      	add	sp, #20
 80027bc:	bcf0      	pop	{r4, r5, r6, r7}
 80027be:	46bb      	mov	fp, r7
 80027c0:	46b2      	mov	sl, r6
 80027c2:	46a9      	mov	r9, r5
 80027c4:	46a0      	mov	r8, r4
 80027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	dc00      	bgt.n	80027ce <__aeabi_dsub+0x172>
 80027cc:	e2d0      	b.n	8002d70 <__aeabi_dsub+0x714>
 80027ce:	4649      	mov	r1, r9
 80027d0:	2900      	cmp	r1, #0
 80027d2:	d000      	beq.n	80027d6 <__aeabi_dsub+0x17a>
 80027d4:	e0d4      	b.n	8002980 <__aeabi_dsub+0x324>
 80027d6:	4661      	mov	r1, ip
 80027d8:	9b02      	ldr	r3, [sp, #8]
 80027da:	4319      	orrs	r1, r3
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x184>
 80027de:	e12b      	b.n	8002a38 <__aeabi_dsub+0x3dc>
 80027e0:	1e69      	subs	r1, r5, #1
 80027e2:	2d01      	cmp	r5, #1
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x18c>
 80027e6:	e1d9      	b.n	8002b9c <__aeabi_dsub+0x540>
 80027e8:	4295      	cmp	r5, r2
 80027ea:	d100      	bne.n	80027ee <__aeabi_dsub+0x192>
 80027ec:	e10a      	b.n	8002a04 <__aeabi_dsub+0x3a8>
 80027ee:	2501      	movs	r5, #1
 80027f0:	2938      	cmp	r1, #56	@ 0x38
 80027f2:	dc17      	bgt.n	8002824 <__aeabi_dsub+0x1c8>
 80027f4:	468a      	mov	sl, r1
 80027f6:	4653      	mov	r3, sl
 80027f8:	2b1f      	cmp	r3, #31
 80027fa:	dd00      	ble.n	80027fe <__aeabi_dsub+0x1a2>
 80027fc:	e1e7      	b.n	8002bce <__aeabi_dsub+0x572>
 80027fe:	2220      	movs	r2, #32
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	9b02      	ldr	r3, [sp, #8]
 8002804:	4661      	mov	r1, ip
 8002806:	4093      	lsls	r3, r2
 8002808:	001d      	movs	r5, r3
 800280a:	4653      	mov	r3, sl
 800280c:	40d9      	lsrs	r1, r3
 800280e:	4663      	mov	r3, ip
 8002810:	4093      	lsls	r3, r2
 8002812:	001a      	movs	r2, r3
 8002814:	430d      	orrs	r5, r1
 8002816:	1e51      	subs	r1, r2, #1
 8002818:	418a      	sbcs	r2, r1
 800281a:	4653      	mov	r3, sl
 800281c:	4315      	orrs	r5, r2
 800281e:	9a02      	ldr	r2, [sp, #8]
 8002820:	40da      	lsrs	r2, r3
 8002822:	18a4      	adds	r4, r4, r2
 8002824:	182d      	adds	r5, r5, r0
 8002826:	4285      	cmp	r5, r0
 8002828:	4180      	sbcs	r0, r0
 800282a:	4240      	negs	r0, r0
 800282c:	1824      	adds	r4, r4, r0
 800282e:	0223      	lsls	r3, r4, #8
 8002830:	d400      	bmi.n	8002834 <__aeabi_dsub+0x1d8>
 8002832:	e0b6      	b.n	80029a2 <__aeabi_dsub+0x346>
 8002834:	4b5e      	ldr	r3, [pc, #376]	@ (80029b0 <__aeabi_dsub+0x354>)
 8002836:	3701      	adds	r7, #1
 8002838:	429f      	cmp	r7, r3
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x1e2>
 800283c:	e0ad      	b.n	800299a <__aeabi_dsub+0x33e>
 800283e:	2101      	movs	r1, #1
 8002840:	4b5c      	ldr	r3, [pc, #368]	@ (80029b4 <__aeabi_dsub+0x358>)
 8002842:	086a      	lsrs	r2, r5, #1
 8002844:	401c      	ands	r4, r3
 8002846:	4029      	ands	r1, r5
 8002848:	430a      	orrs	r2, r1
 800284a:	07e5      	lsls	r5, r4, #31
 800284c:	4315      	orrs	r5, r2
 800284e:	0864      	lsrs	r4, r4, #1
 8002850:	e78d      	b.n	800276e <__aeabi_dsub+0x112>
 8002852:	4a59      	ldr	r2, [pc, #356]	@ (80029b8 <__aeabi_dsub+0x35c>)
 8002854:	9b02      	ldr	r3, [sp, #8]
 8002856:	4692      	mov	sl, r2
 8002858:	4662      	mov	r2, ip
 800285a:	44ba      	add	sl, r7
 800285c:	431a      	orrs	r2, r3
 800285e:	d02c      	beq.n	80028ba <__aeabi_dsub+0x25e>
 8002860:	428e      	cmp	r6, r1
 8002862:	d02e      	beq.n	80028c2 <__aeabi_dsub+0x266>
 8002864:	4652      	mov	r2, sl
 8002866:	2a00      	cmp	r2, #0
 8002868:	d060      	beq.n	800292c <__aeabi_dsub+0x2d0>
 800286a:	2f00      	cmp	r7, #0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x214>
 800286e:	e0db      	b.n	8002a28 <__aeabi_dsub+0x3cc>
 8002870:	4663      	mov	r3, ip
 8002872:	000e      	movs	r6, r1
 8002874:	9c02      	ldr	r4, [sp, #8]
 8002876:	08d8      	lsrs	r0, r3, #3
 8002878:	0762      	lsls	r2, r4, #29
 800287a:	4302      	orrs	r2, r0
 800287c:	08e4      	lsrs	r4, r4, #3
 800287e:	0013      	movs	r3, r2
 8002880:	4323      	orrs	r3, r4
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0x22a>
 8002884:	e254      	b.n	8002d30 <__aeabi_dsub+0x6d4>
 8002886:	2580      	movs	r5, #128	@ 0x80
 8002888:	032d      	lsls	r5, r5, #12
 800288a:	4325      	orrs	r5, r4
 800288c:	032d      	lsls	r5, r5, #12
 800288e:	4c48      	ldr	r4, [pc, #288]	@ (80029b0 <__aeabi_dsub+0x354>)
 8002890:	0b2d      	lsrs	r5, r5, #12
 8002892:	e78c      	b.n	80027ae <__aeabi_dsub+0x152>
 8002894:	4661      	mov	r1, ip
 8002896:	9b02      	ldr	r3, [sp, #8]
 8002898:	4319      	orrs	r1, r3
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x242>
 800289c:	e0cc      	b.n	8002a38 <__aeabi_dsub+0x3dc>
 800289e:	0029      	movs	r1, r5
 80028a0:	3901      	subs	r1, #1
 80028a2:	2d01      	cmp	r5, #1
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x24c>
 80028a6:	e188      	b.n	8002bba <__aeabi_dsub+0x55e>
 80028a8:	4295      	cmp	r5, r2
 80028aa:	d100      	bne.n	80028ae <__aeabi_dsub+0x252>
 80028ac:	e0aa      	b.n	8002a04 <__aeabi_dsub+0x3a8>
 80028ae:	2501      	movs	r5, #1
 80028b0:	2938      	cmp	r1, #56	@ 0x38
 80028b2:	dd00      	ble.n	80028b6 <__aeabi_dsub+0x25a>
 80028b4:	e72f      	b.n	8002716 <__aeabi_dsub+0xba>
 80028b6:	468a      	mov	sl, r1
 80028b8:	e718      	b.n	80026ec <__aeabi_dsub+0x90>
 80028ba:	2201      	movs	r2, #1
 80028bc:	4051      	eors	r1, r2
 80028be:	428e      	cmp	r6, r1
 80028c0:	d1d0      	bne.n	8002864 <__aeabi_dsub+0x208>
 80028c2:	4653      	mov	r3, sl
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x26e>
 80028c8:	e0be      	b.n	8002a48 <__aeabi_dsub+0x3ec>
 80028ca:	2f00      	cmp	r7, #0
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x274>
 80028ce:	e138      	b.n	8002b42 <__aeabi_dsub+0x4e6>
 80028d0:	46ca      	mov	sl, r9
 80028d2:	0022      	movs	r2, r4
 80028d4:	4302      	orrs	r2, r0
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x27e>
 80028d8:	e1e2      	b.n	8002ca0 <__aeabi_dsub+0x644>
 80028da:	4653      	mov	r3, sl
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x288>
 80028e2:	e20d      	b.n	8002d00 <__aeabi_dsub+0x6a4>
 80028e4:	4a32      	ldr	r2, [pc, #200]	@ (80029b0 <__aeabi_dsub+0x354>)
 80028e6:	4592      	cmp	sl, r2
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x290>
 80028ea:	e1d2      	b.n	8002c92 <__aeabi_dsub+0x636>
 80028ec:	2701      	movs	r7, #1
 80028ee:	2938      	cmp	r1, #56	@ 0x38
 80028f0:	dc13      	bgt.n	800291a <__aeabi_dsub+0x2be>
 80028f2:	291f      	cmp	r1, #31
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dsub+0x29c>
 80028f6:	e1ee      	b.n	8002cd6 <__aeabi_dsub+0x67a>
 80028f8:	2220      	movs	r2, #32
 80028fa:	9b02      	ldr	r3, [sp, #8]
 80028fc:	1a52      	subs	r2, r2, r1
 80028fe:	0025      	movs	r5, r4
 8002900:	0007      	movs	r7, r0
 8002902:	469a      	mov	sl, r3
 8002904:	40cc      	lsrs	r4, r1
 8002906:	4090      	lsls	r0, r2
 8002908:	4095      	lsls	r5, r2
 800290a:	40cf      	lsrs	r7, r1
 800290c:	44a2      	add	sl, r4
 800290e:	1e42      	subs	r2, r0, #1
 8002910:	4190      	sbcs	r0, r2
 8002912:	4653      	mov	r3, sl
 8002914:	432f      	orrs	r7, r5
 8002916:	4307      	orrs	r7, r0
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	003d      	movs	r5, r7
 800291c:	4465      	add	r5, ip
 800291e:	4565      	cmp	r5, ip
 8002920:	4192      	sbcs	r2, r2
 8002922:	9b02      	ldr	r3, [sp, #8]
 8002924:	4252      	negs	r2, r2
 8002926:	464f      	mov	r7, r9
 8002928:	18d4      	adds	r4, r2, r3
 800292a:	e780      	b.n	800282e <__aeabi_dsub+0x1d2>
 800292c:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <__aeabi_dsub+0x360>)
 800292e:	1c7d      	adds	r5, r7, #1
 8002930:	4215      	tst	r5, r2
 8002932:	d000      	beq.n	8002936 <__aeabi_dsub+0x2da>
 8002934:	e0aa      	b.n	8002a8c <__aeabi_dsub+0x430>
 8002936:	4662      	mov	r2, ip
 8002938:	0025      	movs	r5, r4
 800293a:	9b02      	ldr	r3, [sp, #8]
 800293c:	4305      	orrs	r5, r0
 800293e:	431a      	orrs	r2, r3
 8002940:	2f00      	cmp	r7, #0
 8002942:	d000      	beq.n	8002946 <__aeabi_dsub+0x2ea>
 8002944:	e0f5      	b.n	8002b32 <__aeabi_dsub+0x4d6>
 8002946:	2d00      	cmp	r5, #0
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x2f0>
 800294a:	e16b      	b.n	8002c24 <__aeabi_dsub+0x5c8>
 800294c:	2a00      	cmp	r2, #0
 800294e:	d100      	bne.n	8002952 <__aeabi_dsub+0x2f6>
 8002950:	e152      	b.n	8002bf8 <__aeabi_dsub+0x59c>
 8002952:	4663      	mov	r3, ip
 8002954:	1ac5      	subs	r5, r0, r3
 8002956:	9b02      	ldr	r3, [sp, #8]
 8002958:	1ae2      	subs	r2, r4, r3
 800295a:	42a8      	cmp	r0, r5
 800295c:	419b      	sbcs	r3, r3
 800295e:	425b      	negs	r3, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	d400      	bmi.n	8002968 <__aeabi_dsub+0x30c>
 8002966:	e1d5      	b.n	8002d14 <__aeabi_dsub+0x6b8>
 8002968:	4663      	mov	r3, ip
 800296a:	1a1d      	subs	r5, r3, r0
 800296c:	45ac      	cmp	ip, r5
 800296e:	4192      	sbcs	r2, r2
 8002970:	2601      	movs	r6, #1
 8002972:	9b02      	ldr	r3, [sp, #8]
 8002974:	4252      	negs	r2, r2
 8002976:	1b1c      	subs	r4, r3, r4
 8002978:	4688      	mov	r8, r1
 800297a:	1aa4      	subs	r4, r4, r2
 800297c:	400e      	ands	r6, r1
 800297e:	e6f6      	b.n	800276e <__aeabi_dsub+0x112>
 8002980:	4297      	cmp	r7, r2
 8002982:	d03f      	beq.n	8002a04 <__aeabi_dsub+0x3a8>
 8002984:	4652      	mov	r2, sl
 8002986:	2501      	movs	r5, #1
 8002988:	2a38      	cmp	r2, #56	@ 0x38
 800298a:	dd00      	ble.n	800298e <__aeabi_dsub+0x332>
 800298c:	e74a      	b.n	8002824 <__aeabi_dsub+0x1c8>
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	9b02      	ldr	r3, [sp, #8]
 8002992:	0412      	lsls	r2, r2, #16
 8002994:	4313      	orrs	r3, r2
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	e72d      	b.n	80027f6 <__aeabi_dsub+0x19a>
 800299a:	003c      	movs	r4, r7
 800299c:	2500      	movs	r5, #0
 800299e:	2200      	movs	r2, #0
 80029a0:	e705      	b.n	80027ae <__aeabi_dsub+0x152>
 80029a2:	2307      	movs	r3, #7
 80029a4:	402b      	ands	r3, r5
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d000      	beq.n	80029ac <__aeabi_dsub+0x350>
 80029aa:	e6e2      	b.n	8002772 <__aeabi_dsub+0x116>
 80029ac:	e06b      	b.n	8002a86 <__aeabi_dsub+0x42a>
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	000007ff 	.word	0x000007ff
 80029b4:	ff7fffff 	.word	0xff7fffff
 80029b8:	fffff801 	.word	0xfffff801
 80029bc:	000007fe 	.word	0x000007fe
 80029c0:	0028      	movs	r0, r5
 80029c2:	f000 fb3f 	bl	8003044 <__clzsi2>
 80029c6:	0003      	movs	r3, r0
 80029c8:	3318      	adds	r3, #24
 80029ca:	2b1f      	cmp	r3, #31
 80029cc:	dc00      	bgt.n	80029d0 <__aeabi_dsub+0x374>
 80029ce:	e6b4      	b.n	800273a <__aeabi_dsub+0xde>
 80029d0:	002a      	movs	r2, r5
 80029d2:	3808      	subs	r0, #8
 80029d4:	4082      	lsls	r2, r0
 80029d6:	429f      	cmp	r7, r3
 80029d8:	dd00      	ble.n	80029dc <__aeabi_dsub+0x380>
 80029da:	e0b9      	b.n	8002b50 <__aeabi_dsub+0x4f4>
 80029dc:	1bdb      	subs	r3, r3, r7
 80029de:	1c58      	adds	r0, r3, #1
 80029e0:	281f      	cmp	r0, #31
 80029e2:	dc00      	bgt.n	80029e6 <__aeabi_dsub+0x38a>
 80029e4:	e1a0      	b.n	8002d28 <__aeabi_dsub+0x6cc>
 80029e6:	0015      	movs	r5, r2
 80029e8:	3b1f      	subs	r3, #31
 80029ea:	40dd      	lsrs	r5, r3
 80029ec:	2820      	cmp	r0, #32
 80029ee:	d005      	beq.n	80029fc <__aeabi_dsub+0x3a0>
 80029f0:	2340      	movs	r3, #64	@ 0x40
 80029f2:	1a1b      	subs	r3, r3, r0
 80029f4:	409a      	lsls	r2, r3
 80029f6:	1e53      	subs	r3, r2, #1
 80029f8:	419a      	sbcs	r2, r3
 80029fa:	4315      	orrs	r5, r2
 80029fc:	2307      	movs	r3, #7
 80029fe:	2700      	movs	r7, #0
 8002a00:	402b      	ands	r3, r5
 8002a02:	e7d0      	b.n	80029a6 <__aeabi_dsub+0x34a>
 8002a04:	08c0      	lsrs	r0, r0, #3
 8002a06:	0762      	lsls	r2, r4, #29
 8002a08:	4302      	orrs	r2, r0
 8002a0a:	08e4      	lsrs	r4, r4, #3
 8002a0c:	e737      	b.n	800287e <__aeabi_dsub+0x222>
 8002a0e:	08ea      	lsrs	r2, r5, #3
 8002a10:	0763      	lsls	r3, r4, #29
 8002a12:	431a      	orrs	r2, r3
 8002a14:	4bd3      	ldr	r3, [pc, #844]	@ (8002d64 <__aeabi_dsub+0x708>)
 8002a16:	08e4      	lsrs	r4, r4, #3
 8002a18:	429f      	cmp	r7, r3
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x3c2>
 8002a1c:	e72f      	b.n	800287e <__aeabi_dsub+0x222>
 8002a1e:	0324      	lsls	r4, r4, #12
 8002a20:	0b25      	lsrs	r5, r4, #12
 8002a22:	057c      	lsls	r4, r7, #21
 8002a24:	0d64      	lsrs	r4, r4, #21
 8002a26:	e6c2      	b.n	80027ae <__aeabi_dsub+0x152>
 8002a28:	46ca      	mov	sl, r9
 8002a2a:	0022      	movs	r2, r4
 8002a2c:	4302      	orrs	r2, r0
 8002a2e:	d158      	bne.n	8002ae2 <__aeabi_dsub+0x486>
 8002a30:	4663      	mov	r3, ip
 8002a32:	000e      	movs	r6, r1
 8002a34:	9c02      	ldr	r4, [sp, #8]
 8002a36:	9303      	str	r3, [sp, #12]
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	4657      	mov	r7, sl
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	e7e7      	b.n	8002a10 <__aeabi_dsub+0x3b4>
 8002a40:	4cc9      	ldr	r4, [pc, #804]	@ (8002d68 <__aeabi_dsub+0x70c>)
 8002a42:	1aff      	subs	r7, r7, r3
 8002a44:	4014      	ands	r4, r2
 8002a46:	e692      	b.n	800276e <__aeabi_dsub+0x112>
 8002a48:	4dc8      	ldr	r5, [pc, #800]	@ (8002d6c <__aeabi_dsub+0x710>)
 8002a4a:	1c7a      	adds	r2, r7, #1
 8002a4c:	422a      	tst	r2, r5
 8002a4e:	d000      	beq.n	8002a52 <__aeabi_dsub+0x3f6>
 8002a50:	e084      	b.n	8002b5c <__aeabi_dsub+0x500>
 8002a52:	0022      	movs	r2, r4
 8002a54:	4302      	orrs	r2, r0
 8002a56:	2f00      	cmp	r7, #0
 8002a58:	d000      	beq.n	8002a5c <__aeabi_dsub+0x400>
 8002a5a:	e0ef      	b.n	8002c3c <__aeabi_dsub+0x5e0>
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d100      	bne.n	8002a62 <__aeabi_dsub+0x406>
 8002a60:	e0e5      	b.n	8002c2e <__aeabi_dsub+0x5d2>
 8002a62:	4662      	mov	r2, ip
 8002a64:	9902      	ldr	r1, [sp, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x410>
 8002a6a:	e0c5      	b.n	8002bf8 <__aeabi_dsub+0x59c>
 8002a6c:	4663      	mov	r3, ip
 8002a6e:	18c5      	adds	r5, r0, r3
 8002a70:	468c      	mov	ip, r1
 8002a72:	4285      	cmp	r5, r0
 8002a74:	4180      	sbcs	r0, r0
 8002a76:	4464      	add	r4, ip
 8002a78:	4240      	negs	r0, r0
 8002a7a:	1824      	adds	r4, r4, r0
 8002a7c:	0223      	lsls	r3, r4, #8
 8002a7e:	d502      	bpl.n	8002a86 <__aeabi_dsub+0x42a>
 8002a80:	4bb9      	ldr	r3, [pc, #740]	@ (8002d68 <__aeabi_dsub+0x70c>)
 8002a82:	3701      	adds	r7, #1
 8002a84:	401c      	ands	r4, r3
 8002a86:	46ba      	mov	sl, r7
 8002a88:	9503      	str	r5, [sp, #12]
 8002a8a:	e7d5      	b.n	8002a38 <__aeabi_dsub+0x3dc>
 8002a8c:	4662      	mov	r2, ip
 8002a8e:	1a85      	subs	r5, r0, r2
 8002a90:	42a8      	cmp	r0, r5
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4252      	negs	r2, r2
 8002a96:	4691      	mov	r9, r2
 8002a98:	9b02      	ldr	r3, [sp, #8]
 8002a9a:	1ae3      	subs	r3, r4, r3
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	4691      	mov	r9, r2
 8002aa6:	021a      	lsls	r2, r3, #8
 8002aa8:	d46c      	bmi.n	8002b84 <__aeabi_dsub+0x528>
 8002aaa:	464a      	mov	r2, r9
 8002aac:	464c      	mov	r4, r9
 8002aae:	432a      	orrs	r2, r5
 8002ab0:	d000      	beq.n	8002ab4 <__aeabi_dsub+0x458>
 8002ab2:	e63a      	b.n	800272a <__aeabi_dsub+0xce>
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	2400      	movs	r4, #0
 8002ab8:	2500      	movs	r5, #0
 8002aba:	e678      	b.n	80027ae <__aeabi_dsub+0x152>
 8002abc:	9902      	ldr	r1, [sp, #8]
 8002abe:	4653      	mov	r3, sl
 8002ac0:	000d      	movs	r5, r1
 8002ac2:	3a20      	subs	r2, #32
 8002ac4:	40d5      	lsrs	r5, r2
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d006      	beq.n	8002ad8 <__aeabi_dsub+0x47c>
 8002aca:	2240      	movs	r2, #64	@ 0x40
 8002acc:	1ad2      	subs	r2, r2, r3
 8002ace:	000b      	movs	r3, r1
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	4662      	mov	r2, ip
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	4693      	mov	fp, r2
 8002ad8:	465b      	mov	r3, fp
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	4193      	sbcs	r3, r2
 8002ade:	431d      	orrs	r5, r3
 8002ae0:	e619      	b.n	8002716 <__aeabi_dsub+0xba>
 8002ae2:	4653      	mov	r3, sl
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d100      	bne.n	8002aec <__aeabi_dsub+0x490>
 8002aea:	e0c6      	b.n	8002c7a <__aeabi_dsub+0x61e>
 8002aec:	4e9d      	ldr	r6, [pc, #628]	@ (8002d64 <__aeabi_dsub+0x708>)
 8002aee:	45b2      	cmp	sl, r6
 8002af0:	d100      	bne.n	8002af4 <__aeabi_dsub+0x498>
 8002af2:	e6bd      	b.n	8002870 <__aeabi_dsub+0x214>
 8002af4:	4688      	mov	r8, r1
 8002af6:	000e      	movs	r6, r1
 8002af8:	2501      	movs	r5, #1
 8002afa:	2a38      	cmp	r2, #56	@ 0x38
 8002afc:	dc10      	bgt.n	8002b20 <__aeabi_dsub+0x4c4>
 8002afe:	2a1f      	cmp	r2, #31
 8002b00:	dc7f      	bgt.n	8002c02 <__aeabi_dsub+0x5a6>
 8002b02:	2120      	movs	r1, #32
 8002b04:	0025      	movs	r5, r4
 8002b06:	1a89      	subs	r1, r1, r2
 8002b08:	0007      	movs	r7, r0
 8002b0a:	4088      	lsls	r0, r1
 8002b0c:	408d      	lsls	r5, r1
 8002b0e:	40d7      	lsrs	r7, r2
 8002b10:	40d4      	lsrs	r4, r2
 8002b12:	1e41      	subs	r1, r0, #1
 8002b14:	4188      	sbcs	r0, r1
 8002b16:	9b02      	ldr	r3, [sp, #8]
 8002b18:	433d      	orrs	r5, r7
 8002b1a:	1b1b      	subs	r3, r3, r4
 8002b1c:	4305      	orrs	r5, r0
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	4662      	mov	r2, ip
 8002b22:	1b55      	subs	r5, r2, r5
 8002b24:	45ac      	cmp	ip, r5
 8002b26:	4192      	sbcs	r2, r2
 8002b28:	9b02      	ldr	r3, [sp, #8]
 8002b2a:	4252      	negs	r2, r2
 8002b2c:	464f      	mov	r7, r9
 8002b2e:	1a9c      	subs	r4, r3, r2
 8002b30:	e5f6      	b.n	8002720 <__aeabi_dsub+0xc4>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	d000      	beq.n	8002b38 <__aeabi_dsub+0x4dc>
 8002b36:	e0b7      	b.n	8002ca8 <__aeabi_dsub+0x64c>
 8002b38:	2a00      	cmp	r2, #0
 8002b3a:	d100      	bne.n	8002b3e <__aeabi_dsub+0x4e2>
 8002b3c:	e0f0      	b.n	8002d20 <__aeabi_dsub+0x6c4>
 8002b3e:	2601      	movs	r6, #1
 8002b40:	400e      	ands	r6, r1
 8002b42:	4663      	mov	r3, ip
 8002b44:	9802      	ldr	r0, [sp, #8]
 8002b46:	08d9      	lsrs	r1, r3, #3
 8002b48:	0742      	lsls	r2, r0, #29
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	08c4      	lsrs	r4, r0, #3
 8002b4e:	e696      	b.n	800287e <__aeabi_dsub+0x222>
 8002b50:	4c85      	ldr	r4, [pc, #532]	@ (8002d68 <__aeabi_dsub+0x70c>)
 8002b52:	1aff      	subs	r7, r7, r3
 8002b54:	4014      	ands	r4, r2
 8002b56:	0762      	lsls	r2, r4, #29
 8002b58:	08e4      	lsrs	r4, r4, #3
 8002b5a:	e760      	b.n	8002a1e <__aeabi_dsub+0x3c2>
 8002b5c:	4981      	ldr	r1, [pc, #516]	@ (8002d64 <__aeabi_dsub+0x708>)
 8002b5e:	428a      	cmp	r2, r1
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x508>
 8002b62:	e0c9      	b.n	8002cf8 <__aeabi_dsub+0x69c>
 8002b64:	4663      	mov	r3, ip
 8002b66:	18c1      	adds	r1, r0, r3
 8002b68:	4281      	cmp	r1, r0
 8002b6a:	4180      	sbcs	r0, r0
 8002b6c:	9b02      	ldr	r3, [sp, #8]
 8002b6e:	4240      	negs	r0, r0
 8002b70:	18e3      	adds	r3, r4, r3
 8002b72:	181b      	adds	r3, r3, r0
 8002b74:	07dd      	lsls	r5, r3, #31
 8002b76:	085c      	lsrs	r4, r3, #1
 8002b78:	2307      	movs	r3, #7
 8002b7a:	0849      	lsrs	r1, r1, #1
 8002b7c:	430d      	orrs	r5, r1
 8002b7e:	0017      	movs	r7, r2
 8002b80:	402b      	ands	r3, r5
 8002b82:	e710      	b.n	80029a6 <__aeabi_dsub+0x34a>
 8002b84:	4663      	mov	r3, ip
 8002b86:	1a1d      	subs	r5, r3, r0
 8002b88:	45ac      	cmp	ip, r5
 8002b8a:	4192      	sbcs	r2, r2
 8002b8c:	2601      	movs	r6, #1
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	4252      	negs	r2, r2
 8002b92:	1b1c      	subs	r4, r3, r4
 8002b94:	4688      	mov	r8, r1
 8002b96:	1aa4      	subs	r4, r4, r2
 8002b98:	400e      	ands	r6, r1
 8002b9a:	e5c6      	b.n	800272a <__aeabi_dsub+0xce>
 8002b9c:	4663      	mov	r3, ip
 8002b9e:	18c5      	adds	r5, r0, r3
 8002ba0:	9b02      	ldr	r3, [sp, #8]
 8002ba2:	4285      	cmp	r5, r0
 8002ba4:	4180      	sbcs	r0, r0
 8002ba6:	469c      	mov	ip, r3
 8002ba8:	4240      	negs	r0, r0
 8002baa:	4464      	add	r4, ip
 8002bac:	1824      	adds	r4, r4, r0
 8002bae:	2701      	movs	r7, #1
 8002bb0:	0223      	lsls	r3, r4, #8
 8002bb2:	d400      	bmi.n	8002bb6 <__aeabi_dsub+0x55a>
 8002bb4:	e6f5      	b.n	80029a2 <__aeabi_dsub+0x346>
 8002bb6:	2702      	movs	r7, #2
 8002bb8:	e641      	b.n	800283e <__aeabi_dsub+0x1e2>
 8002bba:	4663      	mov	r3, ip
 8002bbc:	1ac5      	subs	r5, r0, r3
 8002bbe:	42a8      	cmp	r0, r5
 8002bc0:	4180      	sbcs	r0, r0
 8002bc2:	9b02      	ldr	r3, [sp, #8]
 8002bc4:	4240      	negs	r0, r0
 8002bc6:	1ae4      	subs	r4, r4, r3
 8002bc8:	2701      	movs	r7, #1
 8002bca:	1a24      	subs	r4, r4, r0
 8002bcc:	e5a8      	b.n	8002720 <__aeabi_dsub+0xc4>
 8002bce:	9d02      	ldr	r5, [sp, #8]
 8002bd0:	4652      	mov	r2, sl
 8002bd2:	002b      	movs	r3, r5
 8002bd4:	3a20      	subs	r2, #32
 8002bd6:	40d3      	lsrs	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	4653      	mov	r3, sl
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d006      	beq.n	8002bee <__aeabi_dsub+0x592>
 8002be0:	2240      	movs	r2, #64	@ 0x40
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	002b      	movs	r3, r5
 8002be6:	4093      	lsls	r3, r2
 8002be8:	4662      	mov	r2, ip
 8002bea:	431a      	orrs	r2, r3
 8002bec:	4693      	mov	fp, r2
 8002bee:	465d      	mov	r5, fp
 8002bf0:	1e6b      	subs	r3, r5, #1
 8002bf2:	419d      	sbcs	r5, r3
 8002bf4:	430d      	orrs	r5, r1
 8002bf6:	e615      	b.n	8002824 <__aeabi_dsub+0x1c8>
 8002bf8:	0762      	lsls	r2, r4, #29
 8002bfa:	08c0      	lsrs	r0, r0, #3
 8002bfc:	4302      	orrs	r2, r0
 8002bfe:	08e4      	lsrs	r4, r4, #3
 8002c00:	e70d      	b.n	8002a1e <__aeabi_dsub+0x3c2>
 8002c02:	0011      	movs	r1, r2
 8002c04:	0027      	movs	r7, r4
 8002c06:	3920      	subs	r1, #32
 8002c08:	40cf      	lsrs	r7, r1
 8002c0a:	2a20      	cmp	r2, #32
 8002c0c:	d005      	beq.n	8002c1a <__aeabi_dsub+0x5be>
 8002c0e:	2140      	movs	r1, #64	@ 0x40
 8002c10:	1a8a      	subs	r2, r1, r2
 8002c12:	4094      	lsls	r4, r2
 8002c14:	0025      	movs	r5, r4
 8002c16:	4305      	orrs	r5, r0
 8002c18:	9503      	str	r5, [sp, #12]
 8002c1a:	9d03      	ldr	r5, [sp, #12]
 8002c1c:	1e6a      	subs	r2, r5, #1
 8002c1e:	4195      	sbcs	r5, r2
 8002c20:	433d      	orrs	r5, r7
 8002c22:	e77d      	b.n	8002b20 <__aeabi_dsub+0x4c4>
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d100      	bne.n	8002c2a <__aeabi_dsub+0x5ce>
 8002c28:	e744      	b.n	8002ab4 <__aeabi_dsub+0x458>
 8002c2a:	2601      	movs	r6, #1
 8002c2c:	400e      	ands	r6, r1
 8002c2e:	4663      	mov	r3, ip
 8002c30:	08d9      	lsrs	r1, r3, #3
 8002c32:	9b02      	ldr	r3, [sp, #8]
 8002c34:	075a      	lsls	r2, r3, #29
 8002c36:	430a      	orrs	r2, r1
 8002c38:	08dc      	lsrs	r4, r3, #3
 8002c3a:	e6f0      	b.n	8002a1e <__aeabi_dsub+0x3c2>
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d028      	beq.n	8002c92 <__aeabi_dsub+0x636>
 8002c40:	4662      	mov	r2, ip
 8002c42:	9f02      	ldr	r7, [sp, #8]
 8002c44:	08c0      	lsrs	r0, r0, #3
 8002c46:	433a      	orrs	r2, r7
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x5f0>
 8002c4a:	e6dc      	b.n	8002a06 <__aeabi_dsub+0x3aa>
 8002c4c:	0762      	lsls	r2, r4, #29
 8002c4e:	4310      	orrs	r0, r2
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	08e4      	lsrs	r4, r4, #3
 8002c54:	0312      	lsls	r2, r2, #12
 8002c56:	4214      	tst	r4, r2
 8002c58:	d009      	beq.n	8002c6e <__aeabi_dsub+0x612>
 8002c5a:	08fd      	lsrs	r5, r7, #3
 8002c5c:	4215      	tst	r5, r2
 8002c5e:	d106      	bne.n	8002c6e <__aeabi_dsub+0x612>
 8002c60:	4663      	mov	r3, ip
 8002c62:	2601      	movs	r6, #1
 8002c64:	002c      	movs	r4, r5
 8002c66:	08d8      	lsrs	r0, r3, #3
 8002c68:	077b      	lsls	r3, r7, #29
 8002c6a:	4318      	orrs	r0, r3
 8002c6c:	400e      	ands	r6, r1
 8002c6e:	0f42      	lsrs	r2, r0, #29
 8002c70:	00c0      	lsls	r0, r0, #3
 8002c72:	08c0      	lsrs	r0, r0, #3
 8002c74:	0752      	lsls	r2, r2, #29
 8002c76:	4302      	orrs	r2, r0
 8002c78:	e601      	b.n	800287e <__aeabi_dsub+0x222>
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	1a1d      	subs	r5, r3, r0
 8002c7e:	45ac      	cmp	ip, r5
 8002c80:	4192      	sbcs	r2, r2
 8002c82:	9b02      	ldr	r3, [sp, #8]
 8002c84:	4252      	negs	r2, r2
 8002c86:	1b1c      	subs	r4, r3, r4
 8002c88:	000e      	movs	r6, r1
 8002c8a:	4688      	mov	r8, r1
 8002c8c:	2701      	movs	r7, #1
 8002c8e:	1aa4      	subs	r4, r4, r2
 8002c90:	e546      	b.n	8002720 <__aeabi_dsub+0xc4>
 8002c92:	4663      	mov	r3, ip
 8002c94:	08d9      	lsrs	r1, r3, #3
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	075a      	lsls	r2, r3, #29
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	08dc      	lsrs	r4, r3, #3
 8002c9e:	e5ee      	b.n	800287e <__aeabi_dsub+0x222>
 8002ca0:	4663      	mov	r3, ip
 8002ca2:	9c02      	ldr	r4, [sp, #8]
 8002ca4:	9303      	str	r3, [sp, #12]
 8002ca6:	e6c7      	b.n	8002a38 <__aeabi_dsub+0x3dc>
 8002ca8:	08c0      	lsrs	r0, r0, #3
 8002caa:	2a00      	cmp	r2, #0
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x654>
 8002cae:	e6aa      	b.n	8002a06 <__aeabi_dsub+0x3aa>
 8002cb0:	0762      	lsls	r2, r4, #29
 8002cb2:	4310      	orrs	r0, r2
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	08e4      	lsrs	r4, r4, #3
 8002cb8:	0312      	lsls	r2, r2, #12
 8002cba:	4214      	tst	r4, r2
 8002cbc:	d0d7      	beq.n	8002c6e <__aeabi_dsub+0x612>
 8002cbe:	9f02      	ldr	r7, [sp, #8]
 8002cc0:	08fd      	lsrs	r5, r7, #3
 8002cc2:	4215      	tst	r5, r2
 8002cc4:	d1d3      	bne.n	8002c6e <__aeabi_dsub+0x612>
 8002cc6:	4663      	mov	r3, ip
 8002cc8:	2601      	movs	r6, #1
 8002cca:	08d8      	lsrs	r0, r3, #3
 8002ccc:	077b      	lsls	r3, r7, #29
 8002cce:	002c      	movs	r4, r5
 8002cd0:	4318      	orrs	r0, r3
 8002cd2:	400e      	ands	r6, r1
 8002cd4:	e7cb      	b.n	8002c6e <__aeabi_dsub+0x612>
 8002cd6:	000a      	movs	r2, r1
 8002cd8:	0027      	movs	r7, r4
 8002cda:	3a20      	subs	r2, #32
 8002cdc:	40d7      	lsrs	r7, r2
 8002cde:	2920      	cmp	r1, #32
 8002ce0:	d005      	beq.n	8002cee <__aeabi_dsub+0x692>
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	1a52      	subs	r2, r2, r1
 8002ce6:	4094      	lsls	r4, r2
 8002ce8:	0025      	movs	r5, r4
 8002cea:	4305      	orrs	r5, r0
 8002cec:	9503      	str	r5, [sp, #12]
 8002cee:	9d03      	ldr	r5, [sp, #12]
 8002cf0:	1e6a      	subs	r2, r5, #1
 8002cf2:	4195      	sbcs	r5, r2
 8002cf4:	432f      	orrs	r7, r5
 8002cf6:	e610      	b.n	800291a <__aeabi_dsub+0x2be>
 8002cf8:	0014      	movs	r4, r2
 8002cfa:	2500      	movs	r5, #0
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	e556      	b.n	80027ae <__aeabi_dsub+0x152>
 8002d00:	9b02      	ldr	r3, [sp, #8]
 8002d02:	4460      	add	r0, ip
 8002d04:	4699      	mov	r9, r3
 8002d06:	4560      	cmp	r0, ip
 8002d08:	4192      	sbcs	r2, r2
 8002d0a:	444c      	add	r4, r9
 8002d0c:	4252      	negs	r2, r2
 8002d0e:	0005      	movs	r5, r0
 8002d10:	18a4      	adds	r4, r4, r2
 8002d12:	e74c      	b.n	8002bae <__aeabi_dsub+0x552>
 8002d14:	001a      	movs	r2, r3
 8002d16:	001c      	movs	r4, r3
 8002d18:	432a      	orrs	r2, r5
 8002d1a:	d000      	beq.n	8002d1e <__aeabi_dsub+0x6c2>
 8002d1c:	e6b3      	b.n	8002a86 <__aeabi_dsub+0x42a>
 8002d1e:	e6c9      	b.n	8002ab4 <__aeabi_dsub+0x458>
 8002d20:	2480      	movs	r4, #128	@ 0x80
 8002d22:	2600      	movs	r6, #0
 8002d24:	0324      	lsls	r4, r4, #12
 8002d26:	e5ae      	b.n	8002886 <__aeabi_dsub+0x22a>
 8002d28:	2120      	movs	r1, #32
 8002d2a:	2500      	movs	r5, #0
 8002d2c:	1a09      	subs	r1, r1, r0
 8002d2e:	e517      	b.n	8002760 <__aeabi_dsub+0x104>
 8002d30:	2200      	movs	r2, #0
 8002d32:	2500      	movs	r5, #0
 8002d34:	4c0b      	ldr	r4, [pc, #44]	@ (8002d64 <__aeabi_dsub+0x708>)
 8002d36:	e53a      	b.n	80027ae <__aeabi_dsub+0x152>
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	d100      	bne.n	8002d3e <__aeabi_dsub+0x6e2>
 8002d3c:	e5f6      	b.n	800292c <__aeabi_dsub+0x2d0>
 8002d3e:	464b      	mov	r3, r9
 8002d40:	1bda      	subs	r2, r3, r7
 8002d42:	4692      	mov	sl, r2
 8002d44:	2f00      	cmp	r7, #0
 8002d46:	d100      	bne.n	8002d4a <__aeabi_dsub+0x6ee>
 8002d48:	e66f      	b.n	8002a2a <__aeabi_dsub+0x3ce>
 8002d4a:	2a38      	cmp	r2, #56	@ 0x38
 8002d4c:	dc05      	bgt.n	8002d5a <__aeabi_dsub+0x6fe>
 8002d4e:	2680      	movs	r6, #128	@ 0x80
 8002d50:	0436      	lsls	r6, r6, #16
 8002d52:	4334      	orrs	r4, r6
 8002d54:	4688      	mov	r8, r1
 8002d56:	000e      	movs	r6, r1
 8002d58:	e6d1      	b.n	8002afe <__aeabi_dsub+0x4a2>
 8002d5a:	4688      	mov	r8, r1
 8002d5c:	000e      	movs	r6, r1
 8002d5e:	2501      	movs	r5, #1
 8002d60:	e6de      	b.n	8002b20 <__aeabi_dsub+0x4c4>
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	000007ff 	.word	0x000007ff
 8002d68:	ff7fffff 	.word	0xff7fffff
 8002d6c:	000007fe 	.word	0x000007fe
 8002d70:	2d00      	cmp	r5, #0
 8002d72:	d100      	bne.n	8002d76 <__aeabi_dsub+0x71a>
 8002d74:	e668      	b.n	8002a48 <__aeabi_dsub+0x3ec>
 8002d76:	464b      	mov	r3, r9
 8002d78:	1bd9      	subs	r1, r3, r7
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	d101      	bne.n	8002d82 <__aeabi_dsub+0x726>
 8002d7e:	468a      	mov	sl, r1
 8002d80:	e5a7      	b.n	80028d2 <__aeabi_dsub+0x276>
 8002d82:	2701      	movs	r7, #1
 8002d84:	2938      	cmp	r1, #56	@ 0x38
 8002d86:	dd00      	ble.n	8002d8a <__aeabi_dsub+0x72e>
 8002d88:	e5c7      	b.n	800291a <__aeabi_dsub+0x2be>
 8002d8a:	2280      	movs	r2, #128	@ 0x80
 8002d8c:	0412      	lsls	r2, r2, #16
 8002d8e:	4314      	orrs	r4, r2
 8002d90:	e5af      	b.n	80028f2 <__aeabi_dsub+0x296>
 8002d92:	46c0      	nop			@ (mov r8, r8)

08002d94 <__aeabi_dcmpun>:
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d96:	46c6      	mov	lr, r8
 8002d98:	031e      	lsls	r6, r3, #12
 8002d9a:	0b36      	lsrs	r6, r6, #12
 8002d9c:	46b0      	mov	r8, r6
 8002d9e:	4e0d      	ldr	r6, [pc, #52]	@ (8002dd4 <__aeabi_dcmpun+0x40>)
 8002da0:	030c      	lsls	r4, r1, #12
 8002da2:	004d      	lsls	r5, r1, #1
 8002da4:	005f      	lsls	r7, r3, #1
 8002da6:	b500      	push	{lr}
 8002da8:	0b24      	lsrs	r4, r4, #12
 8002daa:	0d6d      	lsrs	r5, r5, #21
 8002dac:	0d7f      	lsrs	r7, r7, #21
 8002dae:	42b5      	cmp	r5, r6
 8002db0:	d00b      	beq.n	8002dca <__aeabi_dcmpun+0x36>
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <__aeabi_dcmpun+0x40>)
 8002db4:	2000      	movs	r0, #0
 8002db6:	428f      	cmp	r7, r1
 8002db8:	d104      	bne.n	8002dc4 <__aeabi_dcmpun+0x30>
 8002dba:	4646      	mov	r6, r8
 8002dbc:	4316      	orrs	r6, r2
 8002dbe:	0030      	movs	r0, r6
 8002dc0:	1e43      	subs	r3, r0, #1
 8002dc2:	4198      	sbcs	r0, r3
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	46b8      	mov	r8, r7
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dca:	4304      	orrs	r4, r0
 8002dcc:	2001      	movs	r0, #1
 8002dce:	2c00      	cmp	r4, #0
 8002dd0:	d1f8      	bne.n	8002dc4 <__aeabi_dcmpun+0x30>
 8002dd2:	e7ee      	b.n	8002db2 <__aeabi_dcmpun+0x1e>
 8002dd4:	000007ff 	.word	0x000007ff

08002dd8 <__aeabi_d2iz>:
 8002dd8:	000b      	movs	r3, r1
 8002dda:	0002      	movs	r2, r0
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	4d16      	ldr	r5, [pc, #88]	@ (8002e38 <__aeabi_d2iz+0x60>)
 8002de0:	030c      	lsls	r4, r1, #12
 8002de2:	b082      	sub	sp, #8
 8002de4:	0049      	lsls	r1, r1, #1
 8002de6:	2000      	movs	r0, #0
 8002de8:	9200      	str	r2, [sp, #0]
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	0b24      	lsrs	r4, r4, #12
 8002dee:	0d49      	lsrs	r1, r1, #21
 8002df0:	0fde      	lsrs	r6, r3, #31
 8002df2:	42a9      	cmp	r1, r5
 8002df4:	dd04      	ble.n	8002e00 <__aeabi_d2iz+0x28>
 8002df6:	4811      	ldr	r0, [pc, #68]	@ (8002e3c <__aeabi_d2iz+0x64>)
 8002df8:	4281      	cmp	r1, r0
 8002dfa:	dd03      	ble.n	8002e04 <__aeabi_d2iz+0x2c>
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <__aeabi_d2iz+0x68>)
 8002dfe:	18f0      	adds	r0, r6, r3
 8002e00:	b002      	add	sp, #8
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	2080      	movs	r0, #128	@ 0x80
 8002e06:	0340      	lsls	r0, r0, #13
 8002e08:	4320      	orrs	r0, r4
 8002e0a:	4c0e      	ldr	r4, [pc, #56]	@ (8002e44 <__aeabi_d2iz+0x6c>)
 8002e0c:	1a64      	subs	r4, r4, r1
 8002e0e:	2c1f      	cmp	r4, #31
 8002e10:	dd08      	ble.n	8002e24 <__aeabi_d2iz+0x4c>
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <__aeabi_d2iz+0x70>)
 8002e14:	1a5b      	subs	r3, r3, r1
 8002e16:	40d8      	lsrs	r0, r3
 8002e18:	0003      	movs	r3, r0
 8002e1a:	4258      	negs	r0, r3
 8002e1c:	2e00      	cmp	r6, #0
 8002e1e:	d1ef      	bne.n	8002e00 <__aeabi_d2iz+0x28>
 8002e20:	0018      	movs	r0, r3
 8002e22:	e7ed      	b.n	8002e00 <__aeabi_d2iz+0x28>
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <__aeabi_d2iz+0x74>)
 8002e26:	9a00      	ldr	r2, [sp, #0]
 8002e28:	469c      	mov	ip, r3
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	4461      	add	r1, ip
 8002e2e:	408b      	lsls	r3, r1
 8002e30:	40e2      	lsrs	r2, r4
 8002e32:	4313      	orrs	r3, r2
 8002e34:	e7f1      	b.n	8002e1a <__aeabi_d2iz+0x42>
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	000003fe 	.word	0x000003fe
 8002e3c:	0000041d 	.word	0x0000041d
 8002e40:	7fffffff 	.word	0x7fffffff
 8002e44:	00000433 	.word	0x00000433
 8002e48:	00000413 	.word	0x00000413
 8002e4c:	fffffbed 	.word	0xfffffbed

08002e50 <__aeabi_i2d>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d016      	beq.n	8002e84 <__aeabi_i2d+0x34>
 8002e56:	17c3      	asrs	r3, r0, #31
 8002e58:	18c5      	adds	r5, r0, r3
 8002e5a:	405d      	eors	r5, r3
 8002e5c:	0fc4      	lsrs	r4, r0, #31
 8002e5e:	0028      	movs	r0, r5
 8002e60:	f000 f8f0 	bl	8003044 <__clzsi2>
 8002e64:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <__aeabi_i2d+0x58>)
 8002e66:	1a1b      	subs	r3, r3, r0
 8002e68:	055b      	lsls	r3, r3, #21
 8002e6a:	0d5b      	lsrs	r3, r3, #21
 8002e6c:	280a      	cmp	r0, #10
 8002e6e:	dc14      	bgt.n	8002e9a <__aeabi_i2d+0x4a>
 8002e70:	0002      	movs	r2, r0
 8002e72:	002e      	movs	r6, r5
 8002e74:	3215      	adds	r2, #21
 8002e76:	4096      	lsls	r6, r2
 8002e78:	220b      	movs	r2, #11
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	40d5      	lsrs	r5, r2
 8002e7e:	032d      	lsls	r5, r5, #12
 8002e80:	0b2d      	lsrs	r5, r5, #12
 8002e82:	e003      	b.n	8002e8c <__aeabi_i2d+0x3c>
 8002e84:	2400      	movs	r4, #0
 8002e86:	2300      	movs	r3, #0
 8002e88:	2500      	movs	r5, #0
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	051b      	lsls	r3, r3, #20
 8002e8e:	432b      	orrs	r3, r5
 8002e90:	07e4      	lsls	r4, r4, #31
 8002e92:	4323      	orrs	r3, r4
 8002e94:	0030      	movs	r0, r6
 8002e96:	0019      	movs	r1, r3
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
 8002e9a:	380b      	subs	r0, #11
 8002e9c:	4085      	lsls	r5, r0
 8002e9e:	032d      	lsls	r5, r5, #12
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	0b2d      	lsrs	r5, r5, #12
 8002ea4:	e7f2      	b.n	8002e8c <__aeabi_i2d+0x3c>
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	0000041e 	.word	0x0000041e

08002eac <__aeabi_f2d>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	0242      	lsls	r2, r0, #9
 8002eb0:	0043      	lsls	r3, r0, #1
 8002eb2:	0fc4      	lsrs	r4, r0, #31
 8002eb4:	20fe      	movs	r0, #254	@ 0xfe
 8002eb6:	0e1b      	lsrs	r3, r3, #24
 8002eb8:	1c59      	adds	r1, r3, #1
 8002eba:	0a55      	lsrs	r5, r2, #9
 8002ebc:	4208      	tst	r0, r1
 8002ebe:	d00c      	beq.n	8002eda <__aeabi_f2d+0x2e>
 8002ec0:	21e0      	movs	r1, #224	@ 0xe0
 8002ec2:	0089      	lsls	r1, r1, #2
 8002ec4:	468c      	mov	ip, r1
 8002ec6:	076d      	lsls	r5, r5, #29
 8002ec8:	0b12      	lsrs	r2, r2, #12
 8002eca:	4463      	add	r3, ip
 8002ecc:	051b      	lsls	r3, r3, #20
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	07e4      	lsls	r4, r4, #31
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	0028      	movs	r0, r5
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d114      	bne.n	8002f08 <__aeabi_f2d+0x5c>
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	d01b      	beq.n	8002f1a <__aeabi_f2d+0x6e>
 8002ee2:	0028      	movs	r0, r5
 8002ee4:	f000 f8ae 	bl	8003044 <__clzsi2>
 8002ee8:	280a      	cmp	r0, #10
 8002eea:	dc1c      	bgt.n	8002f26 <__aeabi_f2d+0x7a>
 8002eec:	230b      	movs	r3, #11
 8002eee:	002a      	movs	r2, r5
 8002ef0:	1a1b      	subs	r3, r3, r0
 8002ef2:	40da      	lsrs	r2, r3
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	3315      	adds	r3, #21
 8002ef8:	409d      	lsls	r5, r3
 8002efa:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <__aeabi_f2d+0x88>)
 8002efc:	0312      	lsls	r2, r2, #12
 8002efe:	1a1b      	subs	r3, r3, r0
 8002f00:	055b      	lsls	r3, r3, #21
 8002f02:	0b12      	lsrs	r2, r2, #12
 8002f04:	0d5b      	lsrs	r3, r3, #21
 8002f06:	e7e1      	b.n	8002ecc <__aeabi_f2d+0x20>
 8002f08:	2d00      	cmp	r5, #0
 8002f0a:	d009      	beq.n	8002f20 <__aeabi_f2d+0x74>
 8002f0c:	0b13      	lsrs	r3, r2, #12
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	0312      	lsls	r2, r2, #12
 8002f12:	431a      	orrs	r2, r3
 8002f14:	076d      	lsls	r5, r5, #29
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <__aeabi_f2d+0x8c>)
 8002f18:	e7d8      	b.n	8002ecc <__aeabi_f2d+0x20>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	e7d5      	b.n	8002ecc <__aeabi_f2d+0x20>
 8002f20:	2200      	movs	r2, #0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <__aeabi_f2d+0x8c>)
 8002f24:	e7d2      	b.n	8002ecc <__aeabi_f2d+0x20>
 8002f26:	0003      	movs	r3, r0
 8002f28:	002a      	movs	r2, r5
 8002f2a:	3b0b      	subs	r3, #11
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	2500      	movs	r5, #0
 8002f30:	e7e3      	b.n	8002efa <__aeabi_f2d+0x4e>
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	00000389 	.word	0x00000389
 8002f38:	000007ff 	.word	0x000007ff

08002f3c <__aeabi_d2f>:
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	004b      	lsls	r3, r1, #1
 8002f40:	030f      	lsls	r7, r1, #12
 8002f42:	0d5b      	lsrs	r3, r3, #21
 8002f44:	4c3b      	ldr	r4, [pc, #236]	@ (8003034 <__aeabi_d2f+0xf8>)
 8002f46:	0f45      	lsrs	r5, r0, #29
 8002f48:	b083      	sub	sp, #12
 8002f4a:	0a7f      	lsrs	r7, r7, #9
 8002f4c:	1c5e      	adds	r6, r3, #1
 8002f4e:	432f      	orrs	r7, r5
 8002f50:	9000      	str	r0, [sp, #0]
 8002f52:	9101      	str	r1, [sp, #4]
 8002f54:	0fca      	lsrs	r2, r1, #31
 8002f56:	00c5      	lsls	r5, r0, #3
 8002f58:	4226      	tst	r6, r4
 8002f5a:	d00b      	beq.n	8002f74 <__aeabi_d2f+0x38>
 8002f5c:	4936      	ldr	r1, [pc, #216]	@ (8003038 <__aeabi_d2f+0xfc>)
 8002f5e:	185c      	adds	r4, r3, r1
 8002f60:	2cfe      	cmp	r4, #254	@ 0xfe
 8002f62:	dd13      	ble.n	8002f8c <__aeabi_d2f+0x50>
 8002f64:	20ff      	movs	r0, #255	@ 0xff
 8002f66:	2300      	movs	r3, #0
 8002f68:	05c0      	lsls	r0, r0, #23
 8002f6a:	4318      	orrs	r0, r3
 8002f6c:	07d2      	lsls	r2, r2, #31
 8002f6e:	4310      	orrs	r0, r2
 8002f70:	b003      	add	sp, #12
 8002f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <__aeabi_d2f+0x42>
 8002f78:	2000      	movs	r0, #0
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e7f4      	b.n	8002f68 <__aeabi_d2f+0x2c>
 8002f7e:	433d      	orrs	r5, r7
 8002f80:	d0f0      	beq.n	8002f64 <__aeabi_d2f+0x28>
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	03db      	lsls	r3, r3, #15
 8002f86:	20ff      	movs	r0, #255	@ 0xff
 8002f88:	433b      	orrs	r3, r7
 8002f8a:	e7ed      	b.n	8002f68 <__aeabi_d2f+0x2c>
 8002f8c:	2c00      	cmp	r4, #0
 8002f8e:	dd14      	ble.n	8002fba <__aeabi_d2f+0x7e>
 8002f90:	9b00      	ldr	r3, [sp, #0]
 8002f92:	00ff      	lsls	r7, r7, #3
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	4183      	sbcs	r3, r0
 8002f9a:	0f69      	lsrs	r1, r5, #29
 8002f9c:	433b      	orrs	r3, r7
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	0759      	lsls	r1, r3, #29
 8002fa2:	d041      	beq.n	8003028 <__aeabi_d2f+0xec>
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	4019      	ands	r1, r3
 8002fa8:	2904      	cmp	r1, #4
 8002faa:	d028      	beq.n	8002ffe <__aeabi_d2f+0xc2>
 8002fac:	3304      	adds	r3, #4
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	d525      	bpl.n	8002ffe <__aeabi_d2f+0xc2>
 8002fb2:	3401      	adds	r4, #1
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	b2e0      	uxtb	r0, r4
 8002fb8:	e7d6      	b.n	8002f68 <__aeabi_d2f+0x2c>
 8002fba:	0021      	movs	r1, r4
 8002fbc:	3117      	adds	r1, #23
 8002fbe:	dbdb      	blt.n	8002f78 <__aeabi_d2f+0x3c>
 8002fc0:	2180      	movs	r1, #128	@ 0x80
 8002fc2:	201e      	movs	r0, #30
 8002fc4:	0409      	lsls	r1, r1, #16
 8002fc6:	4339      	orrs	r1, r7
 8002fc8:	1b00      	subs	r0, r0, r4
 8002fca:	281f      	cmp	r0, #31
 8002fcc:	dd1b      	ble.n	8003006 <__aeabi_d2f+0xca>
 8002fce:	2602      	movs	r6, #2
 8002fd0:	4276      	negs	r6, r6
 8002fd2:	1b34      	subs	r4, r6, r4
 8002fd4:	000e      	movs	r6, r1
 8002fd6:	40e6      	lsrs	r6, r4
 8002fd8:	0034      	movs	r4, r6
 8002fda:	2820      	cmp	r0, #32
 8002fdc:	d004      	beq.n	8002fe8 <__aeabi_d2f+0xac>
 8002fde:	4817      	ldr	r0, [pc, #92]	@ (800303c <__aeabi_d2f+0x100>)
 8002fe0:	4684      	mov	ip, r0
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	430d      	orrs	r5, r1
 8002fe8:	002b      	movs	r3, r5
 8002fea:	1e59      	subs	r1, r3, #1
 8002fec:	418b      	sbcs	r3, r1
 8002fee:	4323      	orrs	r3, r4
 8002ff0:	0759      	lsls	r1, r3, #29
 8002ff2:	d015      	beq.n	8003020 <__aeabi_d2f+0xe4>
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	2400      	movs	r4, #0
 8002ff8:	4019      	ands	r1, r3
 8002ffa:	2904      	cmp	r1, #4
 8002ffc:	d117      	bne.n	800302e <__aeabi_d2f+0xf2>
 8002ffe:	019b      	lsls	r3, r3, #6
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	b2e0      	uxtb	r0, r4
 8003004:	e7b0      	b.n	8002f68 <__aeabi_d2f+0x2c>
 8003006:	4c0e      	ldr	r4, [pc, #56]	@ (8003040 <__aeabi_d2f+0x104>)
 8003008:	191c      	adds	r4, r3, r4
 800300a:	002b      	movs	r3, r5
 800300c:	40a5      	lsls	r5, r4
 800300e:	40c3      	lsrs	r3, r0
 8003010:	40a1      	lsls	r1, r4
 8003012:	1e68      	subs	r0, r5, #1
 8003014:	4185      	sbcs	r5, r0
 8003016:	4329      	orrs	r1, r5
 8003018:	430b      	orrs	r3, r1
 800301a:	2400      	movs	r4, #0
 800301c:	0759      	lsls	r1, r3, #29
 800301e:	d1c1      	bne.n	8002fa4 <__aeabi_d2f+0x68>
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	2000      	movs	r0, #0
 8003024:	0a5b      	lsrs	r3, r3, #9
 8003026:	e79f      	b.n	8002f68 <__aeabi_d2f+0x2c>
 8003028:	08db      	lsrs	r3, r3, #3
 800302a:	b2e0      	uxtb	r0, r4
 800302c:	e79c      	b.n	8002f68 <__aeabi_d2f+0x2c>
 800302e:	3304      	adds	r3, #4
 8003030:	e7e5      	b.n	8002ffe <__aeabi_d2f+0xc2>
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	000007fe 	.word	0x000007fe
 8003038:	fffffc80 	.word	0xfffffc80
 800303c:	fffffca2 	.word	0xfffffca2
 8003040:	fffffc82 	.word	0xfffffc82

08003044 <__clzsi2>:
 8003044:	211c      	movs	r1, #28
 8003046:	2301      	movs	r3, #1
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	4298      	cmp	r0, r3
 800304c:	d301      	bcc.n	8003052 <__clzsi2+0xe>
 800304e:	0c00      	lsrs	r0, r0, #16
 8003050:	3910      	subs	r1, #16
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	4298      	cmp	r0, r3
 8003056:	d301      	bcc.n	800305c <__clzsi2+0x18>
 8003058:	0a00      	lsrs	r0, r0, #8
 800305a:	3908      	subs	r1, #8
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	4298      	cmp	r0, r3
 8003060:	d301      	bcc.n	8003066 <__clzsi2+0x22>
 8003062:	0900      	lsrs	r0, r0, #4
 8003064:	3904      	subs	r1, #4
 8003066:	a202      	add	r2, pc, #8	@ (adr r2, 8003070 <__clzsi2+0x2c>)
 8003068:	5c10      	ldrb	r0, [r2, r0]
 800306a:	1840      	adds	r0, r0, r1
 800306c:	4770      	bx	lr
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	02020304 	.word	0x02020304
 8003074:	01010101 	.word	0x01010101
	...

08003080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	2214      	movs	r2, #20
 8003086:	2100      	movs	r1, #0
 8003088:	a801      	add	r0, sp, #4
 800308a:	f002 fe6c 	bl	8005d66 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <MX_GPIO_Init+0x58>)
 8003090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003092:	2601      	movs	r6, #1
 8003094:	4332      	orrs	r2, r6
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	4033      	ands	r3, r6
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80030a0:	24a0      	movs	r4, #160	@ 0xa0
 80030a2:	05e4      	lsls	r4, r4, #23
 80030a4:	2200      	movs	r2, #0
 80030a6:	2130      	movs	r1, #48	@ 0x30
 80030a8:	0020      	movs	r0, r4
 80030aa:	f001 fce2 	bl	8004a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cs2_Pin cs1_Pin cs0_Pin */
  GPIO_InitStruct.Pin = cs2_Pin|cs1_Pin|cs0_Pin;
 80030ae:	230e      	movs	r3, #14
 80030b0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b2:	2500      	movs	r5, #0
 80030b4:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030b6:	3b0c      	subs	r3, #12
 80030b8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	a901      	add	r1, sp, #4
 80030bc:	0020      	movs	r0, r4
 80030be:	f001 fbf9 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030c2:	2330      	movs	r3, #48	@ 0x30
 80030c4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	a901      	add	r1, sp, #4
 80030ce:	0020      	movs	r0, r4
 80030d0:	f001 fbf0 	bl	80048b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030d4:	b006      	add	sp, #24
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	40021000 	.word	0x40021000

080030dc <MX_DMA_Init>:
{
 80030dc:	b500      	push	{lr}
 80030de:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030e0:	4a09      	ldr	r2, [pc, #36]	@ (8003108 <MX_DMA_Init+0x2c>)
 80030e2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80030e4:	2301      	movs	r3, #1
 80030e6:	4319      	orrs	r1, r3
 80030e8:	6391      	str	r1, [r2, #56]	@ 0x38
 80030ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030ec:	4013      	ands	r3, r2
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	2009      	movs	r0, #9
 80030f8:	f001 fa26 	bl	8004548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030fc:	2009      	movs	r0, #9
 80030fe:	f001 fa27 	bl	8004550 <HAL_NVIC_EnableIRQ>
}
 8003102:	b003      	add	sp, #12
 8003104:	bd00      	pop	{pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_ADC_ConvCpltCallback>:
{
 800310c:	b510      	push	{r4, lr}
	convCompleted = 1;
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003114:	20a0      	movs	r0, #160	@ 0xa0
 8003116:	2120      	movs	r1, #32
 8003118:	05c0      	lsls	r0, r0, #23
 800311a:	f001 fcb0 	bl	8004a7e <HAL_GPIO_TogglePin>
	HAL_ADC_Stop_DMA(&hadc1);
 800311e:	4803      	ldr	r0, [pc, #12]	@ (800312c <HAL_ADC_ConvCpltCallback+0x20>)
 8003120:	f001 f984 	bl	800442c <HAL_ADC_Stop_DMA>
}
 8003124:	bd10      	pop	{r4, pc}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	2000007c 	.word	0x2000007c
 800312c:	200001c8 	.word	0x200001c8

08003130 <HAL_TIM_PeriodElapsedCallback>:
	{
 8003130:	b510      	push	{r4, lr}
		 if(htim->Instance==TIM14)
 8003132:	6802      	ldr	r2, [r0, #0]
 8003134:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003136:	429a      	cmp	r2, r3
 8003138:	d000      	beq.n	800313c <HAL_TIM_PeriodElapsedCallback+0xc>
	}
 800313a:	bd10      	pop	{r4, pc}
			 	  	  ratio = (float)ntc_filt/4096.0;
 800313c:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800313e:	8818      	ldrh	r0, [r3, #0]
 8003140:	f7fd ffda 	bl	80010f8 <__aeabi_ui2f>
 8003144:	21e6      	movs	r1, #230	@ 0xe6
 8003146:	0589      	lsls	r1, r1, #22
 8003148:	f7fd fc88 	bl	8000a5c <__aeabi_fmul>
 800314c:	4c1f      	ldr	r4, [pc, #124]	@ (80031cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800314e:	6020      	str	r0, [r4, #0]
			 	  	  ntc_resistance = 10000 * (1-ratio)/ ratio;
 8003150:	6821      	ldr	r1, [r4, #0]
 8003152:	20fe      	movs	r0, #254	@ 0xfe
 8003154:	0580      	lsls	r0, r0, #22
 8003156:	f7fd fdbf 	bl	8000cd8 <__aeabi_fsub>
 800315a:	491d      	ldr	r1, [pc, #116]	@ (80031d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800315c:	f7fd fc7e 	bl	8000a5c <__aeabi_fmul>
 8003160:	6821      	ldr	r1, [r4, #0]
 8003162:	f7fd fa95 	bl	8000690 <__aeabi_fdiv>
 8003166:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003168:	6018      	str	r0, [r3, #0]
			 	  	  T =  1 / ((1 / T25) + ((log(ntc_resistance / R25)) / BETA));
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4918      	ldr	r1, [pc, #96]	@ (80031d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800316e:	f7fd fa8f 	bl	8000690 <__aeabi_fdiv>
 8003172:	f7ff fe9b 	bl	8002eac <__aeabi_f2d>
 8003176:	f002 fe29 	bl	8005dcc <log>
 800317a:	2200      	movs	r2, #0
 800317c:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800317e:	f7fe fb61 	bl	8001844 <__aeabi_ddiv>
 8003182:	22e0      	movs	r2, #224	@ 0xe0
 8003184:	0612      	lsls	r2, r2, #24
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003188:	f7fd fff8 	bl	800117c <__aeabi_dadd>
 800318c:	0002      	movs	r2, r0
 800318e:	000b      	movs	r3, r1
 8003190:	2000      	movs	r0, #0
 8003192:	4913      	ldr	r1, [pc, #76]	@ (80031e0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003194:	f7fe fb56 	bl	8001844 <__aeabi_ddiv>
 8003198:	f7ff fed0 	bl	8002f3c <__aeabi_d2f>
 800319c:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800319e:	6018      	str	r0, [r3, #0]
			 	  	  ntc_temp = T - 273.15; // Converting kelvin to celsius
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	f7ff fe83 	bl	8002eac <__aeabi_f2d>
 80031a6:	4a10      	ldr	r2, [pc, #64]	@ (80031e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031a8:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80031aa:	f7ff fa57 	bl	800265c <__aeabi_dsub>
 80031ae:	f7ff fec5 	bl	8002f3c <__aeabi_d2f>
 80031b2:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80031b4:	6018      	str	r0, [r3, #0]
			 			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80031b6:	20a0      	movs	r0, #160	@ 0xa0
 80031b8:	2110      	movs	r1, #16
 80031ba:	05c0      	lsls	r0, r0, #23
 80031bc:	f001 fc5f 	bl	8004a7e <HAL_GPIO_TogglePin>
	}
 80031c0:	e7bb      	b.n	800313a <HAL_TIM_PeriodElapsedCallback+0xa>
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	40002000 	.word	0x40002000
 80031c8:	200002d8 	.word	0x200002d8
 80031cc:	20000240 	.word	0x20000240
 80031d0:	461c4000 	.word	0x461c4000
 80031d4:	20000244 	.word	0x20000244
 80031d8:	40b18000 	.word	0x40b18000
 80031dc:	3f6b79e1 	.word	0x3f6b79e1
 80031e0:	3ff00000 	.word	0x3ff00000
 80031e4:	2000023c 	.word	0x2000023c
 80031e8:	66666666 	.word	0x66666666
 80031ec:	40711266 	.word	0x40711266
 80031f0:	20000248 	.word	0x20000248

080031f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <Error_Handler+0x2>

080031f8 <MX_ADC1_Init>:
{
 80031f8:	b500      	push	{lr}
 80031fa:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80031fc:	220c      	movs	r2, #12
 80031fe:	2100      	movs	r1, #0
 8003200:	a801      	add	r0, sp, #4
 8003202:	f002 fdb0 	bl	8005d66 <memset>
  hadc1.Instance = ADC1;
 8003206:	4829      	ldr	r0, [pc, #164]	@ (80032ac <MX_ADC1_Init+0xb4>)
 8003208:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <MX_ADC1_Init+0xb8>)
 800320a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	05db      	lsls	r3, r3, #23
 8003210:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003212:	2300      	movs	r3, #0
 8003214:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003216:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003218:	2280      	movs	r2, #128	@ 0x80
 800321a:	0392      	lsls	r2, r2, #14
 800321c:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800321e:	2208      	movs	r2, #8
 8003220:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003222:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003224:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003226:	7683      	strb	r3, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8003228:	3a05      	subs	r2, #5
 800322a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322c:	321d      	adds	r2, #29
 800322e:	5483      	strb	r3, [r0, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8003230:	2298      	movs	r2, #152	@ 0x98
 8003232:	00d2      	lsls	r2, r2, #3
 8003234:	6242      	str	r2, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003236:	3ac0      	subs	r2, #192	@ 0xc0
 8003238:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800323a:	222c      	movs	r2, #44	@ 0x2c
 800323c:	2101      	movs	r1, #1
 800323e:	5481      	strb	r1, [r0, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003240:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8003242:	3a26      	subs	r2, #38	@ 0x26
 8003244:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 8003246:	3a02      	subs	r2, #2
 8003248:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800324a:	3238      	adds	r2, #56	@ 0x38
 800324c:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800324e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003250:	f000 fd04 	bl	8003c5c <HAL_ADC_Init>
 8003254:	2800      	cmp	r0, #0
 8003256:	d120      	bne.n	800329a <MX_ADC1_Init+0xa2>
  sConfig.Channel = ADC_CHANNEL_8;
 8003258:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <MX_ADC1_Init+0xbc>)
 800325a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800325c:	2300      	movs	r3, #0
 800325e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003260:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003262:	4812      	ldr	r0, [pc, #72]	@ (80032ac <MX_ADC1_Init+0xb4>)
 8003264:	a901      	add	r1, sp, #4
 8003266:	f000 fe6d 	bl	8003f44 <HAL_ADC_ConfigChannel>
 800326a:	2800      	cmp	r0, #0
 800326c:	d117      	bne.n	800329e <MX_ADC1_Init+0xa6>
  sConfig.Channel = ADC_CHANNEL_7;
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <MX_ADC1_Init+0xc0>)
 8003270:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003272:	2304      	movs	r3, #4
 8003274:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003276:	480d      	ldr	r0, [pc, #52]	@ (80032ac <MX_ADC1_Init+0xb4>)
 8003278:	a901      	add	r1, sp, #4
 800327a:	f000 fe63 	bl	8003f44 <HAL_ADC_ConfigChannel>
 800327e:	2800      	cmp	r0, #0
 8003280:	d10f      	bne.n	80032a2 <MX_ADC1_Init+0xaa>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003282:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <MX_ADC1_Init+0xc4>)
 8003284:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003286:	2308      	movs	r3, #8
 8003288:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800328a:	4808      	ldr	r0, [pc, #32]	@ (80032ac <MX_ADC1_Init+0xb4>)
 800328c:	a901      	add	r1, sp, #4
 800328e:	f000 fe59 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8003292:	2800      	cmp	r0, #0
 8003294:	d107      	bne.n	80032a6 <MX_ADC1_Init+0xae>
}
 8003296:	b005      	add	sp, #20
 8003298:	bd00      	pop	{pc}
    Error_Handler();
 800329a:	f7ff ffab 	bl	80031f4 <Error_Handler>
    Error_Handler();
 800329e:	f7ff ffa9 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80032a2:	f7ff ffa7 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80032a6:	f7ff ffa5 	bl	80031f4 <Error_Handler>
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	200001c8 	.word	0x200001c8
 80032b0:	40012400 	.word	0x40012400
 80032b4:	20000100 	.word	0x20000100
 80032b8:	1c000080 	.word	0x1c000080
 80032bc:	a4000200 	.word	0xa4000200

080032c0 <MX_TIM1_Init>:
{
 80032c0:	b500      	push	{lr}
 80032c2:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c4:	2210      	movs	r2, #16
 80032c6:	2100      	movs	r1, #0
 80032c8:	a818      	add	r0, sp, #96	@ 0x60
 80032ca:	f002 fd4c 	bl	8005d66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ce:	220c      	movs	r2, #12
 80032d0:	2100      	movs	r1, #0
 80032d2:	a815      	add	r0, sp, #84	@ 0x54
 80032d4:	f002 fd47 	bl	8005d66 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d8:	221c      	movs	r2, #28
 80032da:	2100      	movs	r1, #0
 80032dc:	a80e      	add	r0, sp, #56	@ 0x38
 80032de:	f002 fd42 	bl	8005d66 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032e2:	2234      	movs	r2, #52	@ 0x34
 80032e4:	2100      	movs	r1, #0
 80032e6:	a801      	add	r0, sp, #4
 80032e8:	f002 fd3d 	bl	8005d66 <memset>
  htim1.Instance = TIM1;
 80032ec:	4830      	ldr	r0, [pc, #192]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 80032ee:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <MX_TIM1_Init+0xf4>)
 80032f0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f6:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 8192;
 80032f8:	2280      	movs	r2, #128	@ 0x80
 80032fa:	0192      	lsls	r2, r2, #6
 80032fc:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003300:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003304:	f002 f928 	bl	8005558 <HAL_TIM_Base_Init>
 8003308:	2800      	cmp	r0, #0
 800330a:	d145      	bne.n	8003398 <MX_TIM1_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	015b      	lsls	r3, r3, #5
 8003310:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003312:	4827      	ldr	r0, [pc, #156]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 8003314:	a918      	add	r1, sp, #96	@ 0x60
 8003316:	f002 facf 	bl	80058b8 <HAL_TIM_ConfigClockSource>
 800331a:	2800      	cmp	r0, #0
 800331c:	d13e      	bne.n	800339c <MX_TIM1_Init+0xdc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800331e:	4824      	ldr	r0, [pc, #144]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 8003320:	f002 f97a 	bl	8005618 <HAL_TIM_PWM_Init>
 8003324:	2800      	cmp	r0, #0
 8003326:	d13b      	bne.n	80033a0 <MX_TIM1_Init+0xe0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800332c:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332e:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003330:	481f      	ldr	r0, [pc, #124]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 8003332:	a915      	add	r1, sp, #84	@ 0x54
 8003334:	f002 fc76 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8003338:	2800      	cmp	r0, #0
 800333a:	d133      	bne.n	80033a4 <MX_TIM1_Init+0xe4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800333c:	2360      	movs	r3, #96	@ 0x60
 800333e:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003344:	2202      	movs	r2, #2
 8003346:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003348:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800334a:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800334c:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800334e:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003350:	4817      	ldr	r0, [pc, #92]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 8003352:	2200      	movs	r2, #0
 8003354:	a90e      	add	r1, sp, #56	@ 0x38
 8003356:	f002 fa01 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 800335a:	2800      	cmp	r0, #0
 800335c:	d124      	bne.n	80033a8 <MX_TIM1_Init+0xe8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003362:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003364:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003366:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003368:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800336a:	2280      	movs	r2, #128	@ 0x80
 800336c:	0192      	lsls	r2, r2, #6
 800336e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003370:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003372:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003374:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003376:	2280      	movs	r2, #128	@ 0x80
 8003378:	0492      	lsls	r2, r2, #18
 800337a:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800337c:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800337e:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003380:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003382:	480b      	ldr	r0, [pc, #44]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 8003384:	a901      	add	r1, sp, #4
 8003386:	f002 fc85 	bl	8005c94 <HAL_TIMEx_ConfigBreakDeadTime>
 800338a:	2800      	cmp	r0, #0
 800338c:	d10e      	bne.n	80033ac <MX_TIM1_Init+0xec>
  HAL_TIM_MspPostInit(&htim1);
 800338e:	4808      	ldr	r0, [pc, #32]	@ (80033b0 <MX_TIM1_Init+0xf0>)
 8003390:	f000 fb80 	bl	8003a94 <HAL_TIM_MspPostInit>
}
 8003394:	b01d      	add	sp, #116	@ 0x74
 8003396:	bd00      	pop	{pc}
    Error_Handler();
 8003398:	f7ff ff2c 	bl	80031f4 <Error_Handler>
    Error_Handler();
 800339c:	f7ff ff2a 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80033a0:	f7ff ff28 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80033a4:	f7ff ff26 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80033a8:	f7ff ff24 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80033ac:	f7ff ff22 	bl	80031f4 <Error_Handler>
 80033b0:	20000120 	.word	0x20000120
 80033b4:	40012c00 	.word	0x40012c00

080033b8 <MX_TIM3_Init>:
{
 80033b8:	b500      	push	{lr}
 80033ba:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033bc:	2210      	movs	r2, #16
 80033be:	2100      	movs	r1, #0
 80033c0:	a80a      	add	r0, sp, #40	@ 0x28
 80033c2:	f002 fcd0 	bl	8005d66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c6:	220c      	movs	r2, #12
 80033c8:	2100      	movs	r1, #0
 80033ca:	a807      	add	r0, sp, #28
 80033cc:	f002 fccb 	bl	8005d66 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d0:	221c      	movs	r2, #28
 80033d2:	2100      	movs	r1, #0
 80033d4:	4668      	mov	r0, sp
 80033d6:	f002 fcc6 	bl	8005d66 <memset>
  htim3.Instance = TIM3;
 80033da:	4822      	ldr	r0, [pc, #136]	@ (8003464 <MX_TIM3_Init+0xac>)
 80033dc:	4b22      	ldr	r3, [pc, #136]	@ (8003468 <MX_TIM3_Init+0xb0>)
 80033de:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 8-1;
 80033e0:	2307      	movs	r3, #7
 80033e2:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e4:	2300      	movs	r3, #0
 80033e6:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 80033e8:	4a20      	ldr	r2, [pc, #128]	@ (800346c <MX_TIM3_Init+0xb4>)
 80033ea:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ec:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033f0:	f002 f8b2 	bl	8005558 <HAL_TIM_Base_Init>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d12b      	bne.n	8003450 <MX_TIM3_Init+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	015b      	lsls	r3, r3, #5
 80033fc:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033fe:	4819      	ldr	r0, [pc, #100]	@ (8003464 <MX_TIM3_Init+0xac>)
 8003400:	a90a      	add	r1, sp, #40	@ 0x28
 8003402:	f002 fa59 	bl	80058b8 <HAL_TIM_ConfigClockSource>
 8003406:	2800      	cmp	r0, #0
 8003408:	d124      	bne.n	8003454 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800340a:	4816      	ldr	r0, [pc, #88]	@ (8003464 <MX_TIM3_Init+0xac>)
 800340c:	f002 f8d4 	bl	80055b8 <HAL_TIM_OC_Init>
 8003410:	2800      	cmp	r0, #0
 8003412:	d121      	bne.n	8003458 <MX_TIM3_Init+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003414:	2320      	movs	r3, #32
 8003416:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003418:	3360      	adds	r3, #96	@ 0x60
 800341a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800341c:	4811      	ldr	r0, [pc, #68]	@ (8003464 <MX_TIM3_Init+0xac>)
 800341e:	a907      	add	r1, sp, #28
 8003420:	f002 fc00 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8003424:	2800      	cmp	r0, #0
 8003426:	d119      	bne.n	800345c <MX_TIM3_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003428:	2330      	movs	r3, #48	@ 0x30
 800342a:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 1024;
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003432:	2300      	movs	r3, #0
 8003434:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003436:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003438:	480a      	ldr	r0, [pc, #40]	@ (8003464 <MX_TIM3_Init+0xac>)
 800343a:	2200      	movs	r2, #0
 800343c:	4669      	mov	r1, sp
 800343e:	f002 f957 	bl	80056f0 <HAL_TIM_OC_ConfigChannel>
 8003442:	2800      	cmp	r0, #0
 8003444:	d10c      	bne.n	8003460 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 8003446:	4807      	ldr	r0, [pc, #28]	@ (8003464 <MX_TIM3_Init+0xac>)
 8003448:	f000 fb24 	bl	8003a94 <HAL_TIM_MspPostInit>
}
 800344c:	b00f      	add	sp, #60	@ 0x3c
 800344e:	bd00      	pop	{pc}
    Error_Handler();
 8003450:	f7ff fed0 	bl	80031f4 <Error_Handler>
    Error_Handler();
 8003454:	f7ff fece 	bl	80031f4 <Error_Handler>
    Error_Handler();
 8003458:	f7ff fecc 	bl	80031f4 <Error_Handler>
    Error_Handler();
 800345c:	f7ff feca 	bl	80031f4 <Error_Handler>
    Error_Handler();
 8003460:	f7ff fec8 	bl	80031f4 <Error_Handler>
 8003464:	200000d4 	.word	0x200000d4
 8003468:	40000400 	.word	0x40000400
 800346c:	000003e7 	.word	0x000003e7

08003470 <MX_TIM14_Init>:
{
 8003470:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8003472:	4809      	ldr	r0, [pc, #36]	@ (8003498 <MX_TIM14_Init+0x28>)
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <MX_TIM14_Init+0x2c>)
 8003476:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 2999;
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <MX_TIM14_Init+0x30>)
 800347a:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347c:	2300      	movs	r3, #0
 800347e:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8003480:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <MX_TIM14_Init+0x34>)
 8003482:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003484:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003486:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003488:	f002 f866 	bl	8005558 <HAL_TIM_Base_Init>
 800348c:	2800      	cmp	r0, #0
 800348e:	d100      	bne.n	8003492 <MX_TIM14_Init+0x22>
}
 8003490:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003492:	f7ff feaf 	bl	80031f4 <Error_Handler>
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	20000088 	.word	0x20000088
 800349c:	40002000 	.word	0x40002000
 80034a0:	00000bb7 	.word	0x00000bb7
 80034a4:	000003e7 	.word	0x000003e7

080034a8 <SystemClock_Config>:
{
 80034a8:	b500      	push	{lr}
 80034aa:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ac:	221c      	movs	r2, #28
 80034ae:	2100      	movs	r1, #0
 80034b0:	a805      	add	r0, sp, #20
 80034b2:	f002 fc58 	bl	8005d66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b6:	2214      	movs	r2, #20
 80034b8:	2100      	movs	r1, #0
 80034ba:	4668      	mov	r0, sp
 80034bc:	f002 fc53 	bl	8005d66 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034c0:	2302      	movs	r3, #2
 80034c2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034c4:	33fe      	adds	r3, #254	@ 0xfe
 80034c6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034c8:	3bc0      	subs	r3, #192	@ 0xc0
 80034ca:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034cc:	a805      	add	r0, sp, #20
 80034ce:	f001 fadf 	bl	8004a90 <HAL_RCC_OscConfig>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d110      	bne.n	80034f8 <SystemClock_Config+0x50>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034d6:	2307      	movs	r3, #7
 80034d8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034da:	2300      	movs	r3, #0
 80034dc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80034de:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80034e0:	2290      	movs	r2, #144	@ 0x90
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80034e6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034e8:	2100      	movs	r1, #0
 80034ea:	4668      	mov	r0, sp
 80034ec:	f001 fc5e 	bl	8004dac <HAL_RCC_ClockConfig>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d103      	bne.n	80034fc <SystemClock_Config+0x54>
}
 80034f4:	b00d      	add	sp, #52	@ 0x34
 80034f6:	bd00      	pop	{pc}
    Error_Handler();
 80034f8:	f7ff fe7c 	bl	80031f4 <Error_Handler>
    Error_Handler();
 80034fc:	f7ff fe7a 	bl	80031f4 <Error_Handler>

08003500 <main>:
{
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	46c6      	mov	lr, r8
 8003504:	b500      	push	{lr}
 8003506:	b084      	sub	sp, #16
	current_index = 0.0f;
 8003508:	4acd      	ldr	r2, [pc, #820]	@ (8003840 <main+0x340>)
 800350a:	2300      	movs	r3, #0
 800350c:	8013      	strh	r3, [r2, #0]
	ntc = 0;
 800350e:	4acd      	ldr	r2, [pc, #820]	@ (8003844 <main+0x344>)
 8003510:	8013      	strh	r3, [r2, #0]
	duty_cycle_setpoint = 0;
 8003512:	4acd      	ldr	r2, [pc, #820]	@ (8003848 <main+0x348>)
 8003514:	8013      	strh	r3, [r2, #0]
	duty_cycle = 1;
 8003516:	49cd      	ldr	r1, [pc, #820]	@ (800384c <main+0x34c>)
 8003518:	2201      	movs	r2, #1
 800351a:	800a      	strh	r2, [r1, #0]
	MCU_temperature = 0;
 800351c:	4acc      	ldr	r2, [pc, #816]	@ (8003850 <main+0x350>)
 800351e:	8013      	strh	r3, [r2, #0]
	temp = 0;
 8003520:	4acc      	ldr	r2, [pc, #816]	@ (8003854 <main+0x354>)
 8003522:	8013      	strh	r3, [r2, #0]
	cs0 = 0;
 8003524:	4acc      	ldr	r2, [pc, #816]	@ (8003858 <main+0x358>)
 8003526:	8013      	strh	r3, [r2, #0]
	cs1 = 0;
 8003528:	4acc      	ldr	r2, [pc, #816]	@ (800385c <main+0x35c>)
 800352a:	8013      	strh	r3, [r2, #0]
	cs2 = 0;
 800352c:	4acc      	ldr	r2, [pc, #816]	@ (8003860 <main+0x360>)
 800352e:	8013      	strh	r3, [r2, #0]
	state = STANDBY;
 8003530:	4acc      	ldr	r2, [pc, #816]	@ (8003864 <main+0x364>)
 8003532:	2000      	movs	r0, #0
 8003534:	7010      	strb	r0, [r2, #0]
	uint16_t max_current[8] = {
 8003536:	4668      	mov	r0, sp
 8003538:	4acb      	ldr	r2, [pc, #812]	@ (8003868 <main+0x368>)
 800353a:	cae0      	ldmia	r2!, {r5, r6, r7}
 800353c:	c0e0      	stmia	r0!, {r5, r6, r7}
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	6002      	str	r2, [r0, #0]
	duty_cycle = 0;
 8003542:	800b      	strh	r3, [r1, #0]
  HAL_Init();
 8003544:	f000 fb6c 	bl	8003c20 <HAL_Init>
  SystemClock_Config();
 8003548:	f7ff ffae 	bl	80034a8 <SystemClock_Config>
  MX_GPIO_Init();
 800354c:	f7ff fd98 	bl	8003080 <MX_GPIO_Init>
  MX_DMA_Init();
 8003550:	f7ff fdc4 	bl	80030dc <MX_DMA_Init>
  MX_ADC1_Init();
 8003554:	f7ff fe50 	bl	80031f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003558:	f7ff feb2 	bl	80032c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800355c:	f7ff ff2c 	bl	80033b8 <MX_TIM3_Init>
  MX_TIM14_Init();
 8003560:	f7ff ff86 	bl	8003470 <MX_TIM14_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8003564:	4cc1      	ldr	r4, [pc, #772]	@ (800386c <main+0x36c>)
 8003566:	0020      	movs	r0, r4
 8003568:	f001 fece 	bl	8005308 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 800356c:	2100      	movs	r1, #0
 800356e:	0020      	movs	r0, r4
 8003570:	f002 fa34 	bl	80059dc <HAL_TIM_OC_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 8003574:	4cbe      	ldr	r4, [pc, #760]	@ (8003870 <main+0x370>)
 8003576:	0020      	movs	r0, r4
 8003578:	f001 fec6 	bl	8005308 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start(&htim14, TIM_CHANNEL_1);
 800357c:	2100      	movs	r1, #0
 800357e:	0020      	movs	r0, r4
 8003580:	f002 fa2c 	bl	80059dc <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003584:	48bb      	ldr	r0, [pc, #748]	@ (8003874 <main+0x374>)
 8003586:	2100      	movs	r1, #0
 8003588:	f002 faba 	bl	8005b00 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, ADC_BUF_LEN);
 800358c:	49ba      	ldr	r1, [pc, #744]	@ (8003878 <main+0x378>)
 800358e:	48bb      	ldr	r0, [pc, #748]	@ (800387c <main+0x37c>)
 8003590:	2203      	movs	r2, #3
 8003592:	f000 fea7 	bl	80042e4 <HAL_ADC_Start_DMA>
 8003596:	e045      	b.n	8003624 <main+0x124>
			 		otp_duty_setpoint = duty_cycle_setpoint;
 8003598:	4bb9      	ldr	r3, [pc, #740]	@ (8003880 <main+0x380>)
 800359a:	4aab      	ldr	r2, [pc, #684]	@ (8003848 <main+0x348>)
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	801a      	strh	r2, [r3, #0]
			 		otp_flag = 0;
 80035a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003884 <main+0x384>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	801a      	strh	r2, [r3, #0]
			 		otp_circ_buf_ptr = 0;
 80035a6:	4bb8      	ldr	r3, [pc, #736]	@ (8003888 <main+0x388>)
 80035a8:	801a      	strh	r2, [r3, #0]
 80035aa:	e118      	b.n	80037de <main+0x2de>
			 		 derated_value = (otp_duty_setpoint * percent_derating);
 80035ac:	4bb4      	ldr	r3, [pc, #720]	@ (8003880 <main+0x380>)
 80035ae:	8818      	ldrh	r0, [r3, #0]
 80035b0:	f7fd fd56 	bl	8001060 <__aeabi_i2f>
 80035b4:	4bb5      	ldr	r3, [pc, #724]	@ (800388c <main+0x38c>)
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	f7fd fa50 	bl	8000a5c <__aeabi_fmul>
 80035bc:	4ab4      	ldr	r2, [pc, #720]	@ (8003890 <main+0x390>)
 80035be:	6010      	str	r0, [r2, #0]
			 		 otp_sum -=  otp_circ_buf[otp_circ_buf_ptr];
 80035c0:	4db1      	ldr	r5, [pc, #708]	@ (8003888 <main+0x388>)
 80035c2:	882b      	ldrh	r3, [r5, #0]
 80035c4:	4fb3      	ldr	r7, [pc, #716]	@ (8003894 <main+0x394>)
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	59d9      	ldr	r1, [r3, r7]
 80035ca:	4eb3      	ldr	r6, [pc, #716]	@ (8003898 <main+0x398>)
 80035cc:	6833      	ldr	r3, [r6, #0]
 80035ce:	1a5b      	subs	r3, r3, r1
 80035d0:	6033      	str	r3, [r6, #0]
			 		 otp_circ_buf[otp_circ_buf_ptr] = derated_value;
 80035d2:	6810      	ldr	r0, [r2, #0]
 80035d4:	882b      	ldrh	r3, [r5, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4698      	mov	r8, r3
 80035da:	f7fc fe99 	bl	8000310 <__aeabi_f2uiz>
 80035de:	4643      	mov	r3, r8
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	51d8      	str	r0, [r3, r7]
			 		 otp_sum += otp_circ_buf[otp_circ_buf_ptr++];
 80035e4:	882b      	ldrh	r3, [r5, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	b292      	uxth	r2, r2
 80035ea:	802a      	strh	r2, [r5, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	59da      	ldr	r2, [r3, r7]
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	6033      	str	r3, [r6, #0]
			 		 otp_circ_buf_ptr %= N(K);
 80035f6:	882b      	ldrh	r3, [r5, #0]
 80035f8:	2207      	movs	r2, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	802b      	strh	r3, [r5, #0]
			 		 otp_duty_filt = (uint16_t)(otp_sum >> K);
 80035fe:	6833      	ldr	r3, [r6, #0]
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	b29b      	uxth	r3, r3
 8003604:	4aa5      	ldr	r2, [pc, #660]	@ (800389c <main+0x39c>)
 8003606:	8013      	strh	r3, [r2, #0]
			 		 duty_cycle_setpoint = otp_duty_filt;
 8003608:	4a8f      	ldr	r2, [pc, #572]	@ (8003848 <main+0x348>)
 800360a:	8013      	strh	r3, [r2, #0]
			 TIM1->CCR1 = duty_cycle_setpoint;   //Timer1 period is 8192
 800360c:	4b8e      	ldr	r3, [pc, #568]	@ (8003848 <main+0x348>)
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	4ba3      	ldr	r3, [pc, #652]	@ (80038a0 <main+0x3a0>)
 8003612:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  switch (state)
 8003614:	4b93      	ldr	r3, [pc, #588]	@ (8003864 <main+0x364>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d100      	bne.n	800361e <main+0x11e>
 800361c:	e0f5      	b.n	800380a <main+0x30a>
 800361e:	2b02      	cmp	r3, #2
 8003620:	d100      	bne.n	8003624 <main+0x124>
 8003622:	e108      	b.n	8003836 <main+0x336>
	  	  dim_adc = adcResultsDMA[0];
 8003624:	4b94      	ldr	r3, [pc, #592]	@ (8003878 <main+0x378>)
 8003626:	881f      	ldrh	r7, [r3, #0]
 8003628:	4a9e      	ldr	r2, [pc, #632]	@ (80038a4 <main+0x3a4>)
 800362a:	8017      	strh	r7, [r2, #0]
	  	  ntc_adc = adcResultsDMA[1];
 800362c:	885b      	ldrh	r3, [r3, #2]
 800362e:	4698      	mov	r8, r3
 8003630:	4b9d      	ldr	r3, [pc, #628]	@ (80038a8 <main+0x3a8>)
 8003632:	4642      	mov	r2, r8
 8003634:	801a      	strh	r2, [r3, #0]
	  	  dim_sum -= dim_circ_buf[circ_buf_ptr]; // Subtract the oldest value from the sum.
 8003636:	4b9d      	ldr	r3, [pc, #628]	@ (80038ac <main+0x3ac>)
 8003638:	8819      	ldrh	r1, [r3, #0]
 800363a:	4a9d      	ldr	r2, [pc, #628]	@ (80038b0 <main+0x3b0>)
 800363c:	0089      	lsls	r1, r1, #2
 800363e:	588c      	ldr	r4, [r1, r2]
 8003640:	489c      	ldr	r0, [pc, #624]	@ (80038b4 <main+0x3b4>)
 8003642:	6801      	ldr	r1, [r0, #0]
 8003644:	1b09      	subs	r1, r1, r4
 8003646:	6001      	str	r1, [r0, #0]
	  	  ntc_sum -= ntc_circ_buf[circ_buf_ptr]; // Subtract the oldest value from the sum.
 8003648:	8819      	ldrh	r1, [r3, #0]
 800364a:	4c9b      	ldr	r4, [pc, #620]	@ (80038b8 <main+0x3b8>)
 800364c:	0089      	lsls	r1, r1, #2
 800364e:	5909      	ldr	r1, [r1, r4]
 8003650:	468c      	mov	ip, r1
 8003652:	499a      	ldr	r1, [pc, #616]	@ (80038bc <main+0x3bc>)
 8003654:	680d      	ldr	r5, [r1, #0]
 8003656:	4666      	mov	r6, ip
 8003658:	1bad      	subs	r5, r5, r6
 800365a:	600d      	str	r5, [r1, #0]
	  	  dim_circ_buf[circ_buf_ptr] = dim_adc; // Place the input in the filter register.
 800365c:	881d      	ldrh	r5, [r3, #0]
 800365e:	00ad      	lsls	r5, r5, #2
 8003660:	50af      	str	r7, [r5, r2]
	  	  ntc_circ_buf[circ_buf_ptr] = ntc_adc; // Place the input in the filter register.
 8003662:	881d      	ldrh	r5, [r3, #0]
 8003664:	00ad      	lsls	r5, r5, #2
 8003666:	4646      	mov	r6, r8
 8003668:	512e      	str	r6, [r5, r4]
	  	  dim_sum += dim_circ_buf[circ_buf_ptr]; // Add the newest value to the sum.
 800366a:	881d      	ldrh	r5, [r3, #0]
 800366c:	00ad      	lsls	r5, r5, #2
 800366e:	58ad      	ldr	r5, [r5, r2]
 8003670:	6802      	ldr	r2, [r0, #0]
 8003672:	1952      	adds	r2, r2, r5
 8003674:	6002      	str	r2, [r0, #0]
	  	  ntc_sum += ntc_circ_buf[circ_buf_ptr++]; // Add the newest value to the sum.
 8003676:	881a      	ldrh	r2, [r3, #0]
 8003678:	1c55      	adds	r5, r2, #1
 800367a:	b2ad      	uxth	r5, r5
 800367c:	801d      	strh	r5, [r3, #0]
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	5914      	ldr	r4, [r2, r4]
 8003682:	680a      	ldr	r2, [r1, #0]
 8003684:	1912      	adds	r2, r2, r4
 8003686:	600a      	str	r2, [r1, #0]
	  	  circ_buf_ptr %= N(K); // Increment the buffer keeping it in the range 0 to N-1;
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	2407      	movs	r4, #7
 800368c:	4022      	ands	r2, r4
 800368e:	801a      	strh	r2, [r3, #0]
	  	  dim_filt = (uint16_t)(dim_sum >> K);
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	08db      	lsrs	r3, r3, #3
 8003694:	b29b      	uxth	r3, r3
 8003696:	4a8a      	ldr	r2, [pc, #552]	@ (80038c0 <main+0x3c0>)
 8003698:	8013      	strh	r3, [r2, #0]
	  	  ntc_filt = (uint16_t)(ntc_sum >> K);
 800369a:	680a      	ldr	r2, [r1, #0]
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4989      	ldr	r1, [pc, #548]	@ (80038c4 <main+0x3c4>)
 80036a0:	800a      	strh	r2, [r1, #0]
	  	  temp = dim_filt;
 80036a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003854 <main+0x354>)
 80036a4:	8013      	strh	r3, [r2, #0]
		  if (dim_filt < 870)
 80036a6:	4a88      	ldr	r2, [pc, #544]	@ (80038c8 <main+0x3c8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d802      	bhi.n	80036b2 <main+0x1b2>
			  dim_filt = 0;
 80036ac:	4b84      	ldr	r3, [pc, #528]	@ (80038c0 <main+0x3c0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	801a      	strh	r2, [r3, #0]
		  if (dim_filt != 0)
 80036b2:	4b83      	ldr	r3, [pc, #524]	@ (80038c0 <main+0x3c0>)
 80036b4:	8818      	ldrh	r0, [r3, #0]
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d00e      	beq.n	80036d8 <main+0x1d8>
		  dim_filt = dim_filt - 870; //Offset due to 1k resistor and 0.5mA current source
 80036ba:	4b84      	ldr	r3, [pc, #528]	@ (80038cc <main+0x3cc>)
 80036bc:	469c      	mov	ip, r3
 80036be:	4460      	add	r0, ip
 80036c0:	b280      	uxth	r0, r0
 80036c2:	4c7f      	ldr	r4, [pc, #508]	@ (80038c0 <main+0x3c0>)
 80036c4:	8020      	strh	r0, [r4, #0]
		  dim_filt = dim_filt * 1.27;// set slope
 80036c6:	f7ff fbc3 	bl	8002e50 <__aeabi_i2d>
 80036ca:	4a81      	ldr	r2, [pc, #516]	@ (80038d0 <main+0x3d0>)
 80036cc:	4b81      	ldr	r3, [pc, #516]	@ (80038d4 <main+0x3d4>)
 80036ce:	f7fe fcfd 	bl	80020cc <__aeabi_dmul>
 80036d2:	f7fc fe35 	bl	8000340 <__aeabi_d2uiz>
 80036d6:	8020      	strh	r0, [r4, #0]
		  if (dim_filt > 4095){
 80036d8:	4b79      	ldr	r3, [pc, #484]	@ (80038c0 <main+0x3c0>)
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <main+0x1ea>
			  dim_filt = 4095;
 80036e4:	4b76      	ldr	r3, [pc, #472]	@ (80038c0 <main+0x3c0>)
 80036e6:	4a7c      	ldr	r2, [pc, #496]	@ (80038d8 <main+0x3d8>)
 80036e8:	801a      	strh	r2, [r3, #0]
		  dim_setpoint = dim_filt;
 80036ea:	4c7c      	ldr	r4, [pc, #496]	@ (80038dc <main+0x3dc>)
 80036ec:	4b74      	ldr	r3, [pc, #464]	@ (80038c0 <main+0x3c0>)
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	8023      	strh	r3, [r4, #0]
		  MCU_temperature = adcResultsDMA[2];
 80036f2:	4961      	ldr	r1, [pc, #388]	@ (8003878 <main+0x378>)
 80036f4:	888a      	ldrh	r2, [r1, #4]
 80036f6:	4b56      	ldr	r3, [pc, #344]	@ (8003850 <main+0x350>)
 80036f8:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, ADC_BUF_LEN);
 80036fa:	4860      	ldr	r0, [pc, #384]	@ (800387c <main+0x37c>)
 80036fc:	2203      	movs	r2, #3
 80036fe:	f000 fdf1 	bl	80042e4 <HAL_ADC_Start_DMA>
		  cs0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8003702:	26a0      	movs	r6, #160	@ 0xa0
 8003704:	05f6      	lsls	r6, r6, #23
 8003706:	2108      	movs	r1, #8
 8003708:	0030      	movs	r0, r6
 800370a:	f001 f9ab 	bl	8004a64 <HAL_GPIO_ReadPin>
 800370e:	4d52      	ldr	r5, [pc, #328]	@ (8003858 <main+0x358>)
 8003710:	8028      	strh	r0, [r5, #0]
		  cs1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8003712:	2104      	movs	r1, #4
 8003714:	0030      	movs	r0, r6
 8003716:	f001 f9a5 	bl	8004a64 <HAL_GPIO_ReadPin>
 800371a:	4f50      	ldr	r7, [pc, #320]	@ (800385c <main+0x35c>)
 800371c:	8038      	strh	r0, [r7, #0]
		  cs2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800371e:	2102      	movs	r1, #2
 8003720:	0030      	movs	r0, r6
 8003722:	f001 f99f 	bl	8004a64 <HAL_GPIO_ReadPin>
 8003726:	4b4e      	ldr	r3, [pc, #312]	@ (8003860 <main+0x360>)
 8003728:	8018      	strh	r0, [r3, #0]
		  current_index = (cs2<<2) + (cs1<<1) + cs0;
 800372a:	0083      	lsls	r3, r0, #2
 800372c:	b29b      	uxth	r3, r3
 800372e:	883a      	ldrh	r2, [r7, #0]
 8003730:	0052      	lsls	r2, r2, #1
 8003732:	b292      	uxth	r2, r2
 8003734:	189b      	adds	r3, r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	882a      	ldrh	r2, [r5, #0]
 800373a:	189b      	adds	r3, r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	4a40      	ldr	r2, [pc, #256]	@ (8003840 <main+0x340>)
 8003740:	8013      	strh	r3, [r2, #0]
	  	  duty_cycle = max_current[current_index] * dim_setpoint; //Timer1 period is 8192
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	466a      	mov	r2, sp
 8003746:	5a9b      	ldrh	r3, [r3, r2]
 8003748:	8824      	ldrh	r4, [r4, #0]
 800374a:	435c      	muls	r4, r3
 800374c:	b2a4      	uxth	r4, r4
 800374e:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <main+0x34c>)
 8003750:	801c      	strh	r4, [r3, #0]
			 if ((duty_cycle_setpoint <= duty_cycle) && (ntc_temp < START_DERATING))
 8003752:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <main+0x348>)
 8003754:	881d      	ldrh	r5, [r3, #0]
 8003756:	42ac      	cmp	r4, r5
 8003758:	d313      	bcc.n	8003782 <main+0x282>
 800375a:	4b61      	ldr	r3, [pc, #388]	@ (80038e0 <main+0x3e0>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	4961      	ldr	r1, [pc, #388]	@ (80038e4 <main+0x3e4>)
 8003760:	f7fc fdae 	bl	80002c0 <__aeabi_fcmplt>
 8003764:	2800      	cmp	r0, #0
 8003766:	d00c      	beq.n	8003782 <main+0x282>
				 duty_cycle_setpoint++;
 8003768:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <main+0x348>)
 800376a:	3501      	adds	r5, #1
 800376c:	801d      	strh	r5, [r3, #0]
				 percent_derating = 1;
 800376e:	4b47      	ldr	r3, [pc, #284]	@ (800388c <main+0x38c>)
 8003770:	22fe      	movs	r2, #254	@ 0xfe
 8003772:	0592      	lsls	r2, r2, #22
 8003774:	601a      	str	r2, [r3, #0]
				 otp_flag = 1;
 8003776:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <main+0x384>)
 8003778:	2201      	movs	r2, #1
 800377a:	801a      	strh	r2, [r3, #0]
				 otp_sum = 0;
 800377c:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <main+0x398>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
			 if ((duty_cycle_setpoint > duty_cycle) && (ntc_temp < START_DERATING))
 8003782:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <main+0x348>)
 8003784:	881d      	ldrh	r5, [r3, #0]
 8003786:	42ac      	cmp	r4, r5
 8003788:	d213      	bcs.n	80037b2 <main+0x2b2>
 800378a:	4b55      	ldr	r3, [pc, #340]	@ (80038e0 <main+0x3e0>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	4955      	ldr	r1, [pc, #340]	@ (80038e4 <main+0x3e4>)
 8003790:	f7fc fd96 	bl	80002c0 <__aeabi_fcmplt>
 8003794:	2800      	cmp	r0, #0
 8003796:	d00c      	beq.n	80037b2 <main+0x2b2>
			 	 duty_cycle_setpoint--;
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <main+0x348>)
 800379a:	3d01      	subs	r5, #1
 800379c:	801d      	strh	r5, [r3, #0]
			 	percent_derating = 1;
 800379e:	4b3b      	ldr	r3, [pc, #236]	@ (800388c <main+0x38c>)
 80037a0:	22fe      	movs	r2, #254	@ 0xfe
 80037a2:	0592      	lsls	r2, r2, #22
 80037a4:	601a      	str	r2, [r3, #0]
			 	otp_flag = 1;
 80037a6:	4b37      	ldr	r3, [pc, #220]	@ (8003884 <main+0x384>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	801a      	strh	r2, [r3, #0]
			 	otp_sum = 0;
 80037ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003898 <main+0x398>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
			 if (ntc_temp > START_DERATING && ntc_temp < STOP_DERATING)
 80037b2:	4b4b      	ldr	r3, [pc, #300]	@ (80038e0 <main+0x3e0>)
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	494b      	ldr	r1, [pc, #300]	@ (80038e4 <main+0x3e4>)
 80037b8:	f7fc fd96 	bl	80002e8 <__aeabi_fcmpgt>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d100      	bne.n	80037c2 <main+0x2c2>
 80037c0:	e724      	b.n	800360c <main+0x10c>
 80037c2:	4b47      	ldr	r3, [pc, #284]	@ (80038e0 <main+0x3e0>)
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	4948      	ldr	r1, [pc, #288]	@ (80038e8 <main+0x3e8>)
 80037c8:	f7fc fd7a 	bl	80002c0 <__aeabi_fcmplt>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d100      	bne.n	80037d2 <main+0x2d2>
 80037d0:	e71c      	b.n	800360c <main+0x10c>
				 if (otp_flag == 1)
 80037d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003884 <main+0x384>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d100      	bne.n	80037de <main+0x2de>
 80037dc:	e6dc      	b.n	8003598 <main+0x98>
			 	 percent_derating = (ntc_temp * ORDINATE) + ABSCISSA;
 80037de:	4b40      	ldr	r3, [pc, #256]	@ (80038e0 <main+0x3e0>)
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	4942      	ldr	r1, [pc, #264]	@ (80038ec <main+0x3ec>)
 80037e4:	f7fd f93a 	bl	8000a5c <__aeabi_fmul>
 80037e8:	4941      	ldr	r1, [pc, #260]	@ (80038f0 <main+0x3f0>)
 80037ea:	f7fc fdc7 	bl	800037c <__aeabi_fadd>
 80037ee:	4b27      	ldr	r3, [pc, #156]	@ (800388c <main+0x38c>)
 80037f0:	6018      	str	r0, [r3, #0]
			 	 if (percent_derating > 1) percent_derating = 1;
 80037f2:	21fe      	movs	r1, #254	@ 0xfe
 80037f4:	0589      	lsls	r1, r1, #22
 80037f6:	f7fc fd77 	bl	80002e8 <__aeabi_fcmpgt>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d100      	bne.n	8003800 <main+0x300>
 80037fe:	e6d5      	b.n	80035ac <main+0xac>
 8003800:	4b22      	ldr	r3, [pc, #136]	@ (800388c <main+0x38c>)
 8003802:	22fe      	movs	r2, #254	@ 0xfe
 8003804:	0592      	lsls	r2, r2, #22
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e6d0      	b.n	80035ac <main+0xac>
	  	           if (softstart < 9){
 800380a:	4b3a      	ldr	r3, [pc, #232]	@ (80038f4 <main+0x3f4>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b08      	cmp	r3, #8
 8003812:	d801      	bhi.n	8003818 <main+0x318>
	  	            duty_cycle_setpoint = duty_cycle;
 8003814:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <main+0x348>)
 8003816:	801c      	strh	r4, [r3, #0]
	  	           if (softstart == 9){
 8003818:	4b36      	ldr	r3, [pc, #216]	@ (80038f4 <main+0x3f4>)
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b09      	cmp	r3, #9
 8003820:	d005      	beq.n	800382e <main+0x32e>
	  	           ++softstart;
 8003822:	4a34      	ldr	r2, [pc, #208]	@ (80038f4 <main+0x3f4>)
 8003824:	8813      	ldrh	r3, [r2, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	b29b      	uxth	r3, r3
 800382a:	8013      	strh	r3, [r2, #0]
	  	            break;
 800382c:	e6fa      	b.n	8003624 <main+0x124>
	  	           	state = RUNNING;
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <main+0x364>)
 8003830:	2202      	movs	r2, #2
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e7f5      	b.n	8003822 <main+0x322>
	  	            	softstart = 0;
 8003836:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <main+0x3f4>)
 8003838:	2200      	movs	r2, #0
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e6f2      	b.n	8003624 <main+0x124>
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	200002d0 	.word	0x200002d0
 8003844:	200002c8 	.word	0x200002c8
 8003848:	200002cc 	.word	0x200002cc
 800384c:	200002ce 	.word	0x200002ce
 8003850:	200002c6 	.word	0x200002c6
 8003854:	200002c4 	.word	0x200002c4
 8003858:	200002c2 	.word	0x200002c2
 800385c:	200002c0 	.word	0x200002c0
 8003860:	200002be 	.word	0x200002be
 8003864:	2000022c 	.word	0x2000022c
 8003868:	080061c0 	.word	0x080061c0
 800386c:	200000d4 	.word	0x200000d4
 8003870:	20000088 	.word	0x20000088
 8003874:	20000120 	.word	0x20000120
 8003878:	20000080 	.word	0x20000080
 800387c:	200001c8 	.word	0x200001c8
 8003880:	200002bc 	.word	0x200002bc
 8003884:	20000000 	.word	0x20000000
 8003888:	2000024c 	.word	0x2000024c
 800388c:	20000230 	.word	0x20000230
 8003890:	20000234 	.word	0x20000234
 8003894:	2000025c 	.word	0x2000025c
 8003898:	20000250 	.word	0x20000250
 800389c:	200002ca 	.word	0x200002ca
 80038a0:	40012c00 	.word	0x40012c00
 80038a4:	200002d6 	.word	0x200002d6
 80038a8:	200002d4 	.word	0x200002d4
 80038ac:	2000024e 	.word	0x2000024e
 80038b0:	2000029c 	.word	0x2000029c
 80038b4:	20000258 	.word	0x20000258
 80038b8:	2000027c 	.word	0x2000027c
 80038bc:	20000254 	.word	0x20000254
 80038c0:	200002da 	.word	0x200002da
 80038c4:	200002d8 	.word	0x200002d8
 80038c8:	00000365 	.word	0x00000365
 80038cc:	fffffc9a 	.word	0xfffffc9a
 80038d0:	851eb852 	.word	0x851eb852
 80038d4:	3ff451eb 	.word	0x3ff451eb
 80038d8:	00000fff 	.word	0x00000fff
 80038dc:	200002d2 	.word	0x200002d2
 80038e0:	20000248 	.word	0x20000248
 80038e4:	42700000 	.word	0x42700000
 80038e8:	42a00000 	.word	0x42a00000
 80038ec:	bcd91687 	.word	0xbcd91687
 80038f0:	4029999a 	.word	0x4029999a
 80038f4:	20000238 	.word	0x20000238

080038f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b500      	push	{lr}
 80038fa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <HAL_MspInit+0x38>)
 80038fe:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003900:	2201      	movs	r2, #1
 8003902:	4311      	orrs	r1, r2
 8003904:	6419      	str	r1, [r3, #64]	@ 0x40
 8003906:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003908:	400a      	ands	r2, r1
 800390a:	9200      	str	r2, [sp, #0]
 800390c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	0549      	lsls	r1, r1, #21
 8003914:	430a      	orrs	r2, r1
 8003916:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	400b      	ands	r3, r1
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8003920:	2002      	movs	r0, #2
 8003922:	2200      	movs	r2, #0
 8003924:	2101      	movs	r1, #1
 8003926:	4240      	negs	r0, r0
 8003928:	f000 fe0e 	bl	8004548 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800392c:	b003      	add	sp, #12
 800392e:	bd00      	pop	{pc}
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003934:	b530      	push	{r4, r5, lr}
 8003936:	b08f      	sub	sp, #60	@ 0x3c
 8003938:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393a:	2214      	movs	r2, #20
 800393c:	2100      	movs	r1, #0
 800393e:	a809      	add	r0, sp, #36	@ 0x24
 8003940:	f002 fa11 	bl	8005d66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003944:	221c      	movs	r2, #28
 8003946:	2100      	movs	r1, #0
 8003948:	a802      	add	r0, sp, #8
 800394a:	f002 fa0c 	bl	8005d66 <memset>
  if(hadc->Instance==ADC1)
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_ADC_MspInit+0xb4>)
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003956:	b00f      	add	sp, #60	@ 0x3c
 8003958:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	01db      	lsls	r3, r3, #7
 800395e:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003960:	a802      	add	r0, sp, #8
 8003962:	f001 faeb 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 8003966:	2800      	cmp	r0, #0
 8003968:	d137      	bne.n	80039da <HAL_ADC_MspInit+0xa6>
    __HAL_RCC_ADC_CLK_ENABLE();
 800396a:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <HAL_ADC_MspInit+0xb8>)
 800396c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	0349      	lsls	r1, r1, #13
 8003972:	430a      	orrs	r2, r1
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
 8003976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003978:	400a      	ands	r2, r1
 800397a:	9200      	str	r2, [sp, #0]
 800397c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003980:	2201      	movs	r2, #1
 8003982:	4311      	orrs	r1, r2
 8003984:	6359      	str	r1, [r3, #52]	@ 0x34
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	401a      	ands	r2, r3
 800398a:	9201      	str	r2, [sp, #4]
 800398c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = NTC_Pin|DIM_Pin;
 800398e:	23c0      	movs	r3, #192	@ 0xc0
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003994:	3b7e      	subs	r3, #126	@ 0x7e
 8003996:	3bff      	subs	r3, #255	@ 0xff
 8003998:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2500      	movs	r5, #0
 800399c:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	20a0      	movs	r0, #160	@ 0xa0
 80039a0:	a909      	add	r1, sp, #36	@ 0x24
 80039a2:	05c0      	lsls	r0, r0, #23
 80039a4:	f000 ff86 	bl	80048b4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80039a8:	4811      	ldr	r0, [pc, #68]	@ (80039f0 <HAL_ADC_MspInit+0xbc>)
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_ADC_MspInit+0xc0>)
 80039ac:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80039ae:	2305      	movs	r3, #5
 80039b0:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039b2:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b4:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80039b6:	337b      	adds	r3, #123	@ 0x7b
 80039b8:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039ba:	3380      	adds	r3, #128	@ 0x80
 80039bc:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80039c4:	2320      	movs	r3, #32
 80039c6:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80039c8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039ca:	f000 fe25 	bl	8004618 <HAL_DMA_Init>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_ADC_MspInit+0xbc>)
 80039d4:	6523      	str	r3, [r4, #80]	@ 0x50
 80039d6:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80039d8:	e7bd      	b.n	8003956 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80039da:	f7ff fc0b 	bl	80031f4 <Error_Handler>
 80039de:	e7c4      	b.n	800396a <HAL_ADC_MspInit+0x36>
      Error_Handler();
 80039e0:	f7ff fc08 	bl	80031f4 <Error_Handler>
 80039e4:	e7f5      	b.n	80039d2 <HAL_ADC_MspInit+0x9e>
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	40012400 	.word	0x40012400
 80039ec:	40021000 	.word	0x40021000
 80039f0:	2000016c 	.word	0x2000016c
 80039f4:	40020008 	.word	0x40020008

080039f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039f8:	b500      	push	{lr}
 80039fa:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 80039fc:	6803      	ldr	r3, [r0, #0]
 80039fe:	4a21      	ldr	r2, [pc, #132]	@ (8003a84 <HAL_TIM_Base_MspInit+0x8c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003a04:	4a20      	ldr	r2, [pc, #128]	@ (8003a88 <HAL_TIM_Base_MspInit+0x90>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d017      	beq.n	8003a3a <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8003a0a:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <HAL_TIM_Base_MspInit+0x94>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d026      	beq.n	8003a5e <HAL_TIM_Base_MspInit+0x66>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003a10:	b005      	add	sp, #20
 8003a12:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a14:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <HAL_TIM_Base_MspInit+0x98>)
 8003a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a18:	2180      	movs	r1, #128	@ 0x80
 8003a1a:	0109      	lsls	r1, r1, #4
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	400b      	ands	r3, r1
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	200e      	movs	r0, #14
 8003a2e:	f000 fd8b 	bl	8004548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003a32:	200e      	movs	r0, #14
 8003a34:	f000 fd8c 	bl	8004550 <HAL_NVIC_EnableIRQ>
 8003a38:	e7ea      	b.n	8003a10 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a3a:	4a15      	ldr	r2, [pc, #84]	@ (8003a90 <HAL_TIM_Base_MspInit+0x98>)
 8003a3c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003a3e:	2302      	movs	r3, #2
 8003a40:	4319      	orrs	r1, r3
 8003a42:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8003a44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a46:	4013      	ands	r3, r2
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2010      	movs	r0, #16
 8003a52:	f000 fd79 	bl	8004548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a56:	2010      	movs	r0, #16
 8003a58:	f000 fd7a 	bl	8004550 <HAL_NVIC_EnableIRQ>
 8003a5c:	e7d8      	b.n	8003a10 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_TIM_Base_MspInit+0x98>)
 8003a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	0209      	lsls	r1, r1, #8
 8003a66:	430a      	orrs	r2, r1
 8003a68:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2102      	movs	r1, #2
 8003a76:	2013      	movs	r0, #19
 8003a78:	f000 fd66 	bl	8004548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003a7c:	2013      	movs	r0, #19
 8003a7e:	f000 fd67 	bl	8004550 <HAL_NVIC_EnableIRQ>
}
 8003a82:	e7c5      	b.n	8003a10 <HAL_TIM_Base_MspInit+0x18>
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40002000 	.word	0x40002000
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a94:	b510      	push	{r4, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9a:	2214      	movs	r2, #20
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	a803      	add	r0, sp, #12
 8003aa0:	f002 f961 	bl	8005d66 <memset>
  if(htim->Instance==TIM1)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_TIM_MspPostInit+0x74>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003aac:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_TIM_MspPostInit+0x78>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d015      	beq.n	8003ade <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ab2:	b008      	add	sp, #32
 8003ab4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	4a16      	ldr	r2, [pc, #88]	@ (8003b10 <HAL_TIM_MspPostInit+0x7c>)
 8003ab8:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003aba:	2301      	movs	r3, #1
 8003abc:	4319      	orrs	r1, r3
 8003abe:	6351      	str	r1, [r2, #52]	@ 0x34
 8003ac0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	9201      	str	r2, [sp, #4]
 8003ac6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ac8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	3301      	adds	r3, #1
 8003acc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8003ace:	3303      	adds	r3, #3
 8003ad0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad2:	20a0      	movs	r0, #160	@ 0xa0
 8003ad4:	a903      	add	r1, sp, #12
 8003ad6:	05c0      	lsls	r0, r0, #23
 8003ad8:	f000 feec 	bl	80048b4 <HAL_GPIO_Init>
 8003adc:	e7e9      	b.n	8003ab2 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	4a0c      	ldr	r2, [pc, #48]	@ (8003b10 <HAL_TIM_MspPostInit+0x7c>)
 8003ae0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4319      	orrs	r1, r3
 8003ae6:	6351      	str	r1, [r2, #52]	@ 0x34
 8003ae8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003aea:	401a      	ands	r2, r3
 8003aec:	9202      	str	r2, [sp, #8]
 8003aee:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003af0:	2240      	movs	r2, #64	@ 0x40
 8003af2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	3a3e      	subs	r2, #62	@ 0x3e
 8003af6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003af8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	20a0      	movs	r0, #160	@ 0xa0
 8003afc:	a903      	add	r1, sp, #12
 8003afe:	05c0      	lsls	r0, r0, #23
 8003b00:	f000 fed8 	bl	80048b4 <HAL_GPIO_Init>
}
 8003b04:	e7d5      	b.n	8003ab2 <HAL_TIM_MspPostInit+0x1e>
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40021000 	.word	0x40021000

08003b14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b14:	e7fe      	b.n	8003b14 <NMI_Handler>

08003b16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <HardFault_Handler>

08003b18 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b18:	4770      	bx	lr

08003b1a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b1a:	4770      	bx	lr

08003b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b1e:	f000 f88b 	bl	8003c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b26:	4802      	ldr	r0, [pc, #8]	@ (8003b30 <DMA1_Channel1_IRQHandler+0xc>)
 8003b28:	f000 fe5e 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	2000016c 	.word	0x2000016c

08003b34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003b34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b36:	4802      	ldr	r0, [pc, #8]	@ (8003b40 <TIM1_CC_IRQHandler+0xc>)
 8003b38:	f001 fc20 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	20000120 	.word	0x20000120

08003b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b46:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <TIM3_IRQHandler+0xc>)
 8003b48:	f001 fc18 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	200000d4 	.word	0x200000d4

08003b54 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003b54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003b56:	4802      	ldr	r0, [pc, #8]	@ (8003b60 <TIM14_IRQHandler+0xc>)
 8003b58:	f001 fc10 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	20000088 	.word	0x20000088

08003b64 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b64:	4b02      	ldr	r3, [pc, #8]	@ (8003b70 <SystemInit+0xc>)
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	0512      	lsls	r2, r2, #20
 8003b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8003b6c:	4770      	bx	lr
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b74:	480d      	ldr	r0, [pc, #52]	@ (8003bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b78:	f7ff fff4 	bl	8003b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b7e:	e003      	b.n	8003b88 <LoopCopyDataInit>

08003b80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003b82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b86:	3104      	adds	r1, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b88:	480a      	ldr	r0, [pc, #40]	@ (8003bb4 <LoopForever+0xa>)
  ldr r3, =_edata
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <LoopForever+0xe>)
  adds r2, r0, r1
 8003b8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b90:	d3f6      	bcc.n	8003b80 <CopyDataInit>
  ldr r2, =_sbss
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <LoopForever+0x12>)
  b LoopFillZerobss
 8003b94:	e002      	b.n	8003b9c <LoopFillZerobss>

08003b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b96:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b98:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9a:	3204      	adds	r2, #4

08003b9c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003b9c:	4b08      	ldr	r3, [pc, #32]	@ (8003bc0 <LoopForever+0x16>)
  cmp r2, r3
 8003b9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003ba0:	d3f9      	bcc.n	8003b96 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003ba2:	f002 f8ef 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ba6:	f7ff fcab 	bl	8003500 <main>

08003baa <LoopForever>:

LoopForever:
    b LoopForever
 8003baa:	e7fe      	b.n	8003baa <LoopForever>
  ldr   r0, =_estack
 8003bac:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8003bb0:	08006490 	.word	0x08006490
  ldr r0, =_sdata
 8003bb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bb8:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8003bbc:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8003bc0:	20000418 	.word	0x20000418

08003bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bc4:	e7fe      	b.n	8003bc4 <ADC1_IRQHandler>
	...

08003bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_InitTick+0x4c>)
 8003bce:	7819      	ldrb	r1, [r3, #0]
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003bd6:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003bd8:	20fa      	movs	r0, #250	@ 0xfa
 8003bda:	0080      	lsls	r0, r0, #2
 8003bdc:	f7fc fa94 	bl	8000108 <__udivsi3>
 8003be0:	0001      	movs	r1, r0
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <HAL_InitTick+0x50>)
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	f7fc fa8f 	bl	8000108 <__udivsi3>
 8003bea:	f000 fcbd 	bl	8004568 <HAL_SYSTICK_Config>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d10d      	bne.n	8003c0e <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf2:	2c03      	cmp	r4, #3
 8003bf4:	d901      	bls.n	8003bfa <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	e7ed      	b.n	8003bd6 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	0021      	movs	r1, r4
 8003c00:	4240      	negs	r0, r0
 8003c02:	f000 fca1 	bl	8004548 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c06:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_InitTick+0x54>)
 8003c08:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e7e3      	b.n	8003bd6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8003c0e:	2001      	movs	r0, #1
 8003c10:	e7e1      	b.n	8003bd6 <HAL_InitTick+0xe>
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	20000008 	.word	0x20000008
 8003c18:	20000004 	.word	0x20000004
 8003c1c:	2000000c 	.word	0x2000000c

08003c20 <HAL_Init>:
{
 8003c20:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff ffd0 	bl	8003bc8 <HAL_InitTick>
 8003c28:	1e04      	subs	r4, r0, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_Init+0x12>
    status = HAL_ERROR;
 8003c2c:	2401      	movs	r4, #1
}
 8003c2e:	0020      	movs	r0, r4
 8003c30:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8003c32:	f7ff fe61 	bl	80038f8 <HAL_MspInit>
 8003c36:	e7fa      	b.n	8003c2e <HAL_Init+0xe>

08003c38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <HAL_IncTick+0x10>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4a03      	ldr	r2, [pc, #12]	@ (8003c4c <HAL_IncTick+0x14>)
 8003c3e:	6811      	ldr	r1, [r2, #0]
 8003c40:	185b      	adds	r3, r3, r1
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	4770      	bx	lr
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	20000008 	.word	0x20000008
 8003c4c:	200002dc 	.word	0x200002dc

08003c50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003c50:	4b01      	ldr	r3, [pc, #4]	@ (8003c58 <HAL_GetTick+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
}
 8003c54:	4770      	bx	lr
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	200002dc 	.word	0x200002dc

08003c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b530      	push	{r4, r5, lr}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d100      	bne.n	8003c6c <HAL_ADC_Init+0x10>
 8003c6a:	e105      	b.n	8003e78 <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c6c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c72:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	00d2      	lsls	r2, r2, #3
 8003c78:	d41b      	bmi.n	8003cb2 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e7c <HAL_ADC_Init+0x220>)
 8003c7e:	4011      	ands	r1, r2
 8003c80:	2280      	movs	r2, #128	@ 0x80
 8003c82:	0552      	lsls	r2, r2, #21
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c88:	4b7d      	ldr	r3, [pc, #500]	@ (8003e80 <HAL_ADC_Init+0x224>)
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	497d      	ldr	r1, [pc, #500]	@ (8003e84 <HAL_ADC_Init+0x228>)
 8003c8e:	f7fc fa3b 	bl	8000108 <__udivsi3>
 8003c92:	0040      	lsls	r0, r0, #1
 8003c94:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c96:	e009      	b.n	8003cac <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8003c98:	f7ff fe4c 	bl	8003934 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003ca0:	2254      	movs	r2, #84	@ 0x54
 8003ca2:	54a3      	strb	r3, [r4, r2]
 8003ca4:	e7e5      	b.n	8003c72 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8003ca6:	9b01      	ldr	r3, [sp, #4]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003cac:	9b01      	ldr	r3, [sp, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f9      	bne.n	8003ca6 <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cb2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	d500      	bpl.n	8003cbc <HAL_ADC_Init+0x60>
 8003cba:	e09d      	b.n	8003df8 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003cc6:	390f      	subs	r1, #15
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	000d      	movs	r5, r1
 8003cd4:	4015      	ands	r5, r2
 8003cd6:	4211      	tst	r1, r2
 8003cd8:	d000      	beq.n	8003cdc <HAL_ADC_Init+0x80>
 8003cda:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cdc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003cde:	06d2      	lsls	r2, r2, #27
 8003ce0:	d500      	bpl.n	8003ce4 <HAL_ADC_Init+0x88>
 8003ce2:	e0c2      	b.n	8003e6a <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	d000      	beq.n	8003cea <HAL_ADC_Init+0x8e>
 8003ce8:	e0bf      	b.n	8003e6a <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cea:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003cec:	4966      	ldr	r1, [pc, #408]	@ (8003e88 <HAL_ADC_Init+0x22c>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	3106      	adds	r1, #6
 8003cf2:	31ff      	adds	r1, #255	@ 0xff
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	07d2      	lsls	r2, r2, #31
 8003cfc:	d452      	bmi.n	8003da4 <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cfe:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d00:	7e21      	ldrb	r1, [r4, #24]
 8003d02:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d04:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d06:	7e61      	ldrb	r1, [r4, #25]
 8003d08:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d0a:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d0c:	7ea5      	ldrb	r5, [r4, #26]
 8003d0e:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d10:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d12:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003d14:	2900      	cmp	r1, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_ADC_Init+0xc0>
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d1c:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 8003d1e:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d20:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d22:	6921      	ldr	r1, [r4, #16]
 8003d24:	2900      	cmp	r1, #0
 8003d26:	db69      	blt.n	8003dfc <HAL_ADC_Init+0x1a0>
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8003d2c:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d2e:	212c      	movs	r1, #44	@ 0x2c
 8003d30:	5c61      	ldrb	r1, [r4, r1]
 8003d32:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d34:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d36:	2120      	movs	r1, #32
 8003d38:	5c61      	ldrb	r1, [r4, r1]
 8003d3a:	2901      	cmp	r1, #1
 8003d3c:	d061      	beq.n	8003e02 <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d3e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d44:	25e0      	movs	r5, #224	@ 0xe0
 8003d46:	006d      	lsls	r5, r5, #1
 8003d48:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 8003d4a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d4c:	4329      	orrs	r1, r5
 8003d4e:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d50:	68d9      	ldr	r1, [r3, #12]
 8003d52:	4d4e      	ldr	r5, [pc, #312]	@ (8003e8c <HAL_ADC_Init+0x230>)
 8003d54:	4029      	ands	r1, r5
 8003d56:	430a      	orrs	r2, r1
 8003d58:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d5a:	6863      	ldr	r3, [r4, #4]
 8003d5c:	0f9b      	lsrs	r3, r3, #30
 8003d5e:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003d60:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d62:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d64:	213c      	movs	r1, #60	@ 0x3c
 8003d66:	5c61      	ldrb	r1, [r4, r1]
 8003d68:	2901      	cmp	r1, #1
 8003d6a:	d059      	beq.n	8003e20 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d6c:	6821      	ldr	r1, [r4, #0]
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	4d47      	ldr	r5, [pc, #284]	@ (8003e90 <HAL_ADC_Init+0x234>)
 8003d72:	402b      	ands	r3, r5
 8003d74:	4313      	orrs	r3, r2
 8003d76:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	22c0      	movs	r2, #192	@ 0xc0
 8003d7c:	0612      	lsls	r2, r2, #24
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d010      	beq.n	8003da4 <HAL_ADC_Init+0x148>
 8003d82:	2280      	movs	r2, #128	@ 0x80
 8003d84:	05d2      	lsls	r2, r2, #23
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00c      	beq.n	8003da4 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	0612      	lsls	r2, r2, #24
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d008      	beq.n	8003da4 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003d92:	4940      	ldr	r1, [pc, #256]	@ (8003e94 <HAL_ADC_Init+0x238>)
 8003d94:	680a      	ldr	r2, [r1, #0]
 8003d96:	4d40      	ldr	r5, [pc, #256]	@ (8003e98 <HAL_ADC_Init+0x23c>)
 8003d98:	402a      	ands	r2, r5
 8003d9a:	25f0      	movs	r5, #240	@ 0xf0
 8003d9c:	03ad      	lsls	r5, r5, #14
 8003d9e:	402b      	ands	r3, r5
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003da4:	6821      	ldr	r1, [r4, #0]
 8003da6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8003da8:	694a      	ldr	r2, [r1, #20]
 8003daa:	2507      	movs	r5, #7
 8003dac:	43aa      	bics	r2, r5
 8003dae:	4313      	orrs	r3, r2
 8003db0:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003db6:	694b      	ldr	r3, [r1, #20]
 8003db8:	3569      	adds	r5, #105	@ 0x69
 8003dba:	43ab      	bics	r3, r5
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d135      	bne.n	8003e34 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003dcc:	3b10      	subs	r3, #16
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6293      	str	r3, [r2, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003dd2:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 8003dda:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d03b      	beq.n	8003e58 <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003de0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003de2:	2212      	movs	r2, #18
 8003de4:	4393      	bics	r3, r2
 8003de6:	3a02      	subs	r2, #2
 8003de8:	4313      	orrs	r3, r2
 8003dea:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003dee:	3a0f      	subs	r2, #15
 8003df0:	4313      	orrs	r3, r2
 8003df2:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003df4:	2001      	movs	r0, #1
 8003df6:	e03d      	b.n	8003e74 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e768      	b.n	8003cce <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dfc:	0049      	lsls	r1, r1, #1
 8003dfe:	0849      	lsrs	r1, r1, #1
 8003e00:	e794      	b.n	8003d2c <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e02:	2d00      	cmp	r5, #0
 8003e04:	d103      	bne.n	8003e0e <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e06:	2180      	movs	r1, #128	@ 0x80
 8003e08:	0249      	lsls	r1, r1, #9
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	e797      	b.n	8003d3e <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e0e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003e10:	2520      	movs	r5, #32
 8003e12:	4329      	orrs	r1, r5
 8003e14:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003e18:	3d1f      	subs	r5, #31
 8003e1a:	4329      	orrs	r1, r5
 8003e1c:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8003e1e:	e78e      	b.n	8003d3e <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8003e20:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e22:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003e24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e26:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003e28:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e2a:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	2201      	movs	r2, #1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	e79b      	b.n	8003d6c <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e34:	2280      	movs	r2, #128	@ 0x80
 8003e36:	0392      	lsls	r2, r2, #14
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d1ca      	bne.n	8003dd2 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003e40:	69e3      	ldr	r3, [r4, #28]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	221c      	movs	r2, #28
 8003e48:	401a      	ands	r2, r3
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	4093      	lsls	r3, r2
 8003e50:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003e52:	4313      	orrs	r3, r2
 8003e54:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e56:	e7bc      	b.n	8003dd2 <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4393      	bics	r3, r2
 8003e62:	3a02      	subs	r2, #2
 8003e64:	4313      	orrs	r3, r2
 8003e66:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003e68:	e004      	b.n	8003e74 <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e72:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003e74:	b003      	add	sp, #12
 8003e76:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003e78:	2001      	movs	r0, #1
 8003e7a:	e7fb      	b.n	8003e74 <HAL_ADC_Init+0x218>
 8003e7c:	6fffffe8 	.word	0x6fffffe8
 8003e80:	20000004 	.word	0x20000004
 8003e84:	00030d40 	.word	0x00030d40
 8003e88:	fffffefd 	.word	0xfffffefd
 8003e8c:	ffde0201 	.word	0xffde0201
 8003e90:	1ffffc02 	.word	0x1ffffc02
 8003e94:	40012708 	.word	0x40012708
 8003e98:	ffc3ffff 	.word	0xffc3ffff

08003e9c <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e9c:	4770      	bx	lr

08003e9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea0:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ea2:	f7ff fffb 	bl	8003e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ea6:	bd10      	pop	{r4, pc}

08003ea8 <HAL_ADC_ErrorCallback>:
}
 8003ea8:	4770      	bx	lr

08003eaa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eac:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003eae:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003eb0:	2240      	movs	r2, #64	@ 0x40
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003eb6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003eb8:	3a3c      	subs	r2, #60	@ 0x3c
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ebe:	f7ff fff3 	bl	8003ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ec2:	bd10      	pop	{r4, pc}

08003ec4 <ADC_DMAConvCplt>:
{
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003eca:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003ecc:	2150      	movs	r1, #80	@ 0x50
 8003ece:	4211      	tst	r1, r2
 8003ed0:	d12a      	bne.n	8003f28 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003edc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ede:	68d9      	ldr	r1, [r3, #12]
 8003ee0:	22c0      	movs	r2, #192	@ 0xc0
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	4211      	tst	r1, r2
 8003ee6:	d113      	bne.n	8003f10 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ee8:	7e82      	ldrb	r2, [r0, #26]
 8003eea:	2a00      	cmp	r2, #0
 8003eec:	d110      	bne.n	8003f10 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	0712      	lsls	r2, r2, #28
 8003ef2:	d50d      	bpl.n	8003f10 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	0752      	lsls	r2, r2, #29
 8003ef8:	d40d      	bmi.n	8003f16 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	210c      	movs	r1, #12
 8003efe:	438a      	bics	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003f02:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003f04:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <ADC_DMAConvCplt+0x7c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	3204      	adds	r2, #4
 8003f0a:	32ff      	adds	r2, #255	@ 0xff
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003f10:	f7ff f8fc 	bl	800310c <HAL_ADC_ConvCpltCallback>
}
 8003f14:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f16:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003f18:	2220      	movs	r2, #32
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003f20:	3a1f      	subs	r2, #31
 8003f22:	4313      	orrs	r3, r2
 8003f24:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8003f26:	e7f3      	b.n	8003f10 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f28:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003f2a:	06d2      	lsls	r2, r2, #27
 8003f2c:	d404      	bmi.n	8003f38 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f2e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003f30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f32:	0018      	movs	r0, r3
 8003f34:	4790      	blx	r2
}
 8003f36:	e7ed      	b.n	8003f14 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8003f38:	f7ff ffb6 	bl	8003ea8 <HAL_ADC_ErrorCallback>
 8003f3c:	e7ea      	b.n	8003f14 <ADC_DMAConvCplt+0x50>
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	fffffefe 	.word	0xfffffefe

08003f44 <HAL_ADC_ConfigChannel>:
{
 8003f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f46:	b083      	sub	sp, #12
 8003f48:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f4e:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8003f50:	3354      	adds	r3, #84	@ 0x54
 8003f52:	5cc3      	ldrb	r3, [r0, r3]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d100      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x16>
 8003f58:	e121      	b.n	800419e <HAL_ADC_ConfigChannel+0x25a>
 8003f5a:	2354      	movs	r3, #84	@ 0x54
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f60:	6800      	ldr	r0, [r0, #0]
 8003f62:	6883      	ldr	r3, [r0, #8]
 8003f64:	3203      	adds	r2, #3
 8003f66:	0016      	movs	r6, r2
 8003f68:	401e      	ands	r6, r3
 8003f6a:	421a      	tst	r2, r3
 8003f6c:	d009      	beq.n	8003f82 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f70:	321c      	adds	r2, #28
 8003f72:	4313      	orrs	r3, r2
 8003f74:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003f76:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003f78:	2354      	movs	r3, #84	@ 0x54
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	54e2      	strb	r2, [r4, r3]
}
 8003f7e:	b003      	add	sp, #12
 8003f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8003f82:	684b      	ldr	r3, [r1, #4]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d100      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x46>
 8003f88:	e0d5      	b.n	8004136 <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	0612      	lsls	r2, r2, #24
 8003f8e:	4295      	cmp	r5, r2
 8003f90:	d025      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x9a>
 8003f92:	4a84      	ldr	r2, [pc, #528]	@ (80041a4 <HAL_ADC_ConfigChannel+0x260>)
 8003f94:	4295      	cmp	r5, r2
 8003f96:	d022      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f98:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003f9a:	271f      	movs	r7, #31
 8003f9c:	401f      	ands	r7, r3
 8003f9e:	250f      	movs	r5, #15
 8003fa0:	40bd      	lsls	r5, r7
 8003fa2:	43aa      	bics	r2, r5
 8003fa4:	680b      	ldr	r3, [r1, #0]
 8003fa6:	025d      	lsls	r5, r3, #9
 8003fa8:	d12f      	bne.n	800400a <HAL_ADC_ConfigChannel+0xc6>
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	261f      	movs	r6, #31
 8003fae:	401e      	ands	r6, r3
 8003fb0:	40be      	lsls	r6, r7
 8003fb2:	4332      	orrs	r2, r6
 8003fb4:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003fb6:	684d      	ldr	r5, [r1, #4]
 8003fb8:	08ab      	lsrs	r3, r5, #2
 8003fba:	3301      	adds	r3, #1
 8003fbc:	69e2      	ldr	r2, [r4, #28]
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d813      	bhi.n	8003fea <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fc2:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003fc4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003fc6:	231f      	movs	r3, #31
 8003fc8:	401d      	ands	r5, r3
 8003fca:	3b10      	subs	r3, #16
 8003fcc:	001f      	movs	r7, r3
 8003fce:	40af      	lsls	r7, r5
 8003fd0:	43ba      	bics	r2, r7
 8003fd2:	0eb6      	lsrs	r6, r6, #26
 8003fd4:	4033      	ands	r3, r6
 8003fd6:	40ab      	lsls	r3, r5
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8003fdc:	e005      	b.n	8003fea <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003fde:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003fe0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	0a5b      	lsrs	r3, r3, #9
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	680b      	ldr	r3, [r1, #0]
 8003fee:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003ff0:	6942      	ldr	r2, [r0, #20]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	439a      	bics	r2, r3
 8003ff6:	402b      	ands	r3, r5
 8003ff8:	4d6b      	ldr	r5, [pc, #428]	@ (80041a8 <HAL_ADC_ConfigChannel+0x264>)
 8003ffa:	402b      	ands	r3, r5
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004000:	680b      	ldr	r3, [r1, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	db5f      	blt.n	80040c6 <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004006:	2000      	movs	r0, #0
 8004008:	e7b6      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800400a:	07dd      	lsls	r5, r3, #31
 800400c:	d4d0      	bmi.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800400e:	079d      	lsls	r5, r3, #30
 8004010:	d42f      	bmi.n	8004072 <HAL_ADC_ConfigChannel+0x12e>
 8004012:	075d      	lsls	r5, r3, #29
 8004014:	d42f      	bmi.n	8004076 <HAL_ADC_ConfigChannel+0x132>
 8004016:	071d      	lsls	r5, r3, #28
 8004018:	d42f      	bmi.n	800407a <HAL_ADC_ConfigChannel+0x136>
 800401a:	06dd      	lsls	r5, r3, #27
 800401c:	d42f      	bmi.n	800407e <HAL_ADC_ConfigChannel+0x13a>
 800401e:	069d      	lsls	r5, r3, #26
 8004020:	d42f      	bmi.n	8004082 <HAL_ADC_ConfigChannel+0x13e>
 8004022:	065d      	lsls	r5, r3, #25
 8004024:	d42f      	bmi.n	8004086 <HAL_ADC_ConfigChannel+0x142>
 8004026:	061d      	lsls	r5, r3, #24
 8004028:	d42f      	bmi.n	800408a <HAL_ADC_ConfigChannel+0x146>
 800402a:	05dd      	lsls	r5, r3, #23
 800402c:	d42f      	bmi.n	800408e <HAL_ADC_ConfigChannel+0x14a>
 800402e:	059d      	lsls	r5, r3, #22
 8004030:	d42f      	bmi.n	8004092 <HAL_ADC_ConfigChannel+0x14e>
 8004032:	055d      	lsls	r5, r3, #21
 8004034:	d42f      	bmi.n	8004096 <HAL_ADC_ConfigChannel+0x152>
 8004036:	051d      	lsls	r5, r3, #20
 8004038:	d42f      	bmi.n	800409a <HAL_ADC_ConfigChannel+0x156>
 800403a:	04dd      	lsls	r5, r3, #19
 800403c:	d42f      	bmi.n	800409e <HAL_ADC_ConfigChannel+0x15a>
 800403e:	049d      	lsls	r5, r3, #18
 8004040:	d42f      	bmi.n	80040a2 <HAL_ADC_ConfigChannel+0x15e>
 8004042:	045d      	lsls	r5, r3, #17
 8004044:	d42f      	bmi.n	80040a6 <HAL_ADC_ConfigChannel+0x162>
 8004046:	041d      	lsls	r5, r3, #16
 8004048:	d42f      	bmi.n	80040aa <HAL_ADC_ConfigChannel+0x166>
 800404a:	03dd      	lsls	r5, r3, #15
 800404c:	d42f      	bmi.n	80040ae <HAL_ADC_ConfigChannel+0x16a>
 800404e:	039d      	lsls	r5, r3, #14
 8004050:	d42f      	bmi.n	80040b2 <HAL_ADC_ConfigChannel+0x16e>
 8004052:	035d      	lsls	r5, r3, #13
 8004054:	d42f      	bmi.n	80040b6 <HAL_ADC_ConfigChannel+0x172>
 8004056:	031d      	lsls	r5, r3, #12
 8004058:	d42f      	bmi.n	80040ba <HAL_ADC_ConfigChannel+0x176>
 800405a:	02dd      	lsls	r5, r3, #11
 800405c:	d42f      	bmi.n	80040be <HAL_ADC_ConfigChannel+0x17a>
 800405e:	029d      	lsls	r5, r3, #10
 8004060:	d42f      	bmi.n	80040c2 <HAL_ADC_ConfigChannel+0x17e>
 8004062:	2580      	movs	r5, #128	@ 0x80
 8004064:	03ed      	lsls	r5, r5, #15
 8004066:	001e      	movs	r6, r3
 8004068:	402e      	ands	r6, r5
 800406a:	422b      	tst	r3, r5
 800406c:	d0a0      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800406e:	2616      	movs	r6, #22
 8004070:	e79e      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 8004072:	2601      	movs	r6, #1
 8004074:	e79c      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 8004076:	2602      	movs	r6, #2
 8004078:	e79a      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800407a:	2603      	movs	r6, #3
 800407c:	e798      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800407e:	2604      	movs	r6, #4
 8004080:	e796      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 8004082:	2605      	movs	r6, #5
 8004084:	e794      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 8004086:	2606      	movs	r6, #6
 8004088:	e792      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800408a:	2607      	movs	r6, #7
 800408c:	e790      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800408e:	2608      	movs	r6, #8
 8004090:	e78e      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 8004092:	2609      	movs	r6, #9
 8004094:	e78c      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 8004096:	260a      	movs	r6, #10
 8004098:	e78a      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800409a:	260b      	movs	r6, #11
 800409c:	e788      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 800409e:	260c      	movs	r6, #12
 80040a0:	e786      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040a2:	260d      	movs	r6, #13
 80040a4:	e784      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040a6:	260e      	movs	r6, #14
 80040a8:	e782      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040aa:	260f      	movs	r6, #15
 80040ac:	e780      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040ae:	2610      	movs	r6, #16
 80040b0:	e77e      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040b2:	2611      	movs	r6, #17
 80040b4:	e77c      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040b6:	2612      	movs	r6, #18
 80040b8:	e77a      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040ba:	2613      	movs	r6, #19
 80040bc:	e778      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040be:	2614      	movs	r6, #20
 80040c0:	e776      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
 80040c2:	2615      	movs	r6, #21
 80040c4:	e774      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80040c6:	4a39      	ldr	r2, [pc, #228]	@ (80041ac <HAL_ADC_ConfigChannel+0x268>)
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	22c0      	movs	r2, #192	@ 0xc0
 80040cc:	0412      	lsls	r2, r2, #16
 80040ce:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040d0:	4837      	ldr	r0, [pc, #220]	@ (80041b0 <HAL_ADC_ConfigChannel+0x26c>)
 80040d2:	4283      	cmp	r3, r0
 80040d4:	d004      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80040d6:	4837      	ldr	r0, [pc, #220]	@ (80041b4 <HAL_ADC_ConfigChannel+0x270>)
 80040d8:	4283      	cmp	r3, r0
 80040da:	d01f      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040dc:	2000      	movs	r0, #0
 80040de:	e74b      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040e0:	0208      	lsls	r0, r1, #8
 80040e2:	d4f8      	bmi.n	80040d6 <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80040ea:	4930      	ldr	r1, [pc, #192]	@ (80041ac <HAL_ADC_ConfigChannel+0x268>)
 80040ec:	680a      	ldr	r2, [r1, #0]
 80040ee:	4832      	ldr	r0, [pc, #200]	@ (80041b8 <HAL_ADC_ConfigChannel+0x274>)
 80040f0:	4002      	ands	r2, r0
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80040f6:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_ADC_ConfigChannel+0x278>)
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	4931      	ldr	r1, [pc, #196]	@ (80041c0 <HAL_ADC_ConfigChannel+0x27c>)
 80040fc:	f7fc f804 	bl	8000108 <__udivsi3>
 8004100:	0043      	lsls	r3, r0, #1
 8004102:	181b      	adds	r3, r3, r0
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	3301      	adds	r3, #1
 8004108:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800410a:	e002      	b.n	8004112 <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 800410c:	9b01      	ldr	r3, [sp, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f9      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004118:	2000      	movs	r0, #0
 800411a:	e72d      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800411c:	0249      	lsls	r1, r1, #9
 800411e:	d43c      	bmi.n	800419a <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	03db      	lsls	r3, r3, #15
 8004124:	4313      	orrs	r3, r2
 8004126:	4921      	ldr	r1, [pc, #132]	@ (80041ac <HAL_ADC_ConfigChannel+0x268>)
 8004128:	680a      	ldr	r2, [r1, #0]
 800412a:	4823      	ldr	r0, [pc, #140]	@ (80041b8 <HAL_ADC_ConfigChannel+0x274>)
 800412c:	4002      	ands	r2, r0
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004132:	2000      	movs	r0, #0
}
 8004134:	e720      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	429d      	cmp	r5, r3
 800413c:	d002      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x200>
 800413e:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_ADC_ConfigChannel+0x260>)
 8004140:	429d      	cmp	r5, r3
 8004142:	d105      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8004144:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004146:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	0a5b      	lsrs	r3, r3, #9
 800414c:	439a      	bics	r2, r3
 800414e:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004150:	680b      	ldr	r3, [r1, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	db01      	blt.n	800415a <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004156:	2000      	movs	r0, #0
 8004158:	e70e      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800415a:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <HAL_ADC_ConfigChannel+0x268>)
 800415c:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800415e:	4914      	ldr	r1, [pc, #80]	@ (80041b0 <HAL_ADC_ConfigChannel+0x26c>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d004      	beq.n	800416e <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004164:	4913      	ldr	r1, [pc, #76]	@ (80041b4 <HAL_ADC_ConfigChannel+0x270>)
 8004166:	428b      	cmp	r3, r1
 8004168:	d00c      	beq.n	8004184 <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800416a:	2000      	movs	r0, #0
 800416c:	e704      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	03db      	lsls	r3, r3, #15
 8004172:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8004174:	490d      	ldr	r1, [pc, #52]	@ (80041ac <HAL_ADC_ConfigChannel+0x268>)
 8004176:	680b      	ldr	r3, [r1, #0]
 8004178:	480f      	ldr	r0, [pc, #60]	@ (80041b8 <HAL_ADC_ConfigChannel+0x274>)
 800417a:	4003      	ands	r3, r0
 800417c:	431a      	orrs	r2, r3
 800417e:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004180:	2000      	movs	r0, #0
}
 8004182:	e6f9      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800418a:	4908      	ldr	r1, [pc, #32]	@ (80041ac <HAL_ADC_ConfigChannel+0x268>)
 800418c:	680b      	ldr	r3, [r1, #0]
 800418e:	480a      	ldr	r0, [pc, #40]	@ (80041b8 <HAL_ADC_ConfigChannel+0x274>)
 8004190:	4003      	ands	r3, r0
 8004192:	431a      	orrs	r2, r3
 8004194:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004196:	2000      	movs	r0, #0
}
 8004198:	e6ee      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
 800419a:	2000      	movs	r0, #0
 800419c:	e6ec      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 800419e:	2002      	movs	r0, #2
 80041a0:	e6ed      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x3a>
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	80000004 	.word	0x80000004
 80041a8:	7fffff00 	.word	0x7fffff00
 80041ac:	40012708 	.word	0x40012708
 80041b0:	a4000200 	.word	0xa4000200
 80041b4:	a8000400 	.word	0xa8000400
 80041b8:	ff3fffff 	.word	0xff3fffff
 80041bc:	20000004 	.word	0x20000004
 80041c0:	00030d40 	.word	0x00030d40

080041c4 <ADC_ConversionStop>:
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80041c8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041ca:	6893      	ldr	r3, [r2, #8]
 80041cc:	075b      	lsls	r3, r3, #29
 80041ce:	d520      	bpl.n	8004212 <ADC_ConversionStop+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80041d0:	6893      	ldr	r3, [r2, #8]
 80041d2:	079b      	lsls	r3, r3, #30
 80041d4:	d405      	bmi.n	80041e2 <ADC_ConversionStop+0x1e>
  MODIFY_REG(ADCx->CR,
 80041d6:	6893      	ldr	r3, [r2, #8]
 80041d8:	490f      	ldr	r1, [pc, #60]	@ (8004218 <ADC_ConversionStop+0x54>)
 80041da:	400b      	ands	r3, r1
 80041dc:	2110      	movs	r1, #16
 80041de:	430b      	orrs	r3, r1
 80041e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80041e2:	f7ff fd35 	bl	8003c50 <HAL_GetTick>
 80041e6:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	075b      	lsls	r3, r3, #29
 80041ee:	d50e      	bpl.n	800420e <ADC_ConversionStop+0x4a>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041f0:	f7ff fd2e 	bl	8003c50 <HAL_GetTick>
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	2802      	cmp	r0, #2
 80041f8:	d9f6      	bls.n	80041e8 <ADC_ConversionStop+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041fc:	2210      	movs	r2, #16
 80041fe:	4313      	orrs	r3, r2
 8004200:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004202:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004204:	3a0f      	subs	r2, #15
 8004206:	4313      	orrs	r3, r2
 8004208:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 800420a:	2001      	movs	r0, #1
 800420c:	e002      	b.n	8004214 <ADC_ConversionStop+0x50>
  return HAL_OK;
 800420e:	2000      	movs	r0, #0
 8004210:	e000      	b.n	8004214 <ADC_ConversionStop+0x50>
 8004212:	2000      	movs	r0, #0
}
 8004214:	bd70      	pop	{r4, r5, r6, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	7fffffe8 	.word	0x7fffffe8

0800421c <ADC_Enable>:
{
 800421c:	b530      	push	{r4, r5, lr}
 800421e:	b083      	sub	sp, #12
 8004220:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004226:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	07d2      	lsls	r2, r2, #31
 800422c:	d44d      	bmi.n	80042ca <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	4a27      	ldr	r2, [pc, #156]	@ (80042d0 <ADC_Enable+0xb4>)
 8004232:	4211      	tst	r1, r2
 8004234:	d111      	bne.n	800425a <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4926      	ldr	r1, [pc, #152]	@ (80042d4 <ADC_Enable+0xb8>)
 800423a:	400a      	ands	r2, r1
 800423c:	2101      	movs	r1, #1
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8004242:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <ADC_Enable+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	d517      	bpl.n	800427a <ADC_Enable+0x5e>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <ADC_Enable+0xc0>)
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	4924      	ldr	r1, [pc, #144]	@ (80042e0 <ADC_Enable+0xc4>)
 8004250:	f7fb ff5a 	bl	8000108 <__udivsi3>
 8004254:	3001      	adds	r0, #1
 8004256:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8004258:	e00c      	b.n	8004274 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800425c:	2210      	movs	r2, #16
 800425e:	4313      	orrs	r3, r2
 8004260:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004262:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8004264:	3a0f      	subs	r2, #15
 8004266:	4313      	orrs	r3, r2
 8004268:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 800426a:	2001      	movs	r0, #1
 800426c:	e02e      	b.n	80042cc <ADC_Enable+0xb0>
        wait_loop_index--;
 800426e:	9b01      	ldr	r3, [sp, #4]
 8004270:	3b01      	subs	r3, #1
 8004272:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004274:	9b01      	ldr	r3, [sp, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f9      	bne.n	800426e <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800427a:	7e63      	ldrb	r3, [r4, #25]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <ADC_Enable+0x68>
  return HAL_OK;
 8004280:	2000      	movs	r0, #0
 8004282:	e023      	b.n	80042cc <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8004284:	f7ff fce4 	bl	8003c50 <HAL_GetTick>
 8004288:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800428a:	e004      	b.n	8004296 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800428c:	f7ff fce0 	bl	8003c50 <HAL_GetTick>
 8004290:	1b40      	subs	r0, r0, r5
 8004292:	2802      	cmp	r0, #2
 8004294:	d80d      	bhi.n	80042b2 <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	07d2      	lsls	r2, r2, #31
 800429c:	d413      	bmi.n	80042c6 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	07d2      	lsls	r2, r2, #31
 80042a2:	d4f3      	bmi.n	800428c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	490b      	ldr	r1, [pc, #44]	@ (80042d4 <ADC_Enable+0xb8>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	2101      	movs	r1, #1
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	e7ec      	b.n	800428c <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042b4:	2210      	movs	r2, #16
 80042b6:	4313      	orrs	r3, r2
 80042b8:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80042bc:	3a0f      	subs	r2, #15
 80042be:	4313      	orrs	r3, r2
 80042c0:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80042c2:	2001      	movs	r0, #1
 80042c4:	e002      	b.n	80042cc <ADC_Enable+0xb0>
  return HAL_OK;
 80042c6:	2000      	movs	r0, #0
 80042c8:	e000      	b.n	80042cc <ADC_Enable+0xb0>
 80042ca:	2000      	movs	r0, #0
}
 80042cc:	b003      	add	sp, #12
 80042ce:	bd30      	pop	{r4, r5, pc}
 80042d0:	80000017 	.word	0x80000017
 80042d4:	7fffffe8 	.word	0x7fffffe8
 80042d8:	40012708 	.word	0x40012708
 80042dc:	20000004 	.word	0x20000004
 80042e0:	00030d40 	.word	0x00030d40

080042e4 <HAL_ADC_Start_DMA>:
{
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	0004      	movs	r4, r0
 80042e8:	000d      	movs	r5, r1
 80042ea:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042ec:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ee:	6893      	ldr	r3, [r2, #8]
 80042f0:	075b      	lsls	r3, r3, #29
 80042f2:	d447      	bmi.n	8004384 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80042f4:	2354      	movs	r3, #84	@ 0x54
 80042f6:	5cc3      	ldrb	r3, [r0, r3]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d045      	beq.n	8004388 <HAL_ADC_Start_DMA+0xa4>
 80042fc:	2301      	movs	r3, #1
 80042fe:	2154      	movs	r1, #84	@ 0x54
 8004300:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004302:	68d1      	ldr	r1, [r2, #12]
 8004304:	420b      	tst	r3, r1
 8004306:	d10d      	bne.n	8004324 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004308:	6893      	ldr	r3, [r2, #8]
 800430a:	07db      	lsls	r3, r3, #31
 800430c:	d505      	bpl.n	800431a <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 800430e:	6893      	ldr	r3, [r2, #8]
 8004310:	491e      	ldr	r1, [pc, #120]	@ (800438c <HAL_ADC_Start_DMA+0xa8>)
 8004312:	400b      	ands	r3, r1
 8004314:	2102      	movs	r1, #2
 8004316:	430b      	orrs	r3, r1
 8004318:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	68d3      	ldr	r3, [r2, #12]
 800431e:	2101      	movs	r1, #1
 8004320:	430b      	orrs	r3, r1
 8004322:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8004324:	0020      	movs	r0, r4
 8004326:	f7ff ff79 	bl	800421c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800432a:	2800      	cmp	r0, #0
 800432c:	d12b      	bne.n	8004386 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 800432e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004330:	4b17      	ldr	r3, [pc, #92]	@ (8004390 <HAL_ADC_Start_DMA+0xac>)
 8004332:	401a      	ands	r2, r3
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4313      	orrs	r3, r2
 800433a:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800433c:	2300      	movs	r3, #0
 800433e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004340:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004342:	4914      	ldr	r1, [pc, #80]	@ (8004394 <HAL_ADC_Start_DMA+0xb0>)
 8004344:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004346:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004348:	4913      	ldr	r1, [pc, #76]	@ (8004398 <HAL_ADC_Start_DMA+0xb4>)
 800434a:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800434c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800434e:	4913      	ldr	r1, [pc, #76]	@ (800439c <HAL_ADC_Start_DMA+0xb8>)
 8004350:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	211c      	movs	r1, #28
 8004356:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004358:	2254      	movs	r2, #84	@ 0x54
 800435a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	6853      	ldr	r3, [r2, #4]
 8004360:	390c      	subs	r1, #12
 8004362:	430b      	orrs	r3, r1
 8004364:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	3140      	adds	r1, #64	@ 0x40
 800436a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800436c:	0033      	movs	r3, r6
 800436e:	002a      	movs	r2, r5
 8004370:	f000 f9aa 	bl	80046c8 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004374:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004376:	6893      	ldr	r3, [r2, #8]
 8004378:	4904      	ldr	r1, [pc, #16]	@ (800438c <HAL_ADC_Start_DMA+0xa8>)
 800437a:	400b      	ands	r3, r1
 800437c:	2104      	movs	r1, #4
 800437e:	430b      	orrs	r3, r1
 8004380:	6093      	str	r3, [r2, #8]
}
 8004382:	e000      	b.n	8004386 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8004384:	2002      	movs	r0, #2
}
 8004386:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8004388:	2002      	movs	r0, #2
 800438a:	e7fc      	b.n	8004386 <HAL_ADC_Start_DMA+0xa2>
 800438c:	7fffffe8 	.word	0x7fffffe8
 8004390:	fffff0fe 	.word	0xfffff0fe
 8004394:	08003ec5 	.word	0x08003ec5
 8004398:	08003e9f 	.word	0x08003e9f
 800439c:	08003eab 	.word	0x08003eab

080043a0 <ADC_Disable>:
{
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043a4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	2102      	movs	r1, #2
 80043aa:	0008      	movs	r0, r1
 80043ac:	4010      	ands	r0, r2
 80043ae:	4211      	tst	r1, r2
 80043b0:	d000      	beq.n	80043b4 <ADC_Disable+0x14>
 80043b2:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	07d2      	lsls	r2, r2, #31
 80043b8:	d531      	bpl.n	800441e <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d131      	bne.n	8004422 <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	2205      	movs	r2, #5
 80043c2:	400a      	ands	r2, r1
 80043c4:	2a01      	cmp	r2, #1
 80043c6:	d009      	beq.n	80043dc <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043ca:	2210      	movs	r2, #16
 80043cc:	4313      	orrs	r3, r2
 80043ce:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80043d2:	3a0f      	subs	r2, #15
 80043d4:	4313      	orrs	r3, r2
 80043d6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80043d8:	2001      	movs	r0, #1
 80043da:	e021      	b.n	8004420 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	4912      	ldr	r1, [pc, #72]	@ (8004428 <ADC_Disable+0x88>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	2102      	movs	r1, #2
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	2203      	movs	r2, #3
 80043ec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80043ee:	f7ff fc2f 	bl	8003c50 <HAL_GetTick>
 80043f2:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	07db      	lsls	r3, r3, #31
 80043fa:	d50e      	bpl.n	800441a <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043fc:	f7ff fc28 	bl	8003c50 <HAL_GetTick>
 8004400:	1b40      	subs	r0, r0, r5
 8004402:	2802      	cmp	r0, #2
 8004404:	d9f6      	bls.n	80043f4 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004408:	2210      	movs	r2, #16
 800440a:	4313      	orrs	r3, r2
 800440c:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004410:	3a0f      	subs	r2, #15
 8004412:	4313      	orrs	r3, r2
 8004414:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 8004416:	2001      	movs	r0, #1
 8004418:	e002      	b.n	8004420 <ADC_Disable+0x80>
  return HAL_OK;
 800441a:	2000      	movs	r0, #0
 800441c:	e000      	b.n	8004420 <ADC_Disable+0x80>
 800441e:	2000      	movs	r0, #0
}
 8004420:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004422:	2000      	movs	r0, #0
 8004424:	e7fc      	b.n	8004420 <ADC_Disable+0x80>
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	7fffffe8 	.word	0x7fffffe8

0800442c <HAL_ADC_Stop_DMA>:
{
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004430:	2354      	movs	r3, #84	@ 0x54
 8004432:	5cc3      	ldrb	r3, [r0, r3]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d036      	beq.n	80044a6 <HAL_ADC_Stop_DMA+0x7a>
 8004438:	2354      	movs	r3, #84	@ 0x54
 800443a:	2201      	movs	r2, #1
 800443c:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800443e:	f7ff fec1 	bl	80041c4 <ADC_ConversionStop>
 8004442:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004444:	d11d      	bne.n	8004482 <HAL_ADC_Stop_DMA+0x56>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004446:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004448:	2325      	movs	r3, #37	@ 0x25
 800444a:	5cc3      	ldrb	r3, [r0, r3]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d01d      	beq.n	800448c <HAL_ADC_Stop_DMA+0x60>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	6853      	ldr	r3, [r2, #4]
 8004454:	2110      	movs	r1, #16
 8004456:	438b      	bics	r3, r1
 8004458:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800445a:	2d00      	cmp	r5, #0
 800445c:	d11f      	bne.n	800449e <HAL_ADC_Stop_DMA+0x72>
      tmp_hal_status = ADC_Disable(hadc);
 800445e:	0020      	movs	r0, r4
 8004460:	f7ff ff9e 	bl	80043a0 <ADC_Disable>
 8004464:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8004466:	2d00      	cmp	r5, #0
 8004468:	d106      	bne.n	8004478 <HAL_ADC_Stop_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 800446a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800446c:	4a0f      	ldr	r2, [pc, #60]	@ (80044ac <HAL_ADC_Stop_DMA+0x80>)
 800446e:	4013      	ands	r3, r2
 8004470:	3204      	adds	r2, #4
 8004472:	32ff      	adds	r2, #255	@ 0xff
 8004474:	4313      	orrs	r3, r2
 8004476:	65a3      	str	r3, [r4, #88]	@ 0x58
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	68d3      	ldr	r3, [r2, #12]
 800447c:	2101      	movs	r1, #1
 800447e:	438b      	bics	r3, r1
 8004480:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 8004482:	2354      	movs	r3, #84	@ 0x54
 8004484:	2200      	movs	r2, #0
 8004486:	54e2      	strb	r2, [r4, r3]
}
 8004488:	0028      	movs	r0, r5
 800448a:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800448c:	f000 f96c 	bl	8004768 <HAL_DMA_Abort>
 8004490:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 8004492:	d0dd      	beq.n	8004450 <HAL_ADC_Stop_DMA+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004494:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004496:	2240      	movs	r2, #64	@ 0x40
 8004498:	4313      	orrs	r3, r2
 800449a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800449c:	e7d8      	b.n	8004450 <HAL_ADC_Stop_DMA+0x24>
      (void)ADC_Disable(hadc);
 800449e:	0020      	movs	r0, r4
 80044a0:	f7ff ff7e 	bl	80043a0 <ADC_Disable>
 80044a4:	e7df      	b.n	8004466 <HAL_ADC_Stop_DMA+0x3a>
  __HAL_LOCK(hadc);
 80044a6:	2502      	movs	r5, #2
 80044a8:	e7ee      	b.n	8004488 <HAL_ADC_Stop_DMA+0x5c>
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	fffffefe 	.word	0xfffffefe

080044b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b0:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80044b2:	2800      	cmp	r0, #0
 80044b4:	db11      	blt.n	80044da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044b6:	0883      	lsrs	r3, r0, #2
 80044b8:	4d13      	ldr	r5, [pc, #76]	@ (8004508 <__NVIC_SetPriority+0x58>)
 80044ba:	33c0      	adds	r3, #192	@ 0xc0
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	595c      	ldr	r4, [r3, r5]
 80044c0:	2203      	movs	r2, #3
 80044c2:	4010      	ands	r0, r2
 80044c4:	00c0      	lsls	r0, r0, #3
 80044c6:	32fc      	adds	r2, #252	@ 0xfc
 80044c8:	0016      	movs	r6, r2
 80044ca:	4086      	lsls	r6, r0
 80044cc:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044ce:	0189      	lsls	r1, r1, #6
 80044d0:	400a      	ands	r2, r1
 80044d2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d4:	4322      	orrs	r2, r4
 80044d6:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044da:	230f      	movs	r3, #15
 80044dc:	4003      	ands	r3, r0
 80044de:	3b08      	subs	r3, #8
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	3306      	adds	r3, #6
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a09      	ldr	r2, [pc, #36]	@ (800450c <__NVIC_SetPriority+0x5c>)
 80044e8:	4694      	mov	ip, r2
 80044ea:	4463      	add	r3, ip
 80044ec:	685c      	ldr	r4, [r3, #4]
 80044ee:	2203      	movs	r2, #3
 80044f0:	4010      	ands	r0, r2
 80044f2:	00c0      	lsls	r0, r0, #3
 80044f4:	32fc      	adds	r2, #252	@ 0xfc
 80044f6:	0015      	movs	r5, r2
 80044f8:	4085      	lsls	r5, r0
 80044fa:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044fc:	0189      	lsls	r1, r1, #6
 80044fe:	400a      	ands	r2, r1
 8004500:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004502:	4322      	orrs	r2, r4
 8004504:	605a      	str	r2, [r3, #4]
}
 8004506:	e7e7      	b.n	80044d8 <__NVIC_SetPriority+0x28>
 8004508:	e000e100 	.word	0xe000e100
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004510:	3801      	subs	r0, #1
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	045b      	lsls	r3, r3, #17
 8004516:	4298      	cmp	r0, r3
 8004518:	d20f      	bcs.n	800453a <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <SysTick_Config+0x30>)
 800451c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800451e:	4809      	ldr	r0, [pc, #36]	@ (8004544 <SysTick_Config+0x34>)
 8004520:	6a03      	ldr	r3, [r0, #32]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	21c0      	movs	r1, #192	@ 0xc0
 8004528:	0609      	lsls	r1, r1, #24
 800452a:	430b      	orrs	r3, r1
 800452c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452e:	2300      	movs	r3, #0
 8004530:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004532:	3307      	adds	r3, #7
 8004534:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004536:	2000      	movs	r0, #0
}
 8004538:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800453a:	2001      	movs	r0, #1
 800453c:	e7fc      	b.n	8004538 <SysTick_Config+0x28>
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	e000e010 	.word	0xe000e010
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004548:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800454a:	f7ff ffb1 	bl	80044b0 <__NVIC_SetPriority>
}
 800454e:	bd10      	pop	{r4, pc}

08004550 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004550:	2800      	cmp	r0, #0
 8004552:	db05      	blt.n	8004560 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004554:	221f      	movs	r2, #31
 8004556:	4002      	ands	r2, r0
 8004558:	2301      	movs	r3, #1
 800455a:	4093      	lsls	r3, r2
 800455c:	4a01      	ldr	r2, [pc, #4]	@ (8004564 <HAL_NVIC_EnableIRQ+0x14>)
 800455e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004560:	4770      	bx	lr
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	e000e100 	.word	0xe000e100

08004568 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004568:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 800456a:	f7ff ffd1 	bl	8004510 <SysTick_Config>
}
 800456e:	bd10      	pop	{r4, pc}

08004570 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004572:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004574:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8004576:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004578:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800457a:	2c00      	cmp	r4, #0
 800457c:	d002      	beq.n	8004584 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800457e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004580:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8004582:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004584:	4f0b      	ldr	r7, [pc, #44]	@ (80045b4 <DMA_SetConfig+0x44>)
 8004586:	687c      	ldr	r4, [r7, #4]
 8004588:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800458a:	261c      	movs	r6, #28
 800458c:	402e      	ands	r6, r5
 800458e:	2501      	movs	r5, #1
 8004590:	40b5      	lsls	r5, r6
 8004592:	432c      	orrs	r4, r5
 8004594:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004596:	6804      	ldr	r4, [r0, #0]
 8004598:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800459a:	6883      	ldr	r3, [r0, #8]
 800459c:	2b10      	cmp	r3, #16
 800459e:	d004      	beq.n	80045aa <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80045a0:	6803      	ldr	r3, [r0, #0]
 80045a2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80045a4:	6803      	ldr	r3, [r0, #0]
 80045a6:	60da      	str	r2, [r3, #12]
  }
}
 80045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80045aa:	6803      	ldr	r3, [r0, #0]
 80045ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	60d9      	str	r1, [r3, #12]
 80045b2:	e7f9      	b.n	80045a8 <DMA_SetConfig+0x38>
 80045b4:	40020000 	.word	0x40020000

080045b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045b8:	b510      	push	{r4, lr}
 80045ba:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045bc:	6803      	ldr	r3, [r0, #0]
 80045be:	20ff      	movs	r0, #255	@ 0xff
 80045c0:	4018      	ands	r0, r3
 80045c2:	3808      	subs	r0, #8
 80045c4:	2114      	movs	r1, #20
 80045c6:	f7fb fd9f 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80045ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045cc:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80045ce:	4a06      	ldr	r2, [pc, #24]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80045d0:	4694      	mov	ip, r2
 80045d2:	4463      	add	r3, ip
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80045da:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80045dc:	231c      	movs	r3, #28
 80045de:	4018      	ands	r0, r3
 80045e0:	3b1b      	subs	r3, #27
 80045e2:	4083      	lsls	r3, r0
 80045e4:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	10008200 	.word	0x10008200
 80045ec:	40020880 	.word	0x40020880

080045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045f0:	6842      	ldr	r2, [r0, #4]
 80045f2:	23ff      	movs	r3, #255	@ 0xff
 80045f4:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80045f6:	4a06      	ldr	r2, [pc, #24]	@ (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80045f8:	189a      	adds	r2, r3, r2
 80045fa:	0092      	lsls	r2, r2, #2
 80045fc:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045fe:	4a05      	ldr	r2, [pc, #20]	@ (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004600:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004602:	3b01      	subs	r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	401a      	ands	r2, r3
 8004608:	2301      	movs	r3, #1
 800460a:	4093      	lsls	r3, r2
 800460c:	6583      	str	r3, [r0, #88]	@ 0x58
}
 800460e:	4770      	bx	lr
 8004610:	1000823f 	.word	0x1000823f
 8004614:	40020940 	.word	0x40020940

08004618 <HAL_DMA_Init>:
{
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 800461c:	d04d      	beq.n	80046ba <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800461e:	6805      	ldr	r5, [r0, #0]
 8004620:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <HAL_DMA_Init+0xa8>)
 8004622:	18e8      	adds	r0, r5, r3
 8004624:	2114      	movs	r1, #20
 8004626:	f7fb fd6f 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800462a:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800462c:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800462e:	2325      	movs	r3, #37	@ 0x25
 8004630:	2202      	movs	r2, #2
 8004632:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	4a23      	ldr	r2, [pc, #140]	@ (80046c4 <HAL_DMA_Init+0xac>)
 8004638:	4013      	ands	r3, r2
 800463a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800463c:	6821      	ldr	r1, [r4, #0]
 800463e:	680a      	ldr	r2, [r1, #0]
 8004640:	68a3      	ldr	r3, [r4, #8]
 8004642:	68e0      	ldr	r0, [r4, #12]
 8004644:	4303      	orrs	r3, r0
 8004646:	6920      	ldr	r0, [r4, #16]
 8004648:	4303      	orrs	r3, r0
 800464a:	6960      	ldr	r0, [r4, #20]
 800464c:	4303      	orrs	r3, r0
 800464e:	69a0      	ldr	r0, [r4, #24]
 8004650:	4303      	orrs	r3, r0
 8004652:	69e0      	ldr	r0, [r4, #28]
 8004654:	4303      	orrs	r3, r0
 8004656:	6a20      	ldr	r0, [r4, #32]
 8004658:	4303      	orrs	r3, r0
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800465e:	0020      	movs	r0, r4
 8004660:	f7ff ffaa 	bl	80045b8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004664:	68a2      	ldr	r2, [r4, #8]
 8004666:	2380      	movs	r3, #128	@ 0x80
 8004668:	01db      	lsls	r3, r3, #7
 800466a:	429a      	cmp	r2, r3
 800466c:	d018      	beq.n	80046a0 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800466e:	6861      	ldr	r1, [r4, #4]
 8004670:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004672:	23ff      	movs	r3, #255	@ 0xff
 8004674:	400b      	ands	r3, r1
 8004676:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004678:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800467a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800467c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	3b01      	subs	r3, #1
 8004682:	2b03      	cmp	r3, #3
 8004684:	d90f      	bls.n	80046a6 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800468a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800468c:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800468e:	2300      	movs	r3, #0
 8004690:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004692:	2225      	movs	r2, #37	@ 0x25
 8004694:	2101      	movs	r1, #1
 8004696:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004698:	3a01      	subs	r2, #1
 800469a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800469c:	2000      	movs	r0, #0
}
 800469e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046a0:	2300      	movs	r3, #0
 80046a2:	6063      	str	r3, [r4, #4]
 80046a4:	e7e3      	b.n	800466e <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046a6:	0020      	movs	r0, r4
 80046a8:	f7ff ffa2 	bl	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80046b4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	e7e9      	b.n	800468e <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80046ba:	2001      	movs	r0, #1
 80046bc:	e7ef      	b.n	800469e <HAL_DMA_Init+0x86>
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	bffdfff8 	.word	0xbffdfff8
 80046c4:	ffff800f 	.word	0xffff800f

080046c8 <HAL_DMA_Start_IT>:
{
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80046cc:	2024      	movs	r0, #36	@ 0x24
 80046ce:	5c20      	ldrb	r0, [r4, r0]
 80046d0:	2801      	cmp	r0, #1
 80046d2:	d046      	beq.n	8004762 <HAL_DMA_Start_IT+0x9a>
 80046d4:	2024      	movs	r0, #36	@ 0x24
 80046d6:	2501      	movs	r5, #1
 80046d8:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 80046da:	3001      	adds	r0, #1
 80046dc:	5c20      	ldrb	r0, [r4, r0]
 80046de:	2801      	cmp	r0, #1
 80046e0:	d007      	beq.n	80046f2 <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 80046e2:	2324      	movs	r3, #36	@ 0x24
 80046e4:	2200      	movs	r2, #0
 80046e6:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80046e8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 80046ea:	2324      	movs	r3, #36	@ 0x24
 80046ec:	2200      	movs	r2, #0
 80046ee:	54e2      	strb	r2, [r4, r3]
}
 80046f0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80046f2:	3024      	adds	r0, #36	@ 0x24
 80046f4:	3501      	adds	r5, #1
 80046f6:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f8:	2000      	movs	r0, #0
 80046fa:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	6828      	ldr	r0, [r5, #0]
 8004700:	2601      	movs	r6, #1
 8004702:	43b0      	bics	r0, r6
 8004704:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004706:	0020      	movs	r0, r4
 8004708:	f7ff ff32 	bl	8004570 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800470c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01c      	beq.n	800474c <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	210e      	movs	r1, #14
 8004718:	430b      	orrs	r3, r1
 800471a:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800471c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800471e:	6813      	ldr	r3, [r2, #0]
 8004720:	03db      	lsls	r3, r3, #15
 8004722:	d504      	bpl.n	800472e <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004724:	6811      	ldr	r1, [r2, #0]
 8004726:	2380      	movs	r3, #128	@ 0x80
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	430b      	orrs	r3, r1
 800472c:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800472e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	2280      	movs	r2, #128	@ 0x80
 8004738:	0052      	lsls	r2, r2, #1
 800473a:	430a      	orrs	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	6813      	ldr	r3, [r2, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	430b      	orrs	r3, r1
 8004746:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2000      	movs	r0, #0
 800474a:	e7ce      	b.n	80046ea <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	2104      	movs	r1, #4
 8004752:	438b      	bics	r3, r1
 8004754:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	6813      	ldr	r3, [r2, #0]
 800475a:	3106      	adds	r1, #6
 800475c:	430b      	orrs	r3, r1
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e7dc      	b.n	800471c <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8004762:	2002      	movs	r0, #2
 8004764:	e7c4      	b.n	80046f0 <HAL_DMA_Start_IT+0x28>
	...

08004768 <HAL_DMA_Abort>:
{
 8004768:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 800476a:	2800      	cmp	r0, #0
 800476c:	d036      	beq.n	80047dc <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800476e:	2325      	movs	r3, #37	@ 0x25
 8004770:	5cc3      	ldrb	r3, [r0, r3]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d006      	beq.n	8004784 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004776:	2304      	movs	r3, #4
 8004778:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800477a:	3320      	adds	r3, #32
 800477c:	2200      	movs	r2, #0
 800477e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8004780:	2001      	movs	r0, #1
}
 8004782:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004784:	6802      	ldr	r2, [r0, #0]
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	210e      	movs	r1, #14
 800478a:	438b      	bics	r3, r1
 800478c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800478e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004790:	6813      	ldr	r3, [r2, #0]
 8004792:	4913      	ldr	r1, [pc, #76]	@ (80047e0 <HAL_DMA_Abort+0x78>)
 8004794:	400b      	ands	r3, r1
 8004796:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004798:	6801      	ldr	r1, [r0, #0]
 800479a:	680a      	ldr	r2, [r1, #0]
 800479c:	2301      	movs	r3, #1
 800479e:	439a      	bics	r2, r3
 80047a0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80047a2:	4c10      	ldr	r4, [pc, #64]	@ (80047e4 <HAL_DMA_Abort+0x7c>)
 80047a4:	6862      	ldr	r2, [r4, #4]
 80047a6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80047a8:	211c      	movs	r1, #28
 80047aa:	4029      	ands	r1, r5
 80047ac:	408b      	lsls	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80047b4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80047b6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80047b8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4907      	ldr	r1, [pc, #28]	@ (80047e0 <HAL_DMA_Abort+0x78>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80047c8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80047ca:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80047cc:	2325      	movs	r3, #37	@ 0x25
 80047ce:	2201      	movs	r2, #1
 80047d0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80047d2:	3b01      	subs	r3, #1
 80047d4:	2200      	movs	r2, #0
 80047d6:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80047d8:	2000      	movs	r0, #0
 80047da:	e7d2      	b.n	8004782 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 80047dc:	2001      	movs	r0, #1
 80047de:	e7d0      	b.n	8004782 <HAL_DMA_Abort+0x1a>
 80047e0:	fffffeff 	.word	0xfffffeff
 80047e4:	40020000 	.word	0x40020000

080047e8 <HAL_DMA_IRQHandler>:
{
 80047e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 80047ea:	4b31      	ldr	r3, [pc, #196]	@ (80048b0 <HAL_DMA_IRQHandler+0xc8>)
 80047ec:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80047ee:	6804      	ldr	r4, [r0, #0]
 80047f0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80047f2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80047f4:	231c      	movs	r3, #28
 80047f6:	4013      	ands	r3, r2
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	4211      	tst	r1, r2
 80047fe:	d016      	beq.n	800482e <HAL_DMA_IRQHandler+0x46>
 8004800:	076a      	lsls	r2, r5, #29
 8004802:	d514      	bpl.n	800482e <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	069b      	lsls	r3, r3, #26
 8004808:	d403      	bmi.n	8004812 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	4393      	bics	r3, r2
 8004810:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004812:	4c27      	ldr	r4, [pc, #156]	@ (80048b0 <HAL_DMA_IRQHandler+0xc8>)
 8004814:	6863      	ldr	r3, [r4, #4]
 8004816:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004818:	211c      	movs	r1, #28
 800481a:	4011      	ands	r1, r2
 800481c:	2204      	movs	r2, #4
 800481e:	408a      	lsls	r2, r1
 8004820:	4313      	orrs	r3, r2
 8004822:	6063      	str	r3, [r4, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004824:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004826:	2b00      	cmp	r3, #0
 8004828:	d000      	beq.n	800482c <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 800482a:	4798      	blx	r3
}
 800482c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800482e:	2202      	movs	r2, #2
 8004830:	409a      	lsls	r2, r3
 8004832:	4211      	tst	r1, r2
 8004834:	d01c      	beq.n	8004870 <HAL_DMA_IRQHandler+0x88>
 8004836:	07aa      	lsls	r2, r5, #30
 8004838:	d51a      	bpl.n	8004870 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	069b      	lsls	r3, r3, #26
 800483e:	d406      	bmi.n	800484e <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	220a      	movs	r2, #10
 8004844:	4393      	bics	r3, r2
 8004846:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004848:	2325      	movs	r3, #37	@ 0x25
 800484a:	3a09      	subs	r2, #9
 800484c:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800484e:	4c18      	ldr	r4, [pc, #96]	@ (80048b0 <HAL_DMA_IRQHandler+0xc8>)
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004854:	211c      	movs	r1, #28
 8004856:	4011      	ands	r1, r2
 8004858:	2202      	movs	r2, #2
 800485a:	408a      	lsls	r2, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004860:	2324      	movs	r3, #36	@ 0x24
 8004862:	2200      	movs	r2, #0
 8004864:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8004866:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0df      	beq.n	800482c <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 800486c:	4798      	blx	r3
 800486e:	e7dd      	b.n	800482c <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004870:	2208      	movs	r2, #8
 8004872:	409a      	lsls	r2, r3
 8004874:	4211      	tst	r1, r2
 8004876:	d0d9      	beq.n	800482c <HAL_DMA_IRQHandler+0x44>
 8004878:	072d      	lsls	r5, r5, #28
 800487a:	d5d7      	bpl.n	800482c <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	220e      	movs	r2, #14
 8004880:	4393      	bics	r3, r2
 8004882:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004884:	4c0a      	ldr	r4, [pc, #40]	@ (80048b0 <HAL_DMA_IRQHandler+0xc8>)
 8004886:	6862      	ldr	r2, [r4, #4]
 8004888:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800488a:	211c      	movs	r1, #28
 800488c:	4019      	ands	r1, r3
 800488e:	2301      	movs	r3, #1
 8004890:	001d      	movs	r5, r3
 8004892:	408d      	lsls	r5, r1
 8004894:	432a      	orrs	r2, r5
 8004896:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004898:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800489a:	2225      	movs	r2, #37	@ 0x25
 800489c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800489e:	3323      	adds	r3, #35	@ 0x23
 80048a0:	2200      	movs	r2, #0
 80048a2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80048a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0c0      	beq.n	800482c <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80048aa:	4798      	blx	r3
  return;
 80048ac:	e7be      	b.n	800482c <HAL_DMA_IRQHandler+0x44>
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	40020000 	.word	0x40020000

080048b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80048b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b6:	46d6      	mov	lr, sl
 80048b8:	464f      	mov	r7, r9
 80048ba:	4646      	mov	r6, r8
 80048bc:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80048be:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80048c0:	e03b      	b.n	800493a <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80048c2:	2505      	movs	r5, #5
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x14>
 80048c6:	2500      	movs	r5, #0
 80048c8:	40a5      	lsls	r5, r4
 80048ca:	002c      	movs	r4, r5
 80048cc:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 80048ce:	4d61      	ldr	r5, [pc, #388]	@ (8004a54 <HAL_GPIO_Init+0x1a0>)
 80048d0:	3218      	adds	r2, #24
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80048d6:	2280      	movs	r2, #128	@ 0x80
 80048d8:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 80048da:	464a      	mov	r2, r9
 80048dc:	43d2      	mvns	r2, r2
 80048de:	003d      	movs	r5, r7
 80048e0:	464c      	mov	r4, r9
 80048e2:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048e4:	684c      	ldr	r4, [r1, #4]
 80048e6:	03e4      	lsls	r4, r4, #15
 80048e8:	d502      	bpl.n	80048f0 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 80048ea:	003d      	movs	r5, r7
 80048ec:	464c      	mov	r4, r9
 80048ee:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 80048f0:	4c58      	ldr	r4, [pc, #352]	@ (8004a54 <HAL_GPIO_Init+0x1a0>)
 80048f2:	2780      	movs	r7, #128	@ 0x80
 80048f4:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 80048f6:	2584      	movs	r5, #132	@ 0x84
 80048f8:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 80048fa:	003d      	movs	r5, r7
 80048fc:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048fe:	684c      	ldr	r4, [r1, #4]
 8004900:	03a4      	lsls	r4, r4, #14
 8004902:	d502      	bpl.n	800490a <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8004904:	003d      	movs	r5, r7
 8004906:	464c      	mov	r4, r9
 8004908:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 800490a:	4c52      	ldr	r4, [pc, #328]	@ (8004a54 <HAL_GPIO_Init+0x1a0>)
 800490c:	2784      	movs	r7, #132	@ 0x84
 800490e:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004910:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8004912:	003d      	movs	r5, r7
 8004914:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004916:	684c      	ldr	r4, [r1, #4]
 8004918:	02e4      	lsls	r4, r4, #11
 800491a:	d502      	bpl.n	8004922 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 800491c:	003d      	movs	r5, r7
 800491e:	464c      	mov	r4, r9
 8004920:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8004922:	4c4c      	ldr	r4, [pc, #304]	@ (8004a54 <HAL_GPIO_Init+0x1a0>)
 8004924:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8004926:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8004928:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492a:	684c      	ldr	r4, [r1, #4]
 800492c:	02a4      	lsls	r4, r4, #10
 800492e:	d501      	bpl.n	8004934 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8004930:	464a      	mov	r2, r9
 8004932:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8004934:	4c47      	ldr	r4, [pc, #284]	@ (8004a54 <HAL_GPIO_Init+0x1a0>)
 8004936:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8004938:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800493a:	680c      	ldr	r4, [r1, #0]
 800493c:	0022      	movs	r2, r4
 800493e:	40da      	lsrs	r2, r3
 8004940:	d100      	bne.n	8004944 <HAL_GPIO_Init+0x90>
 8004942:	e081      	b.n	8004a48 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004944:	2201      	movs	r2, #1
 8004946:	409a      	lsls	r2, r3
 8004948:	0026      	movs	r6, r4
 800494a:	4016      	ands	r6, r2
 800494c:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 800494e:	4214      	tst	r4, r2
 8004950:	d0f2      	beq.n	8004938 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004952:	684c      	ldr	r4, [r1, #4]
 8004954:	2c02      	cmp	r4, #2
 8004956:	d001      	beq.n	800495c <HAL_GPIO_Init+0xa8>
 8004958:	2c12      	cmp	r4, #18
 800495a:	d118      	bne.n	800498e <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 800495c:	08dd      	lsrs	r5, r3, #3
 800495e:	3508      	adds	r5, #8
 8004960:	00ad      	lsls	r5, r5, #2
 8004962:	582c      	ldr	r4, [r5, r0]
 8004964:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8004966:	2707      	movs	r7, #7
 8004968:	401f      	ands	r7, r3
 800496a:	00bf      	lsls	r7, r7, #2
 800496c:	240f      	movs	r4, #15
 800496e:	46a2      	mov	sl, r4
 8004970:	0026      	movs	r6, r4
 8004972:	40be      	lsls	r6, r7
 8004974:	46b0      	mov	r8, r6
 8004976:	4666      	mov	r6, ip
 8004978:	4644      	mov	r4, r8
 800497a:	43a6      	bics	r6, r4
 800497c:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800497e:	690c      	ldr	r4, [r1, #16]
 8004980:	4656      	mov	r6, sl
 8004982:	4026      	ands	r6, r4
 8004984:	0034      	movs	r4, r6
 8004986:	40bc      	lsls	r4, r7
 8004988:	4666      	mov	r6, ip
 800498a:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 800498c:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 800498e:	6804      	ldr	r4, [r0, #0]
 8004990:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004992:	005d      	lsls	r5, r3, #1
 8004994:	2403      	movs	r4, #3
 8004996:	46a2      	mov	sl, r4
 8004998:	0027      	movs	r7, r4
 800499a:	40af      	lsls	r7, r5
 800499c:	46b8      	mov	r8, r7
 800499e:	43ff      	mvns	r7, r7
 80049a0:	4666      	mov	r6, ip
 80049a2:	4644      	mov	r4, r8
 80049a4:	43a6      	bics	r6, r4
 80049a6:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a8:	684c      	ldr	r4, [r1, #4]
 80049aa:	4656      	mov	r6, sl
 80049ac:	4026      	ands	r6, r4
 80049ae:	0034      	movs	r4, r6
 80049b0:	40ac      	lsls	r4, r5
 80049b2:	4666      	mov	r6, ip
 80049b4:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 80049b6:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049b8:	684c      	ldr	r4, [r1, #4]
 80049ba:	1e66      	subs	r6, r4, #1
 80049bc:	2e01      	cmp	r6, #1
 80049be:	d903      	bls.n	80049c8 <HAL_GPIO_Init+0x114>
 80049c0:	2c11      	cmp	r4, #17
 80049c2:	d001      	beq.n	80049c8 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049c4:	2c12      	cmp	r4, #18
 80049c6:	d112      	bne.n	80049ee <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 80049c8:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049ca:	403c      	ands	r4, r7
 80049cc:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80049ce:	68cc      	ldr	r4, [r1, #12]
 80049d0:	40ac      	lsls	r4, r5
 80049d2:	4666      	mov	r6, ip
 80049d4:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 80049d6:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 80049d8:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049da:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049dc:	684a      	ldr	r2, [r1, #4]
 80049de:	0912      	lsrs	r2, r2, #4
 80049e0:	4694      	mov	ip, r2
 80049e2:	2201      	movs	r2, #1
 80049e4:	4666      	mov	r6, ip
 80049e6:	4032      	ands	r2, r6
 80049e8:	409a      	lsls	r2, r3
 80049ea:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 80049ec:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80049ee:	684a      	ldr	r2, [r1, #4]
 80049f0:	2a03      	cmp	r2, #3
 80049f2:	d005      	beq.n	8004a00 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 80049f4:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049f6:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80049f8:	688a      	ldr	r2, [r1, #8]
 80049fa:	40aa      	lsls	r2, r5
 80049fc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 80049fe:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a00:	684a      	ldr	r2, [r1, #4]
 8004a02:	00d2      	lsls	r2, r2, #3
 8004a04:	d598      	bpl.n	8004938 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8004a06:	089a      	lsrs	r2, r3, #2
 8004a08:	0014      	movs	r4, r2
 8004a0a:	3418      	adds	r4, #24
 8004a0c:	00a4      	lsls	r4, r4, #2
 8004a0e:	4d11      	ldr	r5, [pc, #68]	@ (8004a54 <HAL_GPIO_Init+0x1a0>)
 8004a10:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004a12:	2403      	movs	r4, #3
 8004a14:	401c      	ands	r4, r3
 8004a16:	00e4      	lsls	r4, r4, #3
 8004a18:	250f      	movs	r5, #15
 8004a1a:	40a5      	lsls	r5, r4
 8004a1c:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004a1e:	25a0      	movs	r5, #160	@ 0xa0
 8004a20:	05ed      	lsls	r5, r5, #23
 8004a22:	42a8      	cmp	r0, r5
 8004a24:	d100      	bne.n	8004a28 <HAL_GPIO_Init+0x174>
 8004a26:	e74e      	b.n	80048c6 <HAL_GPIO_Init+0x12>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	@ (8004a58 <HAL_GPIO_Init+0x1a4>)
 8004a2a:	42a8      	cmp	r0, r5
 8004a2c:	d008      	beq.n	8004a40 <HAL_GPIO_Init+0x18c>
 8004a2e:	4d0b      	ldr	r5, [pc, #44]	@ (8004a5c <HAL_GPIO_Init+0x1a8>)
 8004a30:	42a8      	cmp	r0, r5
 8004a32:	d007      	beq.n	8004a44 <HAL_GPIO_Init+0x190>
 8004a34:	4d0a      	ldr	r5, [pc, #40]	@ (8004a60 <HAL_GPIO_Init+0x1ac>)
 8004a36:	42a8      	cmp	r0, r5
 8004a38:	d100      	bne.n	8004a3c <HAL_GPIO_Init+0x188>
 8004a3a:	e742      	b.n	80048c2 <HAL_GPIO_Init+0xe>
 8004a3c:	2506      	movs	r5, #6
 8004a3e:	e743      	b.n	80048c8 <HAL_GPIO_Init+0x14>
 8004a40:	2501      	movs	r5, #1
 8004a42:	e741      	b.n	80048c8 <HAL_GPIO_Init+0x14>
 8004a44:	2502      	movs	r5, #2
 8004a46:	e73f      	b.n	80048c8 <HAL_GPIO_Init+0x14>
  }
}
 8004a48:	bce0      	pop	{r5, r6, r7}
 8004a4a:	46ba      	mov	sl, r7
 8004a4c:	46b1      	mov	r9, r6
 8004a4e:	46a8      	mov	r8, r5
 8004a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	40021800 	.word	0x40021800
 8004a58:	50000400 	.word	0x50000400
 8004a5c:	50000800 	.word	0x50000800
 8004a60:	50001400 	.word	0x50001400

08004a64 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004a64:	6903      	ldr	r3, [r0, #16]
 8004a66:	420b      	tst	r3, r1
 8004a68:	d001      	beq.n	8004a6e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004a6a:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004a6c:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e7fc      	b.n	8004a6c <HAL_GPIO_ReadPin+0x8>

08004a72 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a76:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a78:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a7a:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8004a7c:	e7fc      	b.n	8004a78 <HAL_GPIO_WritePin+0x6>

08004a7e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a7e:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a80:	0013      	movs	r3, r2
 8004a82:	400b      	ands	r3, r1
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	4391      	bics	r1, r2
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6183      	str	r3, [r0, #24]
}
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a94:	d100      	bne.n	8004a98 <HAL_RCC_OscConfig+0x8>
 8004a96:	e139      	b.n	8004d0c <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a98:	6803      	ldr	r3, [r0, #0]
 8004a9a:	07db      	lsls	r3, r3, #31
 8004a9c:	d52c      	bpl.n	8004af8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9e:	4ba1      	ldr	r3, [pc, #644]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	2338      	movs	r3, #56	@ 0x38
 8004aa4:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d022      	beq.n	8004af0 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aaa:	6843      	ldr	r3, [r0, #4]
 8004aac:	2280      	movs	r2, #128	@ 0x80
 8004aae:	0252      	lsls	r2, r2, #9
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d02e      	beq.n	8004b12 <HAL_RCC_OscConfig+0x82>
 8004ab4:	22a0      	movs	r2, #160	@ 0xa0
 8004ab6:	02d2      	lsls	r2, r2, #11
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d031      	beq.n	8004b20 <HAL_RCC_OscConfig+0x90>
 8004abc:	4b99      	ldr	r3, [pc, #612]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4999      	ldr	r1, [pc, #612]	@ (8004d28 <HAL_RCC_OscConfig+0x298>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4998      	ldr	r1, [pc, #608]	@ (8004d2c <HAL_RCC_OscConfig+0x29c>)
 8004aca:	400a      	ands	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d031      	beq.n	8004b38 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7ff f8bc 	bl	8003c50 <HAL_GetTick>
 8004ad8:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ada:	4b92      	ldr	r3, [pc, #584]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	039b      	lsls	r3, r3, #14
 8004ae0:	d40a      	bmi.n	8004af8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004ae2:	f7ff f8b5 	bl	8003c50 <HAL_GetTick>
 8004ae6:	1b40      	subs	r0, r0, r5
 8004ae8:	2864      	cmp	r0, #100	@ 0x64
 8004aea:	d9f6      	bls.n	8004ada <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
 8004aee:	e10e      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004af0:	6843      	ldr	r3, [r0, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d100      	bne.n	8004af8 <HAL_RCC_OscConfig+0x68>
 8004af6:	e10b      	b.n	8004d10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	079b      	lsls	r3, r3, #30
 8004afc:	d547      	bpl.n	8004b8e <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afe:	4b89      	ldr	r3, [pc, #548]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004b04:	421a      	tst	r2, r3
 8004b06:	d161      	bne.n	8004bcc <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d122      	bne.n	8004b54 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8004b0e:	2001      	movs	r0, #1
 8004b10:	e0fd      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b12:	4a84      	ldr	r2, [pc, #528]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004b14:	6811      	ldr	r1, [r2, #0]
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	025b      	lsls	r3, r3, #9
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e7d6      	b.n	8004ace <HAL_RCC_OscConfig+0x3e>
 8004b20:	4b80      	ldr	r3, [pc, #512]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	2280      	movs	r2, #128	@ 0x80
 8004b26:	02d2      	lsls	r2, r2, #11
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	6819      	ldr	r1, [r3, #0]
 8004b2e:	2280      	movs	r2, #128	@ 0x80
 8004b30:	0252      	lsls	r2, r2, #9
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e7ca      	b.n	8004ace <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8004b38:	f7ff f88a 	bl	8003c50 <HAL_GetTick>
 8004b3c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b3e:	4b79      	ldr	r3, [pc, #484]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	039b      	lsls	r3, r3, #14
 8004b44:	d5d8      	bpl.n	8004af8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b46:	f7ff f883 	bl	8003c50 <HAL_GetTick>
 8004b4a:	1b40      	subs	r0, r0, r5
 8004b4c:	2864      	cmp	r0, #100	@ 0x64
 8004b4e:	d9f6      	bls.n	8004b3e <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8004b50:	2003      	movs	r0, #3
 8004b52:	e0dc      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b73      	ldr	r3, [pc, #460]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4975      	ldr	r1, [pc, #468]	@ (8004d30 <HAL_RCC_OscConfig+0x2a0>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	6961      	ldr	r1, [r4, #20]
 8004b5e:	0209      	lsls	r1, r1, #8
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4973      	ldr	r1, [pc, #460]	@ (8004d34 <HAL_RCC_OscConfig+0x2a4>)
 8004b68:	400a      	ands	r2, r1
 8004b6a:	6921      	ldr	r1, [r4, #16]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	0adb      	lsrs	r3, r3, #11
 8004b74:	2207      	movs	r2, #7
 8004b76:	401a      	ands	r2, r3
 8004b78:	4b6f      	ldr	r3, [pc, #444]	@ (8004d38 <HAL_RCC_OscConfig+0x2a8>)
 8004b7a:	40d3      	lsrs	r3, r2
 8004b7c:	4a6f      	ldr	r2, [pc, #444]	@ (8004d3c <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b80:	4b6f      	ldr	r3, [pc, #444]	@ (8004d40 <HAL_RCC_OscConfig+0x2b0>)
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	f7ff f820 	bl	8003bc8 <HAL_InitTick>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d000      	beq.n	8004b8e <HAL_RCC_OscConfig+0xfe>
 8004b8c:	e0c2      	b.n	8004d14 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	d557      	bpl.n	8004c44 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004b94:	4b63      	ldr	r3, [pc, #396]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	2338      	movs	r3, #56	@ 0x38
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	d04e      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba0:	69a3      	ldr	r3, [r4, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d077      	beq.n	8004c96 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004ba8:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004baa:	2101      	movs	r1, #1
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7ff f84e 	bl	8003c50 <HAL_GetTick>
 8004bb4:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bba:	079b      	lsls	r3, r3, #30
 8004bbc:	d442      	bmi.n	8004c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004bbe:	f7ff f847 	bl	8003c50 <HAL_GetTick>
 8004bc2:	1b40      	subs	r0, r0, r5
 8004bc4:	2802      	cmp	r0, #2
 8004bc6:	d9f6      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8004bc8:	2003      	movs	r0, #3
 8004bca:	e0a0      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d022      	beq.n	8004c18 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bd2:	4a54      	ldr	r2, [pc, #336]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	4957      	ldr	r1, [pc, #348]	@ (8004d34 <HAL_RCC_OscConfig+0x2a4>)
 8004bd8:	400b      	ands	r3, r1
 8004bda:	6921      	ldr	r1, [r4, #16]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	2380      	movs	r3, #128	@ 0x80
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bea:	f7ff f831 	bl	8003c50 <HAL_GetTick>
 8004bee:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	055b      	lsls	r3, r3, #21
 8004bf6:	d406      	bmi.n	8004c06 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004bf8:	f7ff f82a 	bl	8003c50 <HAL_GetTick>
 8004bfc:	1b40      	subs	r0, r0, r5
 8004bfe:	2802      	cmp	r0, #2
 8004c00:	d9f6      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
 8004c04:	e083      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	4947      	ldr	r1, [pc, #284]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c08:	684b      	ldr	r3, [r1, #4]
 8004c0a:	4a49      	ldr	r2, [pc, #292]	@ (8004d30 <HAL_RCC_OscConfig+0x2a0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	6962      	ldr	r2, [r4, #20]
 8004c10:	0212      	lsls	r2, r2, #8
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
 8004c16:	e7ba      	b.n	8004b8e <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8004c18:	4a42      	ldr	r2, [pc, #264]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c1a:	6813      	ldr	r3, [r2, #0]
 8004c1c:	4949      	ldr	r1, [pc, #292]	@ (8004d44 <HAL_RCC_OscConfig+0x2b4>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c22:	f7ff f815 	bl	8003c50 <HAL_GetTick>
 8004c26:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c28:	4b3e      	ldr	r3, [pc, #248]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	055b      	lsls	r3, r3, #21
 8004c2e:	d5ae      	bpl.n	8004b8e <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c30:	f7ff f80e 	bl	8003c50 <HAL_GetTick>
 8004c34:	1b40      	subs	r0, r0, r5
 8004c36:	2802      	cmp	r0, #2
 8004c38:	d9f6      	bls.n	8004c28 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	e067      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004c3e:	69a3      	ldr	r3, [r4, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d069      	beq.n	8004d18 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	075b      	lsls	r3, r3, #29
 8004c48:	d568      	bpl.n	8004d1c <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004c4a:	4b36      	ldr	r3, [pc, #216]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	2338      	movs	r3, #56	@ 0x38
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d032      	beq.n	8004cbc <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c56:	68a3      	ldr	r3, [r4, #8]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d034      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x236>
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d038      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x242>
 8004c60:	4b30      	ldr	r3, [pc, #192]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c64:	2101      	movs	r1, #1
 8004c66:	438a      	bics	r2, r1
 8004c68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c6c:	3103      	adds	r1, #3
 8004c6e:	438a      	bics	r2, r1
 8004c70:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d038      	beq.n	8004cea <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fe ffea 	bl	8003c50 <HAL_GetTick>
 8004c7c:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004c7e:	4b29      	ldr	r3, [pc, #164]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	d42f      	bmi.n	8004ce6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fe ffe3 	bl	8003c50 <HAL_GetTick>
 8004c8a:	1b00      	subs	r0, r0, r4
 8004c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d48 <HAL_RCC_OscConfig+0x2b8>)
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	d9f5      	bls.n	8004c7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c92:	2003      	movs	r0, #3
 8004c94:	e03b      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8004c96:	4a23      	ldr	r2, [pc, #140]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004c98:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	438b      	bics	r3, r1
 8004c9e:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004ca0:	f7fe ffd6 	bl	8003c50 <HAL_GetTick>
 8004ca4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	d5ca      	bpl.n	8004c44 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004cae:	f7fe ffcf 	bl	8003c50 <HAL_GetTick>
 8004cb2:	1b40      	subs	r0, r0, r5
 8004cb4:	2802      	cmp	r0, #2
 8004cb6:	d9f6      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004cb8:	2003      	movs	r0, #3
 8004cba:	e028      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004cbc:	68a3      	ldr	r3, [r4, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02e      	beq.n	8004d20 <HAL_RCC_OscConfig+0x290>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e023      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc6:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004cc8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004cd0:	e7cf      	b.n	8004c72 <HAL_RCC_OscConfig+0x1e2>
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004cdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cde:	3903      	subs	r1, #3
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ce4:	e7c5      	b.n	8004c72 <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e011      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8004cea:	f7fe ffb1 	bl	8003c50 <HAL_GetTick>
 8004cee:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <HAL_RCC_OscConfig+0x294>)
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf4:	079b      	lsls	r3, r3, #30
 8004cf6:	d507      	bpl.n	8004d08 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf8:	f7fe ffaa 	bl	8003c50 <HAL_GetTick>
 8004cfc:	1b00      	subs	r0, r0, r4
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <HAL_RCC_OscConfig+0x2b8>)
 8004d00:	4298      	cmp	r0, r3
 8004d02:	d9f5      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8004d04:	2003      	movs	r0, #3
 8004d06:	e002      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8004d0c:	2001      	movs	r0, #1
}
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004d10:	2001      	movs	r0, #1
 8004d12:	e7fc      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
 8004d16:	e7fa      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
 8004d1a:	e7f8      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e7f6      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8004d20:	2001      	movs	r0, #1
 8004d22:	e7f4      	b.n	8004d0e <HAL_RCC_OscConfig+0x27e>
 8004d24:	40021000 	.word	0x40021000
 8004d28:	fffeffff 	.word	0xfffeffff
 8004d2c:	fffbffff 	.word	0xfffbffff
 8004d30:	ffff80ff 	.word	0xffff80ff
 8004d34:	ffffc7ff 	.word	0xffffc7ff
 8004d38:	02dc6c00 	.word	0x02dc6c00
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	2000000c 	.word	0x2000000c
 8004d44:	fffffeff 	.word	0xfffffeff
 8004d48:	00001388 	.word	0x00001388

08004d4c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d4c:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2238      	movs	r2, #56	@ 0x38
 8004d52:	421a      	tst	r2, r3
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d56:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	0ad2      	lsrs	r2, r2, #11
 8004d5c:	2307      	movs	r3, #7
 8004d5e:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d60:	4810      	ldr	r0, [pc, #64]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x58>)
 8004d62:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004d64:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d66:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	2338      	movs	r3, #56	@ 0x38
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d010      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004d72:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	2338      	movs	r3, #56	@ 0x38
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d00c      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004d7e:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	2338      	movs	r3, #56	@ 0x38
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b18      	cmp	r3, #24
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8004d8a:	2000      	movs	r0, #0
  return sysclockfreq;
 8004d8c:	e7ea      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8004d8e:	20fa      	movs	r0, #250	@ 0xfa
 8004d90:	01c0      	lsls	r0, r0, #7
 8004d92:	e7e7      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8004d94:	4804      	ldr	r0, [pc, #16]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8004d96:	e7e5      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8004d98:	2080      	movs	r0, #128	@ 0x80
 8004d9a:	0200      	lsls	r0, r0, #8
 8004d9c:	e7e2      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x18>
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	40021000 	.word	0x40021000
 8004da4:	02dc6c00 	.word	0x02dc6c00
 8004da8:	007a1200 	.word	0x007a1200

08004dac <HAL_RCC_ClockConfig>:
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	0004      	movs	r4, r0
 8004db0:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d100      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xc>
 8004db6:	e0aa      	b.n	8004f0e <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b57      	ldr	r3, [pc, #348]	@ (8004f18 <HAL_RCC_ClockConfig+0x16c>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	2307      	movs	r3, #7
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d328      	bcc.n	8004e16 <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	079a      	lsls	r2, r3, #30
 8004dc8:	d510      	bpl.n	8004dec <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dca:	075b      	lsls	r3, r3, #29
 8004dcc:	d507      	bpl.n	8004dde <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dce:	4953      	ldr	r1, [pc, #332]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004dd0:	688a      	ldr	r2, [r1, #8]
 8004dd2:	4b53      	ldr	r3, [pc, #332]	@ (8004f20 <HAL_RCC_ClockConfig+0x174>)
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	23b0      	movs	r3, #176	@ 0xb0
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dde:	4a4f      	ldr	r2, [pc, #316]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004de0:	6893      	ldr	r3, [r2, #8]
 8004de2:	4950      	ldr	r1, [pc, #320]	@ (8004f24 <HAL_RCC_ClockConfig+0x178>)
 8004de4:	400b      	ands	r3, r1
 8004de6:	68e1      	ldr	r1, [r4, #12]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	07db      	lsls	r3, r3, #31
 8004df0:	d552      	bpl.n	8004e98 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004df2:	4a4a      	ldr	r2, [pc, #296]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004df4:	6813      	ldr	r3, [r2, #0]
 8004df6:	211c      	movs	r1, #28
 8004df8:	438b      	bics	r3, r1
 8004dfa:	68a1      	ldr	r1, [r4, #8]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6013      	str	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d01e      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x98>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d138      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e0a:	4a44      	ldr	r2, [pc, #272]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	0552      	lsls	r2, r2, #21
 8004e10:	d41b      	bmi.n	8004e4a <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8004e12:	2001      	movs	r0, #1
 8004e14:	e063      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4a40      	ldr	r2, [pc, #256]	@ (8004f18 <HAL_RCC_ClockConfig+0x16c>)
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	2107      	movs	r1, #7
 8004e1c:	438b      	bics	r3, r1
 8004e1e:	432b      	orrs	r3, r5
 8004e20:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e22:	f7fe ff15 	bl	8003c50 <HAL_GetTick>
 8004e26:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e28:	4b3b      	ldr	r3, [pc, #236]	@ (8004f18 <HAL_RCC_ClockConfig+0x16c>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	4013      	ands	r3, r2
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	d0c7      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f7fe ff0c 	bl	8003c50 <HAL_GetTick>
 8004e38:	1b80      	subs	r0, r0, r6
 8004e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f28 <HAL_RCC_ClockConfig+0x17c>)
 8004e3c:	4290      	cmp	r0, r2
 8004e3e:	d9f3      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8004e40:	2003      	movs	r0, #3
 8004e42:	e04c      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	0392      	lsls	r2, r2, #14
 8004e48:	d563      	bpl.n	8004f12 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	4934      	ldr	r1, [pc, #208]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004e4c:	688a      	ldr	r2, [r1, #8]
 8004e4e:	2007      	movs	r0, #7
 8004e50:	4382      	bics	r2, r0
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004e56:	f7fe fefb 	bl	8003c50 <HAL_GetTick>
 8004e5a:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2238      	movs	r2, #56	@ 0x38
 8004e62:	401a      	ands	r2, r3
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d015      	beq.n	8004e98 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6c:	f7fe fef0 	bl	8003c50 <HAL_GetTick>
 8004e70:	1b80      	subs	r0, r0, r6
 8004e72:	4b2d      	ldr	r3, [pc, #180]	@ (8004f28 <HAL_RCC_ClockConfig+0x17c>)
 8004e74:	4298      	cmp	r0, r3
 8004e76:	d9f1      	bls.n	8004e5c <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8004e78:	2003      	movs	r0, #3
 8004e7a:	e030      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e80:	4a26      	ldr	r2, [pc, #152]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004e82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e84:	0792      	lsls	r2, r2, #30
 8004e86:	d4e0      	bmi.n	8004e4a <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8004e88:	2001      	movs	r0, #1
 8004e8a:	e028      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004e8c:	4a23      	ldr	r2, [pc, #140]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004e8e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8004e90:	0792      	lsls	r2, r2, #30
 8004e92:	d4da      	bmi.n	8004e4a <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8004e94:	2001      	movs	r0, #1
 8004e96:	e022      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e98:	4b1f      	ldr	r3, [pc, #124]	@ (8004f18 <HAL_RCC_ClockConfig+0x16c>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2307      	movs	r3, #7
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	d81d      	bhi.n	8004ee0 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	075b      	lsls	r3, r3, #29
 8004ea8:	d506      	bpl.n	8004eb8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004eac:	6893      	ldr	r3, [r2, #8]
 8004eae:	491f      	ldr	r1, [pc, #124]	@ (8004f2c <HAL_RCC_ClockConfig+0x180>)
 8004eb0:	400b      	ands	r3, r1
 8004eb2:	6921      	ldr	r1, [r4, #16]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004eb8:	f7ff ff48 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004ebc:	4b17      	ldr	r3, [pc, #92]	@ (8004f1c <HAL_RCC_ClockConfig+0x170>)
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	0a12      	lsrs	r2, r2, #8
 8004ec2:	230f      	movs	r3, #15
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_RCC_ClockConfig+0x184>)
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	589a      	ldr	r2, [r3, r2]
 8004ecc:	231f      	movs	r3, #31
 8004ece:	4013      	ands	r3, r2
 8004ed0:	40d8      	lsrs	r0, r3
 8004ed2:	4b18      	ldr	r3, [pc, #96]	@ (8004f34 <HAL_RCC_ClockConfig+0x188>)
 8004ed4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004ed6:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <HAL_RCC_ClockConfig+0x18c>)
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	f7fe fe75 	bl	8003bc8 <HAL_InitTick>
}
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <HAL_RCC_ClockConfig+0x16c>)
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	2107      	movs	r1, #7
 8004ee6:	438b      	bics	r3, r1
 8004ee8:	432b      	orrs	r3, r5
 8004eea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004eec:	f7fe feb0 	bl	8003c50 <HAL_GetTick>
 8004ef0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCC_ClockConfig+0x16c>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	2307      	movs	r3, #7
 8004ef8:	4013      	ands	r3, r2
 8004efa:	42ab      	cmp	r3, r5
 8004efc:	d0d2      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004efe:	f7fe fea7 	bl	8003c50 <HAL_GetTick>
 8004f02:	1b80      	subs	r0, r0, r6
 8004f04:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <HAL_RCC_ClockConfig+0x17c>)
 8004f06:	4298      	cmp	r0, r3
 8004f08:	d9f3      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	e7e7      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8004f0e:	2001      	movs	r0, #1
 8004f10:	e7e5      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8004f12:	2001      	movs	r0, #1
 8004f14:	e7e3      	b.n	8004ede <HAL_RCC_ClockConfig+0x132>
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	ffff84ff 	.word	0xffff84ff
 8004f24:	fffff0ff 	.word	0xfffff0ff
 8004f28:	00001388 	.word	0x00001388
 8004f2c:	ffff8fff 	.word	0xffff8fff
 8004f30:	0800628c 	.word	0x0800628c
 8004f34:	20000004 	.word	0x20000004
 8004f38:	2000000c 	.word	0x2000000c

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f42:	6803      	ldr	r3, [r0, #0]
 8004f44:	039b      	lsls	r3, r3, #14
 8004f46:	d54e      	bpl.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xaa>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f48:	4b42      	ldr	r3, [pc, #264]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	d435      	bmi.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b40      	ldr	r3, [pc, #256]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f54:	2180      	movs	r1, #128	@ 0x80
 8004f56:	0549      	lsls	r1, r1, #21
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	400b      	ands	r3, r1
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f64:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004f68:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8004f6a:	22c0      	movs	r2, #192	@ 0xc0
 8004f6c:	0092      	lsls	r2, r2, #2
 8004f6e:	000b      	movs	r3, r1
 8004f70:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f72:	4211      	tst	r1, r2
 8004f74:	d010      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f76:	69a2      	ldr	r2, [r4, #24]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d00d      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004f7c:	4a35      	ldr	r2, [pc, #212]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004f7e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004f80:	4935      	ldr	r1, [pc, #212]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004f82:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f84:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8004f86:	2180      	movs	r1, #128	@ 0x80
 8004f88:	0249      	lsls	r1, r1, #9
 8004f8a:	4301      	orrs	r1, r0
 8004f8c:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f8e:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8004f90:	4832      	ldr	r0, [pc, #200]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8004f92:	4001      	ands	r1, r0
 8004f94:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004f96:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004f98:	07db      	lsls	r3, r3, #31
 8004f9a:	d411      	bmi.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004f9e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004fa0:	492d      	ldr	r1, [pc, #180]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004fa2:	400b      	ands	r3, r1
 8004fa4:	69a1      	ldr	r1, [r4, #24]
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004faa:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fac:	2d01      	cmp	r5, #1
 8004fae:	d11b      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb0:	4a28      	ldr	r2, [pc, #160]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004fb2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004fb4:	492a      	ldr	r1, [pc, #168]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004fba:	e015      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	e7d2      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8004fc0:	f7fe fe46 	bl	8003c50 <HAL_GetTick>
 8004fc4:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004fc6:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	d407      	bmi.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fce:	f7fe fe3f 	bl	8003c50 <HAL_GetTick>
 8004fd2:	1b80      	subs	r0, r0, r6
 8004fd4:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004fd6:	4298      	cmp	r0, r3
 8004fd8:	d9f5      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 8004fda:	2003      	movs	r0, #3
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004fde:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1e3      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004fe4:	e7da      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe6:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	07db      	lsls	r3, r3, #31
 8004fec:	d506      	bpl.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fee:	4a19      	ldr	r2, [pc, #100]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004ff0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	438b      	bics	r3, r1
 8004ff6:	68a1      	ldr	r1, [r4, #8]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	065b      	lsls	r3, r3, #25
 8005000:	d506      	bpl.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005002:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8005004:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005006:	4918      	ldr	r1, [pc, #96]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8005008:	400b      	ands	r3, r1
 800500a:	68e1      	ldr	r1, [r4, #12]
 800500c:	430b      	orrs	r3, r1
 800500e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	045b      	lsls	r3, r3, #17
 8005014:	d506      	bpl.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005016:	4a0f      	ldr	r2, [pc, #60]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8005018:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	6961      	ldr	r1, [r4, #20]
 8005020:	430b      	orrs	r3, r1
 8005022:	6553      	str	r3, [r2, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	051b      	lsls	r3, r3, #20
 8005028:	d506      	bpl.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800502a:	4a0a      	ldr	r2, [pc, #40]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800502c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800502e:	490f      	ldr	r1, [pc, #60]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005030:	400b      	ands	r3, r1
 8005032:	6921      	ldr	r1, [r4, #16]
 8005034:	430b      	orrs	r3, r1
 8005036:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	db01      	blt.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x106>

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
  }
  return status;
}
 800503e:	b002      	add	sp, #8
 8005040:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005042:	4a04      	ldr	r2, [pc, #16]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8005044:	6813      	ldr	r3, [r2, #0]
 8005046:	21e0      	movs	r1, #224	@ 0xe0
 8005048:	438b      	bics	r3, r1
 800504a:	6861      	ldr	r1, [r4, #4]
 800504c:	430b      	orrs	r3, r1
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e7f5      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x102>
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	40021000 	.word	0x40021000
 8005058:	fffffcff 	.word	0xfffffcff
 800505c:	fffeffff 	.word	0xfffeffff
 8005060:	efffffff 	.word	0xefffffff
 8005064:	00001388 	.word	0x00001388
 8005068:	ffffcfff 	.word	0xffffcfff
 800506c:	ffff3fff 	.word	0xffff3fff

08005070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005074:	6a03      	ldr	r3, [r0, #32]
 8005076:	2201      	movs	r2, #1
 8005078:	4393      	bics	r3, r2
 800507a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005080:	4c16      	ldr	r4, [pc, #88]	@ (80050dc <TIM_OC1_SetConfig+0x6c>)
 8005082:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	680c      	ldr	r4, [r1, #0]
 8005086:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005088:	2302      	movs	r3, #2
 800508a:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800508c:	688b      	ldr	r3, [r1, #8]
 800508e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005090:	4d13      	ldr	r5, [pc, #76]	@ (80050e0 <TIM_OC1_SetConfig+0x70>)
 8005092:	42a8      	cmp	r0, r5
 8005094:	d005      	beq.n	80050a2 <TIM_OC1_SetConfig+0x32>
 8005096:	4d13      	ldr	r5, [pc, #76]	@ (80050e4 <TIM_OC1_SetConfig+0x74>)
 8005098:	42a8      	cmp	r0, r5
 800509a:	d002      	beq.n	80050a2 <TIM_OC1_SetConfig+0x32>
 800509c:	4d12      	ldr	r5, [pc, #72]	@ (80050e8 <TIM_OC1_SetConfig+0x78>)
 800509e:	42a8      	cmp	r0, r5
 80050a0:	d106      	bne.n	80050b0 <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050a2:	2508      	movs	r5, #8
 80050a4:	43ab      	bics	r3, r5
 80050a6:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a8:	68cb      	ldr	r3, [r1, #12]
 80050aa:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ac:	2504      	movs	r5, #4
 80050ae:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	4d0b      	ldr	r5, [pc, #44]	@ (80050e0 <TIM_OC1_SetConfig+0x70>)
 80050b2:	42a8      	cmp	r0, r5
 80050b4:	d005      	beq.n	80050c2 <TIM_OC1_SetConfig+0x52>
 80050b6:	4d0b      	ldr	r5, [pc, #44]	@ (80050e4 <TIM_OC1_SetConfig+0x74>)
 80050b8:	42a8      	cmp	r0, r5
 80050ba:	d002      	beq.n	80050c2 <TIM_OC1_SetConfig+0x52>
 80050bc:	4d0a      	ldr	r5, [pc, #40]	@ (80050e8 <TIM_OC1_SetConfig+0x78>)
 80050be:	42a8      	cmp	r0, r5
 80050c0:	d105      	bne.n	80050ce <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050c2:	4d0a      	ldr	r5, [pc, #40]	@ (80050ec <TIM_OC1_SetConfig+0x7c>)
 80050c4:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c6:	694d      	ldr	r5, [r1, #20]
 80050c8:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ca:	698a      	ldr	r2, [r1, #24]
 80050cc:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050d2:	684a      	ldr	r2, [r1, #4]
 80050d4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d6:	6203      	str	r3, [r0, #32]
}
 80050d8:	bd30      	pop	{r4, r5, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	fffeff8c 	.word	0xfffeff8c
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800
 80050ec:	fffffcff 	.word	0xfffffcff

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050f4:	6a03      	ldr	r3, [r0, #32]
 80050f6:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <TIM_OC3_SetConfig+0x60>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fe:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	4d14      	ldr	r5, [pc, #80]	@ (8005154 <TIM_OC3_SetConfig+0x64>)
 8005102:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005104:	680d      	ldr	r5, [r1, #0]
 8005106:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005108:	4b13      	ldr	r3, [pc, #76]	@ (8005158 <TIM_OC3_SetConfig+0x68>)
 800510a:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800510c:	688b      	ldr	r3, [r1, #8]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	4c12      	ldr	r4, [pc, #72]	@ (800515c <TIM_OC3_SetConfig+0x6c>)
 8005114:	42a0      	cmp	r0, r4
 8005116:	d006      	beq.n	8005126 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	4c11      	ldr	r4, [pc, #68]	@ (8005160 <TIM_OC3_SetConfig+0x70>)
 800511a:	42a0      	cmp	r0, r4
 800511c:	d00a      	beq.n	8005134 <TIM_OC3_SetConfig+0x44>
 800511e:	4c11      	ldr	r4, [pc, #68]	@ (8005164 <TIM_OC3_SetConfig+0x74>)
 8005120:	42a0      	cmp	r0, r4
 8005122:	d10f      	bne.n	8005144 <TIM_OC3_SetConfig+0x54>
 8005124:	e006      	b.n	8005134 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005126:	4c10      	ldr	r4, [pc, #64]	@ (8005168 <TIM_OC3_SetConfig+0x78>)
 8005128:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512a:	68cb      	ldr	r3, [r1, #12]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8005130:	4c0e      	ldr	r4, [pc, #56]	@ (800516c <TIM_OC3_SetConfig+0x7c>)
 8005132:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005134:	4c0e      	ldr	r4, [pc, #56]	@ (8005170 <TIM_OC3_SetConfig+0x80>)
 8005136:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005138:	694c      	ldr	r4, [r1, #20]
 800513a:	0124      	lsls	r4, r4, #4
 800513c:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800513e:	698a      	ldr	r2, [r1, #24]
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005144:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005146:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005148:	684a      	ldr	r2, [r1, #4]
 800514a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514c:	6203      	str	r3, [r0, #32]
}
 800514e:	bd30      	pop	{r4, r5, pc}
 8005150:	fffffeff 	.word	0xfffffeff
 8005154:	fffeff8c 	.word	0xfffeff8c
 8005158:	fffffdff 	.word	0xfffffdff
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800
 8005168:	fffff7ff 	.word	0xfffff7ff
 800516c:	fffffbff 	.word	0xfffffbff
 8005170:	ffffcfff 	.word	0xffffcfff

08005174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005178:	6a03      	ldr	r3, [r0, #32]
 800517a:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <TIM_OC4_SetConfig+0x4c>)
 800517c:	4013      	ands	r3, r2
 800517e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005182:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005184:	4a0f      	ldr	r2, [pc, #60]	@ (80051c4 <TIM_OC4_SetConfig+0x50>)
 8005186:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005188:	680a      	ldr	r2, [r1, #0]
 800518a:	0212      	lsls	r2, r2, #8
 800518c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <TIM_OC4_SetConfig+0x54>)
 8005190:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005192:	688b      	ldr	r3, [r1, #8]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005198:	4c0c      	ldr	r4, [pc, #48]	@ (80051cc <TIM_OC4_SetConfig+0x58>)
 800519a:	42a0      	cmp	r0, r4
 800519c:	d005      	beq.n	80051aa <TIM_OC4_SetConfig+0x36>
 800519e:	4c0c      	ldr	r4, [pc, #48]	@ (80051d0 <TIM_OC4_SetConfig+0x5c>)
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d002      	beq.n	80051aa <TIM_OC4_SetConfig+0x36>
 80051a4:	4c0b      	ldr	r4, [pc, #44]	@ (80051d4 <TIM_OC4_SetConfig+0x60>)
 80051a6:	42a0      	cmp	r0, r4
 80051a8:	d104      	bne.n	80051b4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051aa:	4c0b      	ldr	r4, [pc, #44]	@ (80051d8 <TIM_OC4_SetConfig+0x64>)
 80051ac:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ae:	694d      	ldr	r5, [r1, #20]
 80051b0:	01ad      	lsls	r5, r5, #6
 80051b2:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	684a      	ldr	r2, [r1, #4]
 80051ba:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	6203      	str	r3, [r0, #32]
}
 80051be:	bd30      	pop	{r4, r5, pc}
 80051c0:	ffffefff 	.word	0xffffefff
 80051c4:	feff8cff 	.word	0xfeff8cff
 80051c8:	ffffdfff 	.word	0xffffdfff
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	ffffbfff 	.word	0xffffbfff

080051dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051e0:	6a03      	ldr	r3, [r0, #32]
 80051e2:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <TIM_OC5_SetConfig+0x4c>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051ec:	4d0f      	ldr	r5, [pc, #60]	@ (800522c <TIM_OC5_SetConfig+0x50>)
 80051ee:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f0:	680d      	ldr	r5, [r1, #0]
 80051f2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005230 <TIM_OC5_SetConfig+0x54>)
 80051f6:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051f8:	688b      	ldr	r3, [r1, #8]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	4c0d      	ldr	r4, [pc, #52]	@ (8005234 <TIM_OC5_SetConfig+0x58>)
 8005200:	42a0      	cmp	r0, r4
 8005202:	d005      	beq.n	8005210 <TIM_OC5_SetConfig+0x34>
 8005204:	4c0c      	ldr	r4, [pc, #48]	@ (8005238 <TIM_OC5_SetConfig+0x5c>)
 8005206:	42a0      	cmp	r0, r4
 8005208:	d002      	beq.n	8005210 <TIM_OC5_SetConfig+0x34>
 800520a:	4c0c      	ldr	r4, [pc, #48]	@ (800523c <TIM_OC5_SetConfig+0x60>)
 800520c:	42a0      	cmp	r0, r4
 800520e:	d104      	bne.n	800521a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005210:	4c05      	ldr	r4, [pc, #20]	@ (8005228 <TIM_OC5_SetConfig+0x4c>)
 8005212:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005214:	694a      	ldr	r2, [r1, #20]
 8005216:	0212      	lsls	r2, r2, #8
 8005218:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800521c:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800521e:	684a      	ldr	r2, [r1, #4]
 8005220:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	6203      	str	r3, [r0, #32]
}
 8005224:	bd30      	pop	{r4, r5, pc}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	fffeffff 	.word	0xfffeffff
 800522c:	fffeff8f 	.word	0xfffeff8f
 8005230:	fffdffff 	.word	0xfffdffff
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800

08005240 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005244:	6a03      	ldr	r3, [r0, #32]
 8005246:	4a11      	ldr	r2, [pc, #68]	@ (800528c <TIM_OC6_SetConfig+0x4c>)
 8005248:	4013      	ands	r3, r2
 800524a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524e:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005250:	4a0f      	ldr	r2, [pc, #60]	@ (8005290 <TIM_OC6_SetConfig+0x50>)
 8005252:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	680a      	ldr	r2, [r1, #0]
 8005256:	0212      	lsls	r2, r2, #8
 8005258:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <TIM_OC6_SetConfig+0x54>)
 800525c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800525e:	688b      	ldr	r3, [r1, #8]
 8005260:	051b      	lsls	r3, r3, #20
 8005262:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	4c0c      	ldr	r4, [pc, #48]	@ (8005298 <TIM_OC6_SetConfig+0x58>)
 8005266:	42a0      	cmp	r0, r4
 8005268:	d005      	beq.n	8005276 <TIM_OC6_SetConfig+0x36>
 800526a:	4c0c      	ldr	r4, [pc, #48]	@ (800529c <TIM_OC6_SetConfig+0x5c>)
 800526c:	42a0      	cmp	r0, r4
 800526e:	d002      	beq.n	8005276 <TIM_OC6_SetConfig+0x36>
 8005270:	4c0b      	ldr	r4, [pc, #44]	@ (80052a0 <TIM_OC6_SetConfig+0x60>)
 8005272:	42a0      	cmp	r0, r4
 8005274:	d104      	bne.n	8005280 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005276:	4c0b      	ldr	r4, [pc, #44]	@ (80052a4 <TIM_OC6_SetConfig+0x64>)
 8005278:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800527a:	694d      	ldr	r5, [r1, #20]
 800527c:	02ad      	lsls	r5, r5, #10
 800527e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005282:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005284:	684a      	ldr	r2, [r1, #4]
 8005286:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	6203      	str	r3, [r0, #32]
}
 800528a:	bd30      	pop	{r4, r5, pc}
 800528c:	ffefffff 	.word	0xffefffff
 8005290:	feff8fff 	.word	0xfeff8fff
 8005294:	ffdfffff 	.word	0xffdfffff
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800
 80052a4:	fffbffff 	.word	0xfffbffff

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052aa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ac:	6a04      	ldr	r4, [r0, #32]
 80052ae:	2501      	movs	r5, #1
 80052b0:	43ac      	bics	r4, r5
 80052b2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b6:	35ef      	adds	r5, #239	@ 0xef
 80052b8:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ba:	0112      	lsls	r2, r2, #4
 80052bc:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052be:	240a      	movs	r4, #10
 80052c0:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80052c2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80052c6:	6203      	str	r3, [r0, #32]
}
 80052c8:	bd30      	pop	{r4, r5, pc}
	...

080052cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052cc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d0:	6a04      	ldr	r4, [r0, #32]
 80052d2:	2510      	movs	r5, #16
 80052d4:	43ac      	bics	r4, r5
 80052d6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052da:	4d05      	ldr	r5, [pc, #20]	@ (80052f0 <TIM_TI2_ConfigInputStage+0x24>)
 80052dc:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052de:	0312      	lsls	r2, r2, #12
 80052e0:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e2:	24a0      	movs	r4, #160	@ 0xa0
 80052e4:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e6:	0109      	lsls	r1, r1, #4
 80052e8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80052ec:	6201      	str	r1, [r0, #32]
}
 80052ee:	bd30      	pop	{r4, r5, pc}
 80052f0:	ffff0fff 	.word	0xffff0fff

080052f4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f6:	4a03      	ldr	r2, [pc, #12]	@ (8005304 <TIM_ITRx_SetConfig+0x10>)
 80052f8:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fa:	430b      	orrs	r3, r1
 80052fc:	2207      	movs	r2, #7
 80052fe:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005300:	6083      	str	r3, [r0, #8]
}
 8005302:	4770      	bx	lr
 8005304:	ffcfff8f 	.word	0xffcfff8f

08005308 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005308:	233d      	movs	r3, #61	@ 0x3d
 800530a:	5cc3      	ldrb	r3, [r0, r3]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d122      	bne.n	8005356 <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	333c      	adds	r3, #60	@ 0x3c
 8005312:	2202      	movs	r2, #2
 8005314:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005316:	6802      	ldr	r2, [r0, #0]
 8005318:	68d3      	ldr	r3, [r2, #12]
 800531a:	2101      	movs	r1, #1
 800531c:	430b      	orrs	r3, r1
 800531e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005320:	6803      	ldr	r3, [r0, #0]
 8005322:	4a10      	ldr	r2, [pc, #64]	@ (8005364 <HAL_TIM_Base_Start_IT+0x5c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d008      	beq.n	800533a <HAL_TIM_Base_Start_IT+0x32>
 8005328:	4a0f      	ldr	r2, [pc, #60]	@ (8005368 <HAL_TIM_Base_Start_IT+0x60>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d005      	beq.n	800533a <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	430a      	orrs	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005336:	2000      	movs	r0, #0
 8005338:	e00e      	b.n	8005358 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	490b      	ldr	r1, [pc, #44]	@ (800536c <HAL_TIM_Base_Start_IT+0x64>)
 800533e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005340:	2a06      	cmp	r2, #6
 8005342:	d00a      	beq.n	800535a <HAL_TIM_Base_Start_IT+0x52>
 8005344:	3907      	subs	r1, #7
 8005346:	428a      	cmp	r2, r1
 8005348:	d009      	beq.n	800535e <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	2101      	movs	r1, #1
 800534e:	430a      	orrs	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005352:	2000      	movs	r0, #0
 8005354:	e000      	b.n	8005358 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8005356:	2001      	movs	r0, #1
}
 8005358:	4770      	bx	lr
  return HAL_OK;
 800535a:	2000      	movs	r0, #0
 800535c:	e7fc      	b.n	8005358 <HAL_TIM_Base_Start_IT+0x50>
 800535e:	2000      	movs	r0, #0
 8005360:	e7fa      	b.n	8005358 <HAL_TIM_Base_Start_IT+0x50>
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40000400 	.word	0x40000400
 800536c:	00010007 	.word	0x00010007

08005370 <HAL_TIM_OC_MspInit>:
}
 8005370:	4770      	bx	lr

08005372 <HAL_TIM_PWM_MspInit>:
}
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_IC_CaptureCallback>:
}
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_TriggerCallback>:
}
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_IRQHandler>:
{
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8005380:	6803      	ldr	r3, [r0, #0]
 8005382:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005384:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005386:	07a2      	lsls	r2, r4, #30
 8005388:	d50e      	bpl.n	80053a8 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800538a:	07b2      	lsls	r2, r6, #30
 800538c:	d50c      	bpl.n	80053a8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800538e:	2203      	movs	r2, #3
 8005390:	4252      	negs	r2, r2
 8005392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005394:	2301      	movs	r3, #1
 8005396:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005398:	6803      	ldr	r3, [r0, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	079b      	lsls	r3, r3, #30
 800539e:	d055      	beq.n	800544c <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 80053a0:	f7ff ffe9 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a4:	2300      	movs	r3, #0
 80053a6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053a8:	0763      	lsls	r3, r4, #29
 80053aa:	d512      	bpl.n	80053d2 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ac:	0773      	lsls	r3, r6, #29
 80053ae:	d510      	bpl.n	80053d2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	2205      	movs	r2, #5
 80053b4:	4252      	negs	r2, r2
 80053b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b8:	2302      	movs	r3, #2
 80053ba:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	23c0      	movs	r3, #192	@ 0xc0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	421a      	tst	r2, r3
 80053c6:	d047      	beq.n	8005458 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80053c8:	0028      	movs	r0, r5
 80053ca:	f7ff ffd4 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	2300      	movs	r3, #0
 80053d0:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053d2:	0723      	lsls	r3, r4, #28
 80053d4:	d510      	bpl.n	80053f8 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053d6:	0733      	lsls	r3, r6, #28
 80053d8:	d50e      	bpl.n	80053f8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	2209      	movs	r2, #9
 80053de:	4252      	negs	r2, r2
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	2304      	movs	r3, #4
 80053e4:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e6:	682b      	ldr	r3, [r5, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	079b      	lsls	r3, r3, #30
 80053ec:	d03b      	beq.n	8005466 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	0028      	movs	r0, r5
 80053f0:	f7ff ffc1 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f4:	2300      	movs	r3, #0
 80053f6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053f8:	06e3      	lsls	r3, r4, #27
 80053fa:	d512      	bpl.n	8005422 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053fc:	06f3      	lsls	r3, r6, #27
 80053fe:	d510      	bpl.n	8005422 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	2211      	movs	r2, #17
 8005404:	4252      	negs	r2, r2
 8005406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005408:	2308      	movs	r3, #8
 800540a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	23c0      	movs	r3, #192	@ 0xc0
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	421a      	tst	r2, r3
 8005416:	d02d      	beq.n	8005474 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8005418:	0028      	movs	r0, r5
 800541a:	f7ff ffac 	bl	8005376 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	2300      	movs	r3, #0
 8005420:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005422:	07e3      	lsls	r3, r4, #31
 8005424:	d501      	bpl.n	800542a <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005426:	07f3      	lsls	r3, r6, #31
 8005428:	d42b      	bmi.n	8005482 <HAL_TIM_IRQHandler+0x106>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800542a:	0623      	lsls	r3, r4, #24
 800542c:	d501      	bpl.n	8005432 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800542e:	0633      	lsls	r3, r6, #24
 8005430:	d42f      	bmi.n	8005492 <HAL_TIM_IRQHandler+0x116>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005432:	05e3      	lsls	r3, r4, #23
 8005434:	d501      	bpl.n	800543a <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005436:	0633      	lsls	r3, r6, #24
 8005438:	d433      	bmi.n	80054a2 <HAL_TIM_IRQHandler+0x126>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800543a:	0663      	lsls	r3, r4, #25
 800543c:	d501      	bpl.n	8005442 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800543e:	0673      	lsls	r3, r6, #25
 8005440:	d436      	bmi.n	80054b0 <HAL_TIM_IRQHandler+0x134>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005442:	06a4      	lsls	r4, r4, #26
 8005444:	d501      	bpl.n	800544a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005446:	06b6      	lsls	r6, r6, #26
 8005448:	d43a      	bmi.n	80054c0 <HAL_TIM_IRQHandler+0x144>
}
 800544a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800544c:	f7ff ff92 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	0028      	movs	r0, r5
 8005452:	f7ff ff91 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
 8005456:	e7a5      	b.n	80053a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005458:	0028      	movs	r0, r5
 800545a:	f7ff ff8b 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545e:	0028      	movs	r0, r5
 8005460:	f7ff ff8a 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
 8005464:	e7b3      	b.n	80053ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	0028      	movs	r0, r5
 8005468:	f7ff ff84 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	0028      	movs	r0, r5
 800546e:	f7ff ff83 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
 8005472:	e7bf      	b.n	80053f4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005474:	0028      	movs	r0, r5
 8005476:	f7ff ff7d 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547a:	0028      	movs	r0, r5
 800547c:	f7ff ff7c 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
 8005480:	e7cd      	b.n	800541e <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	2202      	movs	r2, #2
 8005486:	4252      	negs	r2, r2
 8005488:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800548a:	0028      	movs	r0, r5
 800548c:	f7fd fe50 	bl	8003130 <HAL_TIM_PeriodElapsedCallback>
 8005490:	e7cb      	b.n	800542a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	2281      	movs	r2, #129	@ 0x81
 8005496:	4252      	negs	r2, r2
 8005498:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800549a:	0028      	movs	r0, r5
 800549c:	f000 fc61 	bl	8005d62 <HAL_TIMEx_BreakCallback>
 80054a0:	e7c7      	b.n	8005432 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	4a0a      	ldr	r2, [pc, #40]	@ (80054d0 <HAL_TIM_IRQHandler+0x154>)
 80054a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054a8:	0028      	movs	r0, r5
 80054aa:	f000 fc5b 	bl	8005d64 <HAL_TIMEx_Break2Callback>
 80054ae:	e7c4      	b.n	800543a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	2241      	movs	r2, #65	@ 0x41
 80054b4:	4252      	negs	r2, r2
 80054b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054b8:	0028      	movs	r0, r5
 80054ba:	f7ff ff5e 	bl	800537a <HAL_TIM_TriggerCallback>
 80054be:	e7c0      	b.n	8005442 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	2221      	movs	r2, #33	@ 0x21
 80054c4:	4252      	negs	r2, r2
 80054c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80054c8:	0028      	movs	r0, r5
 80054ca:	f000 fc49 	bl	8005d60 <HAL_TIMEx_CommutCallback>
}
 80054ce:	e7bc      	b.n	800544a <HAL_TIM_IRQHandler+0xce>
 80054d0:	fffffeff 	.word	0xfffffeff

080054d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80054d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <TIM_Base_SetConfig+0x6c>)
 80054d8:	4290      	cmp	r0, r2
 80054da:	d002      	beq.n	80054e2 <TIM_Base_SetConfig+0xe>
 80054dc:	4a19      	ldr	r2, [pc, #100]	@ (8005544 <TIM_Base_SetConfig+0x70>)
 80054de:	4290      	cmp	r0, r2
 80054e0:	d103      	bne.n	80054ea <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e2:	2270      	movs	r2, #112	@ 0x70
 80054e4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80054e6:	684a      	ldr	r2, [r1, #4]
 80054e8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ea:	4a15      	ldr	r2, [pc, #84]	@ (8005540 <TIM_Base_SetConfig+0x6c>)
 80054ec:	4290      	cmp	r0, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x34>
 80054f0:	4a14      	ldr	r2, [pc, #80]	@ (8005544 <TIM_Base_SetConfig+0x70>)
 80054f2:	4290      	cmp	r0, r2
 80054f4:	d008      	beq.n	8005508 <TIM_Base_SetConfig+0x34>
 80054f6:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <TIM_Base_SetConfig+0x74>)
 80054f8:	4290      	cmp	r0, r2
 80054fa:	d005      	beq.n	8005508 <TIM_Base_SetConfig+0x34>
 80054fc:	4a13      	ldr	r2, [pc, #76]	@ (800554c <TIM_Base_SetConfig+0x78>)
 80054fe:	4290      	cmp	r0, r2
 8005500:	d002      	beq.n	8005508 <TIM_Base_SetConfig+0x34>
 8005502:	4a13      	ldr	r2, [pc, #76]	@ (8005550 <TIM_Base_SetConfig+0x7c>)
 8005504:	4290      	cmp	r0, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005508:	4a12      	ldr	r2, [pc, #72]	@ (8005554 <TIM_Base_SetConfig+0x80>)
 800550a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550c:	68ca      	ldr	r2, [r1, #12]
 800550e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	2280      	movs	r2, #128	@ 0x80
 8005512:	4393      	bics	r3, r2
 8005514:	694a      	ldr	r2, [r1, #20]
 8005516:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005518:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551a:	688b      	ldr	r3, [r1, #8]
 800551c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800551e:	680b      	ldr	r3, [r1, #0]
 8005520:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005522:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <TIM_Base_SetConfig+0x6c>)
 8005524:	4298      	cmp	r0, r3
 8005526:	d005      	beq.n	8005534 <TIM_Base_SetConfig+0x60>
 8005528:	4b08      	ldr	r3, [pc, #32]	@ (800554c <TIM_Base_SetConfig+0x78>)
 800552a:	4298      	cmp	r0, r3
 800552c:	d002      	beq.n	8005534 <TIM_Base_SetConfig+0x60>
 800552e:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <TIM_Base_SetConfig+0x7c>)
 8005530:	4298      	cmp	r0, r3
 8005532:	d101      	bne.n	8005538 <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 8005534:	690b      	ldr	r3, [r1, #16]
 8005536:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005538:	2301      	movs	r3, #1
 800553a:	6143      	str	r3, [r0, #20]
}
 800553c:	4770      	bx	lr
 800553e:	46c0      	nop			@ (mov r8, r8)
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40000400 	.word	0x40000400
 8005548:	40002000 	.word	0x40002000
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800
 8005554:	fffffcff 	.word	0xfffffcff

08005558 <HAL_TIM_Base_Init>:
{
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800555c:	d02a      	beq.n	80055b4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	233d      	movs	r3, #61	@ 0x3d
 8005560:	5cc3      	ldrb	r3, [r0, r3]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d020      	beq.n	80055a8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8005566:	253d      	movs	r5, #61	@ 0x3d
 8005568:	2302      	movs	r3, #2
 800556a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556c:	0021      	movs	r1, r4
 800556e:	c901      	ldmia	r1!, {r0}
 8005570:	f7ff ffb0 	bl	80054d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	2301      	movs	r3, #1
 8005576:	2248      	movs	r2, #72	@ 0x48
 8005578:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557a:	3a0a      	subs	r2, #10
 800557c:	54a3      	strb	r3, [r4, r2]
 800557e:	3201      	adds	r2, #1
 8005580:	54a3      	strb	r3, [r4, r2]
 8005582:	3201      	adds	r2, #1
 8005584:	54a3      	strb	r3, [r4, r2]
 8005586:	3201      	adds	r2, #1
 8005588:	54a3      	strb	r3, [r4, r2]
 800558a:	3201      	adds	r2, #1
 800558c:	54a3      	strb	r3, [r4, r2]
 800558e:	3201      	adds	r2, #1
 8005590:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	3201      	adds	r2, #1
 8005594:	54a3      	strb	r3, [r4, r2]
 8005596:	3201      	adds	r2, #1
 8005598:	54a3      	strb	r3, [r4, r2]
 800559a:	3201      	adds	r2, #1
 800559c:	54a3      	strb	r3, [r4, r2]
 800559e:	3201      	adds	r2, #1
 80055a0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80055a4:	2000      	movs	r0, #0
}
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80055a8:	333c      	adds	r3, #60	@ 0x3c
 80055aa:	2200      	movs	r2, #0
 80055ac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80055ae:	f7fe fa23 	bl	80039f8 <HAL_TIM_Base_MspInit>
 80055b2:	e7d8      	b.n	8005566 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80055b4:	2001      	movs	r0, #1
 80055b6:	e7f6      	b.n	80055a6 <HAL_TIM_Base_Init+0x4e>

080055b8 <HAL_TIM_OC_Init>:
{
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80055bc:	d02a      	beq.n	8005614 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	233d      	movs	r3, #61	@ 0x3d
 80055c0:	5cc3      	ldrb	r3, [r0, r3]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d020      	beq.n	8005608 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80055c6:	253d      	movs	r5, #61	@ 0x3d
 80055c8:	2302      	movs	r3, #2
 80055ca:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80055cc:	0021      	movs	r1, r4
 80055ce:	c901      	ldmia	r1!, {r0}
 80055d0:	f7ff ff80 	bl	80054d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	2301      	movs	r3, #1
 80055d6:	2248      	movs	r2, #72	@ 0x48
 80055d8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055da:	3a0a      	subs	r2, #10
 80055dc:	54a3      	strb	r3, [r4, r2]
 80055de:	3201      	adds	r2, #1
 80055e0:	54a3      	strb	r3, [r4, r2]
 80055e2:	3201      	adds	r2, #1
 80055e4:	54a3      	strb	r3, [r4, r2]
 80055e6:	3201      	adds	r2, #1
 80055e8:	54a3      	strb	r3, [r4, r2]
 80055ea:	3201      	adds	r2, #1
 80055ec:	54a3      	strb	r3, [r4, r2]
 80055ee:	3201      	adds	r2, #1
 80055f0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	3201      	adds	r2, #1
 80055f4:	54a3      	strb	r3, [r4, r2]
 80055f6:	3201      	adds	r2, #1
 80055f8:	54a3      	strb	r3, [r4, r2]
 80055fa:	3201      	adds	r2, #1
 80055fc:	54a3      	strb	r3, [r4, r2]
 80055fe:	3201      	adds	r2, #1
 8005600:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005602:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005604:	2000      	movs	r0, #0
}
 8005606:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005608:	333c      	adds	r3, #60	@ 0x3c
 800560a:	2200      	movs	r2, #0
 800560c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 800560e:	f7ff feaf 	bl	8005370 <HAL_TIM_OC_MspInit>
 8005612:	e7d8      	b.n	80055c6 <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 8005614:	2001      	movs	r0, #1
 8005616:	e7f6      	b.n	8005606 <HAL_TIM_OC_Init+0x4e>

08005618 <HAL_TIM_PWM_Init>:
{
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800561c:	d02a      	beq.n	8005674 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800561e:	233d      	movs	r3, #61	@ 0x3d
 8005620:	5cc3      	ldrb	r3, [r0, r3]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d020      	beq.n	8005668 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8005626:	253d      	movs	r5, #61	@ 0x3d
 8005628:	2302      	movs	r3, #2
 800562a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	0021      	movs	r1, r4
 800562e:	c901      	ldmia	r1!, {r0}
 8005630:	f7ff ff50 	bl	80054d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005634:	2301      	movs	r3, #1
 8005636:	2248      	movs	r2, #72	@ 0x48
 8005638:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563a:	3a0a      	subs	r2, #10
 800563c:	54a3      	strb	r3, [r4, r2]
 800563e:	3201      	adds	r2, #1
 8005640:	54a3      	strb	r3, [r4, r2]
 8005642:	3201      	adds	r2, #1
 8005644:	54a3      	strb	r3, [r4, r2]
 8005646:	3201      	adds	r2, #1
 8005648:	54a3      	strb	r3, [r4, r2]
 800564a:	3201      	adds	r2, #1
 800564c:	54a3      	strb	r3, [r4, r2]
 800564e:	3201      	adds	r2, #1
 8005650:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	3201      	adds	r2, #1
 8005654:	54a3      	strb	r3, [r4, r2]
 8005656:	3201      	adds	r2, #1
 8005658:	54a3      	strb	r3, [r4, r2]
 800565a:	3201      	adds	r2, #1
 800565c:	54a3      	strb	r3, [r4, r2]
 800565e:	3201      	adds	r2, #1
 8005660:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005662:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005664:	2000      	movs	r0, #0
}
 8005666:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005668:	333c      	adds	r3, #60	@ 0x3c
 800566a:	2200      	movs	r2, #0
 800566c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800566e:	f7ff fe80 	bl	8005372 <HAL_TIM_PWM_MspInit>
 8005672:	e7d8      	b.n	8005626 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8005674:	2001      	movs	r0, #1
 8005676:	e7f6      	b.n	8005666 <HAL_TIM_PWM_Init+0x4e>

08005678 <TIM_OC2_SetConfig>:
{
 8005678:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 800567a:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567c:	6a03      	ldr	r3, [r0, #32]
 800567e:	2410      	movs	r4, #16
 8005680:	43a3      	bics	r3, r4
 8005682:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005684:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005686:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005688:	4c14      	ldr	r4, [pc, #80]	@ (80056dc <TIM_OC2_SetConfig+0x64>)
 800568a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	680c      	ldr	r4, [r1, #0]
 800568e:	0224      	lsls	r4, r4, #8
 8005690:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8005692:	2320      	movs	r3, #32
 8005694:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005696:	688b      	ldr	r3, [r1, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800569c:	4a10      	ldr	r2, [pc, #64]	@ (80056e0 <TIM_OC2_SetConfig+0x68>)
 800569e:	4290      	cmp	r0, r2
 80056a0:	d006      	beq.n	80056b0 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	4a10      	ldr	r2, [pc, #64]	@ (80056e4 <TIM_OC2_SetConfig+0x6c>)
 80056a4:	4290      	cmp	r0, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_OC2_SetConfig+0x48>
 80056a8:	4a0f      	ldr	r2, [pc, #60]	@ (80056e8 <TIM_OC2_SetConfig+0x70>)
 80056aa:	4290      	cmp	r0, r2
 80056ac:	d110      	bne.n	80056d0 <TIM_OC2_SetConfig+0x58>
 80056ae:	e007      	b.n	80056c0 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 80056b0:	2280      	movs	r2, #128	@ 0x80
 80056b2:	4393      	bics	r3, r2
 80056b4:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b6:	68cb      	ldr	r3, [r1, #12]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80056bc:	3a40      	subs	r2, #64	@ 0x40
 80056be:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c0:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <TIM_OC2_SetConfig+0x74>)
 80056c2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c4:	694a      	ldr	r2, [r1, #20]
 80056c6:	0092      	lsls	r2, r2, #2
 80056c8:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ca:	698d      	ldr	r5, [r1, #24]
 80056cc:	00ad      	lsls	r5, r5, #2
 80056ce:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 80056d0:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056d2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056d4:	684a      	ldr	r2, [r1, #4]
 80056d6:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80056d8:	6203      	str	r3, [r0, #32]
}
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	feff8cff 	.word	0xfeff8cff
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800
 80056ec:	fffff3ff 	.word	0xfffff3ff

080056f0 <HAL_TIM_OC_ConfigChannel>:
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80056f4:	233c      	movs	r3, #60	@ 0x3c
 80056f6:	5cc3      	ldrb	r3, [r0, r3]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d02b      	beq.n	8005754 <HAL_TIM_OC_ConfigChannel+0x64>
 80056fc:	233c      	movs	r3, #60	@ 0x3c
 80056fe:	2001      	movs	r0, #1
 8005700:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 8005702:	2a14      	cmp	r2, #20
 8005704:	d821      	bhi.n	800574a <HAL_TIM_OC_ConfigChannel+0x5a>
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	4b13      	ldr	r3, [pc, #76]	@ (8005758 <HAL_TIM_OC_ConfigChannel+0x68>)
 800570a:	589b      	ldr	r3, [r3, r2]
 800570c:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	f7ff fcae 	bl	8005070 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2000      	movs	r0, #0
      break;
 8005716:	e019      	b.n	800574c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	f7ff ffad 	bl	8005678 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2000      	movs	r0, #0
      break;
 8005720:	e014      	b.n	800574c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	f7ff fce4 	bl	80050f0 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005728:	2000      	movs	r0, #0
      break;
 800572a:	e00f      	b.n	800574c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	f7ff fd21 	bl	8005174 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2000      	movs	r0, #0
      break;
 8005734:	e00a      	b.n	800574c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	f7ff fd50 	bl	80051dc <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2000      	movs	r0, #0
      break;
 800573e:	e005      	b.n	800574c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	f7ff fd7d 	bl	8005240 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2000      	movs	r0, #0
      break;
 8005748:	e000      	b.n	800574c <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 800574a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800574c:	233c      	movs	r3, #60	@ 0x3c
 800574e:	2200      	movs	r2, #0
 8005750:	54e2      	strb	r2, [r4, r3]
}
 8005752:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005754:	2002      	movs	r0, #2
 8005756:	e7fc      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0x62>
 8005758:	080062cc 	.word	0x080062cc

0800575c <HAL_TIM_PWM_ConfigChannel>:
{
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0004      	movs	r4, r0
 8005760:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8005762:	233c      	movs	r3, #60	@ 0x3c
 8005764:	5cc3      	ldrb	r3, [r0, r3]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d100      	bne.n	800576c <HAL_TIM_PWM_ConfigChannel+0x10>
 800576a:	e092      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x136>
 800576c:	233c      	movs	r3, #60	@ 0x3c
 800576e:	2101      	movs	r1, #1
 8005770:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8005772:	2a14      	cmp	r2, #20
 8005774:	d900      	bls.n	8005778 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8005776:	e087      	b.n	8005888 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005778:	0092      	lsls	r2, r2, #2
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 800577c:	589b      	ldr	r3, [r3, r2]
 800577e:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005780:	6800      	ldr	r0, [r0, #0]
 8005782:	0029      	movs	r1, r5
 8005784:	f7ff fc74 	bl	8005070 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	6993      	ldr	r3, [r2, #24]
 800578c:	2108      	movs	r1, #8
 800578e:	430b      	orrs	r3, r1
 8005790:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	6993      	ldr	r3, [r2, #24]
 8005796:	3904      	subs	r1, #4
 8005798:	438b      	bics	r3, r1
 800579a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	6993      	ldr	r3, [r2, #24]
 80057a0:	6929      	ldr	r1, [r5, #16]
 80057a2:	430b      	orrs	r3, r1
 80057a4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2000      	movs	r0, #0
      break;
 80057a8:	e06f      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	0029      	movs	r1, r5
 80057ae:	f7ff ff63 	bl	8005678 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b2:	6822      	ldr	r2, [r4, #0]
 80057b4:	6991      	ldr	r1, [r2, #24]
 80057b6:	2380      	movs	r3, #128	@ 0x80
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	6993      	ldr	r3, [r2, #24]
 80057c2:	4936      	ldr	r1, [pc, #216]	@ (800589c <HAL_TIM_PWM_ConfigChannel+0x140>)
 80057c4:	400b      	ands	r3, r1
 80057c6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057c8:	6821      	ldr	r1, [r4, #0]
 80057ca:	698b      	ldr	r3, [r1, #24]
 80057cc:	692a      	ldr	r2, [r5, #16]
 80057ce:	0212      	lsls	r2, r2, #8
 80057d0:	4313      	orrs	r3, r2
 80057d2:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2000      	movs	r0, #0
      break;
 80057d6:	e058      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057d8:	6800      	ldr	r0, [r0, #0]
 80057da:	0029      	movs	r1, r5
 80057dc:	f7ff fc88 	bl	80050f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	69d3      	ldr	r3, [r2, #28]
 80057e4:	2108      	movs	r1, #8
 80057e6:	430b      	orrs	r3, r1
 80057e8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	69d3      	ldr	r3, [r2, #28]
 80057ee:	3904      	subs	r1, #4
 80057f0:	438b      	bics	r3, r1
 80057f2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	69d3      	ldr	r3, [r2, #28]
 80057f8:	6929      	ldr	r1, [r5, #16]
 80057fa:	430b      	orrs	r3, r1
 80057fc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2000      	movs	r0, #0
      break;
 8005800:	e043      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005802:	6800      	ldr	r0, [r0, #0]
 8005804:	0029      	movs	r1, r5
 8005806:	f7ff fcb5 	bl	8005174 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	69d1      	ldr	r1, [r2, #28]
 800580e:	2380      	movs	r3, #128	@ 0x80
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	430b      	orrs	r3, r1
 8005814:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	69d3      	ldr	r3, [r2, #28]
 800581a:	4920      	ldr	r1, [pc, #128]	@ (800589c <HAL_TIM_PWM_ConfigChannel+0x140>)
 800581c:	400b      	ands	r3, r1
 800581e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005820:	6821      	ldr	r1, [r4, #0]
 8005822:	69cb      	ldr	r3, [r1, #28]
 8005824:	692a      	ldr	r2, [r5, #16]
 8005826:	0212      	lsls	r2, r2, #8
 8005828:	4313      	orrs	r3, r2
 800582a:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800582c:	2000      	movs	r0, #0
      break;
 800582e:	e02c      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005830:	6800      	ldr	r0, [r0, #0]
 8005832:	0029      	movs	r1, r5
 8005834:	f7ff fcd2 	bl	80051dc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800583c:	2108      	movs	r1, #8
 800583e:	430b      	orrs	r3, r1
 8005840:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005846:	3904      	subs	r1, #4
 8005848:	438b      	bics	r3, r1
 800584a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005850:	6929      	ldr	r1, [r5, #16]
 8005852:	430b      	orrs	r3, r1
 8005854:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2000      	movs	r0, #0
      break;
 8005858:	e017      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	0029      	movs	r1, r5
 800585e:	f7ff fcef 	bl	8005240 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	430b      	orrs	r3, r1
 800586c:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005872:	490a      	ldr	r1, [pc, #40]	@ (800589c <HAL_TIM_PWM_ConfigChannel+0x140>)
 8005874:	400b      	ands	r3, r1
 8005876:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005878:	6821      	ldr	r1, [r4, #0]
 800587a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800587c:	692a      	ldr	r2, [r5, #16]
 800587e:	0212      	lsls	r2, r2, #8
 8005880:	4313      	orrs	r3, r2
 8005882:	654b      	str	r3, [r1, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2000      	movs	r0, #0
      break;
 8005886:	e000      	b.n	800588a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005888:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800588a:	233c      	movs	r3, #60	@ 0x3c
 800588c:	2200      	movs	r2, #0
 800588e:	54e2      	strb	r2, [r4, r3]
}
 8005890:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005892:	2002      	movs	r0, #2
 8005894:	e7fc      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x134>
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	08006320 	.word	0x08006320
 800589c:	fffffbff 	.word	0xfffffbff

080058a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	4d03      	ldr	r5, [pc, #12]	@ (80058b4 <TIM_ETR_SetConfig+0x14>)
 80058a6:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	4313      	orrs	r3, r2
 80058ac:	430b      	orrs	r3, r1
 80058ae:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b0:	6083      	str	r3, [r0, #8]
}
 80058b2:	bd30      	pop	{r4, r5, pc}
 80058b4:	ffff00ff 	.word	0xffff00ff

080058b8 <HAL_TIM_ConfigClockSource>:
{
 80058b8:	b510      	push	{r4, lr}
 80058ba:	0004      	movs	r4, r0
 80058bc:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 80058be:	233c      	movs	r3, #60	@ 0x3c
 80058c0:	5ce3      	ldrb	r3, [r4, r3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d100      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x10>
 80058c6:	e077      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x100>
 80058c8:	233c      	movs	r3, #60	@ 0x3c
 80058ca:	2201      	movs	r2, #1
 80058cc:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80058ce:	3301      	adds	r3, #1
 80058d0:	3201      	adds	r2, #1
 80058d2:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d8:	4938      	ldr	r1, [pc, #224]	@ (80059bc <HAL_TIM_ConfigClockSource+0x104>)
 80058da:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 80058dc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80058de:	6801      	ldr	r1, [r0, #0]
 80058e0:	2960      	cmp	r1, #96	@ 0x60
 80058e2:	d04f      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0xcc>
 80058e4:	d829      	bhi.n	800593a <HAL_TIM_ConfigClockSource+0x82>
 80058e6:	2940      	cmp	r1, #64	@ 0x40
 80058e8:	d057      	beq.n	800599a <HAL_TIM_ConfigClockSource+0xe2>
 80058ea:	d90c      	bls.n	8005906 <HAL_TIM_ConfigClockSource+0x4e>
 80058ec:	2950      	cmp	r1, #80	@ 0x50
 80058ee:	d122      	bne.n	8005936 <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 80058f0:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 80058f2:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	f7ff fcd7 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	2150      	movs	r1, #80	@ 0x50
 80058fe:	f7ff fcf9 	bl	80052f4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005902:	2000      	movs	r0, #0
      break;
 8005904:	e005      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005906:	2920      	cmp	r1, #32
 8005908:	d00e      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x70>
 800590a:	d909      	bls.n	8005920 <HAL_TIM_ConfigClockSource+0x68>
 800590c:	2930      	cmp	r1, #48	@ 0x30
 800590e:	d00b      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8005910:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005912:	233d      	movs	r3, #61	@ 0x3d
 8005914:	2201      	movs	r2, #1
 8005916:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8005918:	3b01      	subs	r3, #1
 800591a:	2200      	movs	r2, #0
 800591c:	54e2      	strb	r2, [r4, r3]
}
 800591e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005920:	2900      	cmp	r1, #0
 8005922:	d001      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x70>
 8005924:	2910      	cmp	r1, #16
 8005926:	d104      	bne.n	8005932 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	f7ff fce3 	bl	80052f4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2000      	movs	r0, #0
      break;
 8005930:	e7ef      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005932:	2001      	movs	r0, #1
 8005934:	e7ed      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
 8005936:	2001      	movs	r0, #1
 8005938:	e7eb      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800593a:	2280      	movs	r2, #128	@ 0x80
 800593c:	0152      	lsls	r2, r2, #5
 800593e:	4291      	cmp	r1, r2
 8005940:	d036      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0xf8>
 8005942:	2280      	movs	r2, #128	@ 0x80
 8005944:	0192      	lsls	r2, r2, #6
 8005946:	4291      	cmp	r1, r2
 8005948:	d10d      	bne.n	8005966 <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 800594a:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 800594c:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 800594e:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	f7ff ffa5 	bl	80058a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	6891      	ldr	r1, [r2, #8]
 800595a:	2380      	movs	r3, #128	@ 0x80
 800595c:	01db      	lsls	r3, r3, #7
 800595e:	430b      	orrs	r3, r1
 8005960:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2000      	movs	r0, #0
      break;
 8005964:	e7d5      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005966:	2970      	cmp	r1, #112	@ 0x70
 8005968:	d124      	bne.n	80059b4 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 800596a:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 800596c:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 800596e:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	f7ff ff95 	bl	80058a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800597a:	2177      	movs	r1, #119	@ 0x77
 800597c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800597e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005980:	2000      	movs	r0, #0
      break;
 8005982:	e7c6      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8005984:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	f7ff fc9f 	bl	80052cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	2160      	movs	r1, #96	@ 0x60
 8005992:	f7ff fcaf 	bl	80052f4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2000      	movs	r0, #0
      break;
 8005998:	e7bb      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 800599a:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 800599c:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	f7ff fc82 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a4:	6820      	ldr	r0, [r4, #0]
 80059a6:	2140      	movs	r1, #64	@ 0x40
 80059a8:	f7ff fca4 	bl	80052f4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2000      	movs	r0, #0
      break;
 80059ae:	e7b0      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80059b0:	2000      	movs	r0, #0
 80059b2:	e7ae      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80059b4:	2001      	movs	r0, #1
 80059b6:	e7ac      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80059b8:	2002      	movs	r0, #2
 80059ba:	e7b0      	b.n	800591e <HAL_TIM_ConfigClockSource+0x66>
 80059bc:	ffce0088 	.word	0xffce0088

080059c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059c0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059c2:	231f      	movs	r3, #31
 80059c4:	4019      	ands	r1, r3
 80059c6:	2401      	movs	r4, #1
 80059c8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ca:	6a03      	ldr	r3, [r0, #32]
 80059cc:	43a3      	bics	r3, r4
 80059ce:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d0:	6a03      	ldr	r3, [r0, #32]
 80059d2:	408a      	lsls	r2, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	6203      	str	r3, [r0, #32]
}
 80059d8:	bd10      	pop	{r4, pc}
	...

080059dc <HAL_TIM_OC_Start>:
{
 80059dc:	b510      	push	{r4, lr}
 80059de:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059e0:	2910      	cmp	r1, #16
 80059e2:	d82d      	bhi.n	8005a40 <HAL_TIM_OC_Start+0x64>
 80059e4:	008b      	lsls	r3, r1, #2
 80059e6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae4 <HAL_TIM_OC_Start+0x108>)
 80059e8:	58d3      	ldr	r3, [r2, r3]
 80059ea:	469f      	mov	pc, r3
 80059ec:	233e      	movs	r3, #62	@ 0x3e
 80059ee:	5cc3      	ldrb	r3, [r0, r3]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	1e5a      	subs	r2, r3, #1
 80059f4:	4193      	sbcs	r3, r2
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d16d      	bne.n	8005ad8 <HAL_TIM_OC_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fc:	2910      	cmp	r1, #16
 80059fe:	d859      	bhi.n	8005ab4 <HAL_TIM_OC_Start+0xd8>
 8005a00:	008b      	lsls	r3, r1, #2
 8005a02:	4a39      	ldr	r2, [pc, #228]	@ (8005ae8 <HAL_TIM_OC_Start+0x10c>)
 8005a04:	58d3      	ldr	r3, [r2, r3]
 8005a06:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a08:	233f      	movs	r3, #63	@ 0x3f
 8005a0a:	5cc3      	ldrb	r3, [r0, r3]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	1e5a      	subs	r2, r3, #1
 8005a10:	4193      	sbcs	r3, r2
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e7f0      	b.n	80059f8 <HAL_TIM_OC_Start+0x1c>
 8005a16:	2340      	movs	r3, #64	@ 0x40
 8005a18:	5cc3      	ldrb	r3, [r0, r3]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	1e5a      	subs	r2, r3, #1
 8005a1e:	4193      	sbcs	r3, r2
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e7e9      	b.n	80059f8 <HAL_TIM_OC_Start+0x1c>
 8005a24:	2341      	movs	r3, #65	@ 0x41
 8005a26:	5cc3      	ldrb	r3, [r0, r3]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	1e5a      	subs	r2, r3, #1
 8005a2c:	4193      	sbcs	r3, r2
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e7e2      	b.n	80059f8 <HAL_TIM_OC_Start+0x1c>
 8005a32:	2342      	movs	r3, #66	@ 0x42
 8005a34:	5cc3      	ldrb	r3, [r0, r3]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	4193      	sbcs	r3, r2
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e7db      	b.n	80059f8 <HAL_TIM_OC_Start+0x1c>
 8005a40:	2343      	movs	r3, #67	@ 0x43
 8005a42:	5ce3      	ldrb	r3, [r4, r3]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	1e5a      	subs	r2, r3, #1
 8005a48:	4193      	sbcs	r3, r2
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	e7d4      	b.n	80059f8 <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4e:	233e      	movs	r3, #62	@ 0x3e
 8005a50:	2202      	movs	r2, #2
 8005a52:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f7ff ffb2 	bl	80059c0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	4a23      	ldr	r2, [pc, #140]	@ (8005aec <HAL_TIM_OC_Start+0x110>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d005      	beq.n	8005a70 <HAL_TIM_OC_Start+0x94>
 8005a64:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <HAL_TIM_OC_Start+0x114>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d002      	beq.n	8005a70 <HAL_TIM_OC_Start+0x94>
 8005a6a:	4a22      	ldr	r2, [pc, #136]	@ (8005af4 <HAL_TIM_OC_Start+0x118>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_OC_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 8005a70:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005a72:	2280      	movs	r2, #128	@ 0x80
 8005a74:	0212      	lsls	r2, r2, #8
 8005a76:	430a      	orrs	r2, r1
 8005a78:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aec <HAL_TIM_OC_Start+0x110>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01c      	beq.n	8005abc <HAL_TIM_OC_Start+0xe0>
 8005a82:	4a1d      	ldr	r2, [pc, #116]	@ (8005af8 <HAL_TIM_OC_Start+0x11c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d019      	beq.n	8005abc <HAL_TIM_OC_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a90:	2000      	movs	r0, #0
 8005a92:	e022      	b.n	8005ada <HAL_TIM_OC_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a94:	233f      	movs	r3, #63	@ 0x3f
 8005a96:	2202      	movs	r2, #2
 8005a98:	54e2      	strb	r2, [r4, r3]
 8005a9a:	e7db      	b.n	8005a54 <HAL_TIM_OC_Start+0x78>
 8005a9c:	2340      	movs	r3, #64	@ 0x40
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	54e2      	strb	r2, [r4, r3]
 8005aa2:	e7d7      	b.n	8005a54 <HAL_TIM_OC_Start+0x78>
 8005aa4:	2341      	movs	r3, #65	@ 0x41
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	54e2      	strb	r2, [r4, r3]
 8005aaa:	e7d3      	b.n	8005a54 <HAL_TIM_OC_Start+0x78>
 8005aac:	2342      	movs	r3, #66	@ 0x42
 8005aae:	2202      	movs	r2, #2
 8005ab0:	54e2      	strb	r2, [r4, r3]
 8005ab2:	e7cf      	b.n	8005a54 <HAL_TIM_OC_Start+0x78>
 8005ab4:	2343      	movs	r3, #67	@ 0x43
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	54e2      	strb	r2, [r4, r3]
 8005aba:	e7cb      	b.n	8005a54 <HAL_TIM_OC_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	490f      	ldr	r1, [pc, #60]	@ (8005afc <HAL_TIM_OC_Start+0x120>)
 8005ac0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	2a06      	cmp	r2, #6
 8005ac4:	d00a      	beq.n	8005adc <HAL_TIM_OC_Start+0x100>
 8005ac6:	3907      	subs	r1, #7
 8005ac8:	428a      	cmp	r2, r1
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIM_OC_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	2101      	movs	r1, #1
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e000      	b.n	8005ada <HAL_TIM_OC_Start+0xfe>
    return HAL_ERROR;
 8005ad8:	2001      	movs	r0, #1
}
 8005ada:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005adc:	2000      	movs	r0, #0
 8005ade:	e7fc      	b.n	8005ada <HAL_TIM_OC_Start+0xfe>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e7fa      	b.n	8005ada <HAL_TIM_OC_Start+0xfe>
 8005ae4:	08006374 	.word	0x08006374
 8005ae8:	080063b8 	.word	0x080063b8
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800
 8005af8:	40000400 	.word	0x40000400
 8005afc:	00010007 	.word	0x00010007

08005b00 <HAL_TIM_PWM_Start>:
{
 8005b00:	b510      	push	{r4, lr}
 8005b02:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b04:	2910      	cmp	r1, #16
 8005b06:	d82d      	bhi.n	8005b64 <HAL_TIM_PWM_Start+0x64>
 8005b08:	008b      	lsls	r3, r1, #2
 8005b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c08 <HAL_TIM_PWM_Start+0x108>)
 8005b0c:	58d3      	ldr	r3, [r2, r3]
 8005b0e:	469f      	mov	pc, r3
 8005b10:	233e      	movs	r3, #62	@ 0x3e
 8005b12:	5cc3      	ldrb	r3, [r0, r3]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	1e5a      	subs	r2, r3, #1
 8005b18:	4193      	sbcs	r3, r2
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d16d      	bne.n	8005bfc <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b20:	2910      	cmp	r1, #16
 8005b22:	d859      	bhi.n	8005bd8 <HAL_TIM_PWM_Start+0xd8>
 8005b24:	008b      	lsls	r3, r1, #2
 8005b26:	4a39      	ldr	r2, [pc, #228]	@ (8005c0c <HAL_TIM_PWM_Start+0x10c>)
 8005b28:	58d3      	ldr	r3, [r2, r3]
 8005b2a:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b2c:	233f      	movs	r3, #63	@ 0x3f
 8005b2e:	5cc3      	ldrb	r3, [r0, r3]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	1e5a      	subs	r2, r3, #1
 8005b34:	4193      	sbcs	r3, r2
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e7f0      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1c>
 8005b3a:	2340      	movs	r3, #64	@ 0x40
 8005b3c:	5cc3      	ldrb	r3, [r0, r3]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	4193      	sbcs	r3, r2
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e7e9      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1c>
 8005b48:	2341      	movs	r3, #65	@ 0x41
 8005b4a:	5cc3      	ldrb	r3, [r0, r3]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	1e5a      	subs	r2, r3, #1
 8005b50:	4193      	sbcs	r3, r2
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	e7e2      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1c>
 8005b56:	2342      	movs	r3, #66	@ 0x42
 8005b58:	5cc3      	ldrb	r3, [r0, r3]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	4193      	sbcs	r3, r2
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	e7db      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1c>
 8005b64:	2343      	movs	r3, #67	@ 0x43
 8005b66:	5ce3      	ldrb	r3, [r4, r3]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	1e5a      	subs	r2, r3, #1
 8005b6c:	4193      	sbcs	r3, r2
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e7d4      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b72:	233e      	movs	r3, #62	@ 0x3e
 8005b74:	2202      	movs	r2, #2
 8005b76:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f7ff ff20 	bl	80059c0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	4a23      	ldr	r2, [pc, #140]	@ (8005c10 <HAL_TIM_PWM_Start+0x110>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d005      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x94>
 8005b88:	4a22      	ldr	r2, [pc, #136]	@ (8005c14 <HAL_TIM_PWM_Start+0x114>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d002      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x94>
 8005b8e:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <HAL_TIM_PWM_Start+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 8005b94:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005b96:	2280      	movs	r2, #128	@ 0x80
 8005b98:	0212      	lsls	r2, r2, #8
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <HAL_TIM_PWM_Start+0x110>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01c      	beq.n	8005be0 <HAL_TIM_PWM_Start+0xe0>
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c1c <HAL_TIM_PWM_Start+0x11c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d019      	beq.n	8005be0 <HAL_TIM_PWM_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2101      	movs	r1, #1
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e022      	b.n	8005bfe <HAL_TIM_PWM_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb8:	233f      	movs	r3, #63	@ 0x3f
 8005bba:	2202      	movs	r2, #2
 8005bbc:	54e2      	strb	r2, [r4, r3]
 8005bbe:	e7db      	b.n	8005b78 <HAL_TIM_PWM_Start+0x78>
 8005bc0:	2340      	movs	r3, #64	@ 0x40
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	54e2      	strb	r2, [r4, r3]
 8005bc6:	e7d7      	b.n	8005b78 <HAL_TIM_PWM_Start+0x78>
 8005bc8:	2341      	movs	r3, #65	@ 0x41
 8005bca:	2202      	movs	r2, #2
 8005bcc:	54e2      	strb	r2, [r4, r3]
 8005bce:	e7d3      	b.n	8005b78 <HAL_TIM_PWM_Start+0x78>
 8005bd0:	2342      	movs	r3, #66	@ 0x42
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	54e2      	strb	r2, [r4, r3]
 8005bd6:	e7cf      	b.n	8005b78 <HAL_TIM_PWM_Start+0x78>
 8005bd8:	2343      	movs	r3, #67	@ 0x43
 8005bda:	2202      	movs	r2, #2
 8005bdc:	54e2      	strb	r2, [r4, r3]
 8005bde:	e7cb      	b.n	8005b78 <HAL_TIM_PWM_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	490f      	ldr	r1, [pc, #60]	@ (8005c20 <HAL_TIM_PWM_Start+0x120>)
 8005be4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	2a06      	cmp	r2, #6
 8005be8:	d00a      	beq.n	8005c00 <HAL_TIM_PWM_Start+0x100>
 8005bea:	3907      	subs	r1, #7
 8005bec:	428a      	cmp	r2, r1
 8005bee:	d009      	beq.n	8005c04 <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_TIM_PWM_Start+0xfe>
    return HAL_ERROR;
 8005bfc:	2001      	movs	r0, #1
}
 8005bfe:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005c00:	2000      	movs	r0, #0
 8005c02:	e7fc      	b.n	8005bfe <HAL_TIM_PWM_Start+0xfe>
 8005c04:	2000      	movs	r0, #0
 8005c06:	e7fa      	b.n	8005bfe <HAL_TIM_PWM_Start+0xfe>
 8005c08:	080063fc 	.word	0x080063fc
 8005c0c:	08006440 	.word	0x08006440
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	00010007 	.word	0x00010007

08005c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c24:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c26:	233c      	movs	r3, #60	@ 0x3c
 8005c28:	5cc3      	ldrb	r3, [r0, r3]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d029      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005c2e:	233c      	movs	r3, #60	@ 0x3c
 8005c30:	2201      	movs	r2, #1
 8005c32:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	3301      	adds	r3, #1
 8005c36:	3201      	adds	r2, #1
 8005c38:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c3a:	6802      	ldr	r2, [r0, #0]
 8005c3c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c3e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c40:	4c11      	ldr	r4, [pc, #68]	@ (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005c42:	42a2      	cmp	r2, r4
 8005c44:	d018      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c46:	2470      	movs	r4, #112	@ 0x70
 8005c48:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c4a:	680c      	ldr	r4, [r1, #0]
 8005c4c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c50:	6803      	ldr	r3, [r0, #0]
 8005c52:	4a0d      	ldr	r2, [pc, #52]	@ (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d002      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8005c58:	4a0c      	ldr	r2, [pc, #48]	@ (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d104      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c62:	688a      	ldr	r2, [r1, #8]
 8005c64:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	233d      	movs	r3, #61	@ 0x3d
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	2200      	movs	r2, #0
 8005c72:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005c74:	2000      	movs	r0, #0
}
 8005c76:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c78:	4c05      	ldr	r4, [pc, #20]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005c7a:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c7c:	684c      	ldr	r4, [r1, #4]
 8005c7e:	4323      	orrs	r3, r4
 8005c80:	e7e1      	b.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005c82:	2002      	movs	r0, #2
 8005c84:	e7f7      	b.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	ff0fffff 	.word	0xff0fffff

08005c94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c94:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	233c      	movs	r3, #60	@ 0x3c
 8005c98:	5cc3      	ldrb	r3, [r0, r3]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d044      	beq.n	8005d28 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8005c9e:	233c      	movs	r3, #60	@ 0x3c
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	54c2      	strb	r2, [r0, r3]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ca4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ca6:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	688a      	ldr	r2, [r1, #8]
 8005cac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cae:	4a20      	ldr	r2, [pc, #128]	@ (8005d30 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	684a      	ldr	r2, [r1, #4]
 8005cb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d34 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	680a      	ldr	r2, [r1, #0]
 8005cbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d38 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	690a      	ldr	r2, [r1, #16]
 8005cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d3c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	694a      	ldr	r2, [r1, #20]
 8005ccc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cce:	4a1c      	ldr	r2, [pc, #112]	@ (8005d40 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005cd4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	698a      	ldr	r2, [r1, #24]
 8005cdc:	0412      	lsls	r2, r2, #16
 8005cde:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ce0:	6802      	ldr	r2, [r0, #0]
 8005ce2:	4c19      	ldr	r4, [pc, #100]	@ (8005d48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005ce4:	42a2      	cmp	r2, r4
 8005ce6:	d008      	beq.n	8005cfa <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ce8:	4c17      	ldr	r4, [pc, #92]	@ (8005d48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005cea:	42a2      	cmp	r2, r4
 8005cec:	d00a      	beq.n	8005d04 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cee:	6453      	str	r3, [r2, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cf0:	233c      	movs	r3, #60	@ 0x3c
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005cf6:	2000      	movs	r0, #0
}
 8005cf8:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cfa:	4c14      	ldr	r4, [pc, #80]	@ (8005d4c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005cfc:	4023      	ands	r3, r4
 8005cfe:	69cc      	ldr	r4, [r1, #28]
 8005d00:	4323      	orrs	r3, r4
 8005d02:	e7f1      	b.n	8005ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d04:	4c12      	ldr	r4, [pc, #72]	@ (8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8005d06:	4023      	ands	r3, r4
 8005d08:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8005d0a:	0524      	lsls	r4, r4, #20
 8005d0c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d0e:	4c11      	ldr	r4, [pc, #68]	@ (8005d54 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8005d10:	4023      	ands	r3, r4
 8005d12:	6a0c      	ldr	r4, [r1, #32]
 8005d14:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d16:	4c10      	ldr	r4, [pc, #64]	@ (8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8005d18:	4023      	ands	r3, r4
 8005d1a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8005d1c:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d1e:	4c0f      	ldr	r4, [pc, #60]	@ (8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8005d20:	4023      	ands	r3, r4
 8005d22:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8005d24:	430b      	orrs	r3, r1
 8005d26:	e7e2      	b.n	8005cee <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8005d28:	2002      	movs	r0, #2
 8005d2a:	e7e5      	b.n	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8005d2c:	fffffcff 	.word	0xfffffcff
 8005d30:	fffffbff 	.word	0xfffffbff
 8005d34:	fffff7ff 	.word	0xfffff7ff
 8005d38:	ffffefff 	.word	0xffffefff
 8005d3c:	ffffdfff 	.word	0xffffdfff
 8005d40:	ffffbfff 	.word	0xffffbfff
 8005d44:	fff0ffff 	.word	0xfff0ffff
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	efffffff 	.word	0xefffffff
 8005d50:	ff0fffff 	.word	0xff0fffff
 8005d54:	feffffff 	.word	0xfeffffff
 8005d58:	fdffffff 	.word	0xfdffffff
 8005d5c:	dfffffff 	.word	0xdfffffff

08005d60 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d60:	4770      	bx	lr

08005d62 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d64:	4770      	bx	lr

08005d66 <memset>:
 8005d66:	0003      	movs	r3, r0
 8005d68:	1882      	adds	r2, r0, r2
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d100      	bne.n	8005d70 <memset+0xa>
 8005d6e:	4770      	bx	lr
 8005d70:	7019      	strb	r1, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	e7f9      	b.n	8005d6a <memset+0x4>
	...

08005d78 <__errno>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	@ (8005d80 <__errno+0x8>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	4770      	bx	lr
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	20000010 	.word	0x20000010

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	2600      	movs	r6, #0
 8005d88:	4c0c      	ldr	r4, [pc, #48]	@ (8005dbc <__libc_init_array+0x38>)
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc0 <__libc_init_array+0x3c>)
 8005d8c:	1b64      	subs	r4, r4, r5
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	2600      	movs	r6, #0
 8005d96:	f000 fa07 	bl	80061a8 <_init>
 8005d9a:	4c0a      	ldr	r4, [pc, #40]	@ (8005dc4 <__libc_init_array+0x40>)
 8005d9c:	4d0a      	ldr	r5, [pc, #40]	@ (8005dc8 <__libc_init_array+0x44>)
 8005d9e:	1b64      	subs	r4, r4, r5
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	00b3      	lsls	r3, r6, #2
 8005daa:	58eb      	ldr	r3, [r5, r3]
 8005dac:	4798      	blx	r3
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	00b3      	lsls	r3, r6, #2
 8005db4:	58eb      	ldr	r3, [r5, r3]
 8005db6:	4798      	blx	r3
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	08006488 	.word	0x08006488
 8005dc0:	08006488 	.word	0x08006488
 8005dc4:	0800648c 	.word	0x0800648c
 8005dc8:	08006488 	.word	0x08006488

08005dcc <log>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	0004      	movs	r4, r0
 8005dd0:	000d      	movs	r5, r1
 8005dd2:	f000 f837 	bl	8005e44 <__ieee754_log>
 8005dd6:	0022      	movs	r2, r4
 8005dd8:	0006      	movs	r6, r0
 8005dda:	000f      	movs	r7, r1
 8005ddc:	002b      	movs	r3, r5
 8005dde:	0020      	movs	r0, r4
 8005de0:	0029      	movs	r1, r5
 8005de2:	f7fc ffd7 	bl	8002d94 <__aeabi_dcmpun>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d115      	bne.n	8005e16 <log+0x4a>
 8005dea:	2200      	movs	r2, #0
 8005dec:	2300      	movs	r3, #0
 8005dee:	0020      	movs	r0, r4
 8005df0:	0029      	movs	r1, r5
 8005df2:	f7fa fa3f 	bl	8000274 <__aeabi_dcmpgt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d10d      	bne.n	8005e16 <log+0x4a>
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	0020      	movs	r0, r4
 8005e00:	0029      	movs	r1, r5
 8005e02:	f7fa fa1d 	bl	8000240 <__aeabi_dcmpeq>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d008      	beq.n	8005e1c <log+0x50>
 8005e0a:	f7ff ffb5 	bl	8005d78 <__errno>
 8005e0e:	2322      	movs	r3, #34	@ 0x22
 8005e10:	2600      	movs	r6, #0
 8005e12:	4f07      	ldr	r7, [pc, #28]	@ (8005e30 <log+0x64>)
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	0030      	movs	r0, r6
 8005e18:	0039      	movs	r1, r7
 8005e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e1c:	f7ff ffac 	bl	8005d78 <__errno>
 8005e20:	2321      	movs	r3, #33	@ 0x21
 8005e22:	6003      	str	r3, [r0, #0]
 8005e24:	4803      	ldr	r0, [pc, #12]	@ (8005e34 <log+0x68>)
 8005e26:	f000 f807 	bl	8005e38 <nan>
 8005e2a:	0006      	movs	r6, r0
 8005e2c:	000f      	movs	r7, r1
 8005e2e:	e7f2      	b.n	8005e16 <log+0x4a>
 8005e30:	fff00000 	.word	0xfff00000
 8005e34:	08006484 	.word	0x08006484

08005e38 <nan>:
 8005e38:	2000      	movs	r0, #0
 8005e3a:	4901      	ldr	r1, [pc, #4]	@ (8005e40 <nan+0x8>)
 8005e3c:	4770      	bx	lr
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	7ff80000 	.word	0x7ff80000

08005e44 <__ieee754_log>:
 8005e44:	2380      	movs	r3, #128	@ 0x80
 8005e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e48:	035b      	lsls	r3, r3, #13
 8005e4a:	000e      	movs	r6, r1
 8005e4c:	b08d      	sub	sp, #52	@ 0x34
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	da23      	bge.n	8005e9a <__ieee754_log+0x56>
 8005e52:	004b      	lsls	r3, r1, #1
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	4303      	orrs	r3, r0
 8005e58:	d107      	bne.n	8005e6a <__ieee754_log+0x26>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2000      	movs	r0, #0
 8005e60:	49b4      	ldr	r1, [pc, #720]	@ (8006134 <__ieee754_log+0x2f0>)
 8005e62:	f7fb fcef 	bl	8001844 <__aeabi_ddiv>
 8005e66:	b00d      	add	sp, #52	@ 0x34
 8005e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	da06      	bge.n	8005e7c <__ieee754_log+0x38>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	000b      	movs	r3, r1
 8005e72:	f7fc fbf3 	bl	800265c <__aeabi_dsub>
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e7f2      	b.n	8005e62 <__ieee754_log+0x1e>
 8005e7c:	4bae      	ldr	r3, [pc, #696]	@ (8006138 <__ieee754_log+0x2f4>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f7fc f924 	bl	80020cc <__aeabi_dmul>
 8005e84:	2336      	movs	r3, #54	@ 0x36
 8005e86:	000e      	movs	r6, r1
 8005e88:	425b      	negs	r3, r3
 8005e8a:	4aac      	ldr	r2, [pc, #688]	@ (800613c <__ieee754_log+0x2f8>)
 8005e8c:	4296      	cmp	r6, r2
 8005e8e:	dd06      	ble.n	8005e9e <__ieee754_log+0x5a>
 8005e90:	0002      	movs	r2, r0
 8005e92:	000b      	movs	r3, r1
 8005e94:	f7fb f972 	bl	800117c <__aeabi_dadd>
 8005e98:	e7e5      	b.n	8005e66 <__ieee754_log+0x22>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e7f5      	b.n	8005e8a <__ieee754_log+0x46>
 8005e9e:	4ca8      	ldr	r4, [pc, #672]	@ (8006140 <__ieee754_log+0x2fc>)
 8005ea0:	1532      	asrs	r2, r6, #20
 8005ea2:	1912      	adds	r2, r2, r4
 8005ea4:	0336      	lsls	r6, r6, #12
 8005ea6:	4ca7      	ldr	r4, [pc, #668]	@ (8006144 <__ieee754_log+0x300>)
 8005ea8:	18d2      	adds	r2, r2, r3
 8005eaa:	0b33      	lsrs	r3, r6, #12
 8005eac:	9302      	str	r3, [sp, #8]
 8005eae:	191b      	adds	r3, r3, r4
 8005eb0:	2480      	movs	r4, #128	@ 0x80
 8005eb2:	0364      	lsls	r4, r4, #13
 8005eb4:	4023      	ands	r3, r4
 8005eb6:	4ca4      	ldr	r4, [pc, #656]	@ (8006148 <__ieee754_log+0x304>)
 8005eb8:	9d02      	ldr	r5, [sp, #8]
 8005eba:	405c      	eors	r4, r3
 8005ebc:	151b      	asrs	r3, r3, #20
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	4325      	orrs	r5, r4
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	0029      	movs	r1, r5
 8005ec8:	4b9f      	ldr	r3, [pc, #636]	@ (8006148 <__ieee754_log+0x304>)
 8005eca:	f7fc fbc7 	bl	800265c <__aeabi_dsub>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	0006      	movs	r6, r0
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	031b      	lsls	r3, r3, #12
 8005ed6:	000f      	movs	r7, r1
 8005ed8:	2200      	movs	r2, #0
 8005eda:	0b1b      	lsrs	r3, r3, #12
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	dc64      	bgt.n	8005faa <__ieee754_log+0x166>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f7fa f9ad 	bl	8000240 <__aeabi_dcmpeq>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d019      	beq.n	8005f1e <__ieee754_log+0xda>
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d100      	bne.n	8005ef2 <__ieee754_log+0xae>
 8005ef0:	e11c      	b.n	800612c <__ieee754_log+0x2e8>
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7fc ffac 	bl	8002e50 <__aeabi_i2d>
 8005ef8:	4a94      	ldr	r2, [pc, #592]	@ (800614c <__ieee754_log+0x308>)
 8005efa:	4b95      	ldr	r3, [pc, #596]	@ (8006150 <__ieee754_log+0x30c>)
 8005efc:	0004      	movs	r4, r0
 8005efe:	000d      	movs	r5, r1
 8005f00:	f7fc f8e4 	bl	80020cc <__aeabi_dmul>
 8005f04:	4a93      	ldr	r2, [pc, #588]	@ (8006154 <__ieee754_log+0x310>)
 8005f06:	0006      	movs	r6, r0
 8005f08:	000f      	movs	r7, r1
 8005f0a:	4b93      	ldr	r3, [pc, #588]	@ (8006158 <__ieee754_log+0x314>)
 8005f0c:	0020      	movs	r0, r4
 8005f0e:	0029      	movs	r1, r5
 8005f10:	f7fc f8dc 	bl	80020cc <__aeabi_dmul>
 8005f14:	0002      	movs	r2, r0
 8005f16:	000b      	movs	r3, r1
 8005f18:	0030      	movs	r0, r6
 8005f1a:	0039      	movs	r1, r7
 8005f1c:	e7ba      	b.n	8005e94 <__ieee754_log+0x50>
 8005f1e:	4a8f      	ldr	r2, [pc, #572]	@ (800615c <__ieee754_log+0x318>)
 8005f20:	4b8f      	ldr	r3, [pc, #572]	@ (8006160 <__ieee754_log+0x31c>)
 8005f22:	0030      	movs	r0, r6
 8005f24:	0039      	movs	r1, r7
 8005f26:	f7fc f8d1 	bl	80020cc <__aeabi_dmul>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	000b      	movs	r3, r1
 8005f2e:	2000      	movs	r0, #0
 8005f30:	498c      	ldr	r1, [pc, #560]	@ (8006164 <__ieee754_log+0x320>)
 8005f32:	f7fc fb93 	bl	800265c <__aeabi_dsub>
 8005f36:	0032      	movs	r2, r6
 8005f38:	0004      	movs	r4, r0
 8005f3a:	000d      	movs	r5, r1
 8005f3c:	003b      	movs	r3, r7
 8005f3e:	0030      	movs	r0, r6
 8005f40:	0039      	movs	r1, r7
 8005f42:	f7fc f8c3 	bl	80020cc <__aeabi_dmul>
 8005f46:	000b      	movs	r3, r1
 8005f48:	0002      	movs	r2, r0
 8005f4a:	0029      	movs	r1, r5
 8005f4c:	0020      	movs	r0, r4
 8005f4e:	f7fc f8bd 	bl	80020cc <__aeabi_dmul>
 8005f52:	9b00      	ldr	r3, [sp, #0]
 8005f54:	9002      	str	r0, [sp, #8]
 8005f56:	9103      	str	r1, [sp, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <__ieee754_log+0x126>
 8005f5c:	0002      	movs	r2, r0
 8005f5e:	000b      	movs	r3, r1
 8005f60:	0030      	movs	r0, r6
 8005f62:	0039      	movs	r1, r7
 8005f64:	f7fc fb7a 	bl	800265c <__aeabi_dsub>
 8005f68:	e77d      	b.n	8005e66 <__ieee754_log+0x22>
 8005f6a:	9800      	ldr	r0, [sp, #0]
 8005f6c:	f7fc ff70 	bl	8002e50 <__aeabi_i2d>
 8005f70:	4a76      	ldr	r2, [pc, #472]	@ (800614c <__ieee754_log+0x308>)
 8005f72:	4b77      	ldr	r3, [pc, #476]	@ (8006150 <__ieee754_log+0x30c>)
 8005f74:	0004      	movs	r4, r0
 8005f76:	000d      	movs	r5, r1
 8005f78:	f7fc f8a8 	bl	80020cc <__aeabi_dmul>
 8005f7c:	4a75      	ldr	r2, [pc, #468]	@ (8006154 <__ieee754_log+0x310>)
 8005f7e:	9000      	str	r0, [sp, #0]
 8005f80:	9101      	str	r1, [sp, #4]
 8005f82:	4b75      	ldr	r3, [pc, #468]	@ (8006158 <__ieee754_log+0x314>)
 8005f84:	0020      	movs	r0, r4
 8005f86:	0029      	movs	r1, r5
 8005f88:	f7fc f8a0 	bl	80020cc <__aeabi_dmul>
 8005f8c:	0002      	movs	r2, r0
 8005f8e:	000b      	movs	r3, r1
 8005f90:	9802      	ldr	r0, [sp, #8]
 8005f92:	9903      	ldr	r1, [sp, #12]
 8005f94:	f7fc fb62 	bl	800265c <__aeabi_dsub>
 8005f98:	0032      	movs	r2, r6
 8005f9a:	003b      	movs	r3, r7
 8005f9c:	f7fc fb5e 	bl	800265c <__aeabi_dsub>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	000b      	movs	r3, r1
 8005fa4:	9800      	ldr	r0, [sp, #0]
 8005fa6:	9901      	ldr	r1, [sp, #4]
 8005fa8:	e7dc      	b.n	8005f64 <__ieee754_log+0x120>
 8005faa:	2380      	movs	r3, #128	@ 0x80
 8005fac:	05db      	lsls	r3, r3, #23
 8005fae:	f7fb f8e5 	bl	800117c <__aeabi_dadd>
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	000b      	movs	r3, r1
 8005fb6:	0030      	movs	r0, r6
 8005fb8:	0039      	movs	r1, r7
 8005fba:	f7fb fc43 	bl	8001844 <__aeabi_ddiv>
 8005fbe:	9004      	str	r0, [sp, #16]
 8005fc0:	9105      	str	r1, [sp, #20]
 8005fc2:	9800      	ldr	r0, [sp, #0]
 8005fc4:	f7fc ff44 	bl	8002e50 <__aeabi_i2d>
 8005fc8:	9a04      	ldr	r2, [sp, #16]
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	9006      	str	r0, [sp, #24]
 8005fce:	9107      	str	r1, [sp, #28]
 8005fd0:	0010      	movs	r0, r2
 8005fd2:	0019      	movs	r1, r3
 8005fd4:	f7fc f87a 	bl	80020cc <__aeabi_dmul>
 8005fd8:	4a63      	ldr	r2, [pc, #396]	@ (8006168 <__ieee754_log+0x324>)
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	4694      	mov	ip, r2
 8005fde:	4463      	add	r3, ip
 8005fe0:	0002      	movs	r2, r0
 8005fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe4:	000b      	movs	r3, r1
 8005fe6:	9008      	str	r0, [sp, #32]
 8005fe8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fea:	f7fc f86f 	bl	80020cc <__aeabi_dmul>
 8005fee:	0004      	movs	r4, r0
 8005ff0:	000d      	movs	r5, r1
 8005ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800616c <__ieee754_log+0x328>)
 8005ff4:	4b5e      	ldr	r3, [pc, #376]	@ (8006170 <__ieee754_log+0x32c>)
 8005ff6:	f7fc f869 	bl	80020cc <__aeabi_dmul>
 8005ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8006174 <__ieee754_log+0x330>)
 8005ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8006178 <__ieee754_log+0x334>)
 8005ffe:	f7fb f8bd 	bl	800117c <__aeabi_dadd>
 8006002:	0022      	movs	r2, r4
 8006004:	002b      	movs	r3, r5
 8006006:	f7fc f861 	bl	80020cc <__aeabi_dmul>
 800600a:	4a5c      	ldr	r2, [pc, #368]	@ (800617c <__ieee754_log+0x338>)
 800600c:	4b5c      	ldr	r3, [pc, #368]	@ (8006180 <__ieee754_log+0x33c>)
 800600e:	f7fb f8b5 	bl	800117c <__aeabi_dadd>
 8006012:	0022      	movs	r2, r4
 8006014:	002b      	movs	r3, r5
 8006016:	f7fc f859 	bl	80020cc <__aeabi_dmul>
 800601a:	4a5a      	ldr	r2, [pc, #360]	@ (8006184 <__ieee754_log+0x340>)
 800601c:	4b5a      	ldr	r3, [pc, #360]	@ (8006188 <__ieee754_log+0x344>)
 800601e:	f7fb f8ad 	bl	800117c <__aeabi_dadd>
 8006022:	9a08      	ldr	r2, [sp, #32]
 8006024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006026:	f7fc f851 	bl	80020cc <__aeabi_dmul>
 800602a:	4a58      	ldr	r2, [pc, #352]	@ (800618c <__ieee754_log+0x348>)
 800602c:	9008      	str	r0, [sp, #32]
 800602e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006030:	4b57      	ldr	r3, [pc, #348]	@ (8006190 <__ieee754_log+0x34c>)
 8006032:	0020      	movs	r0, r4
 8006034:	0029      	movs	r1, r5
 8006036:	f7fc f849 	bl	80020cc <__aeabi_dmul>
 800603a:	4a56      	ldr	r2, [pc, #344]	@ (8006194 <__ieee754_log+0x350>)
 800603c:	4b56      	ldr	r3, [pc, #344]	@ (8006198 <__ieee754_log+0x354>)
 800603e:	f7fb f89d 	bl	800117c <__aeabi_dadd>
 8006042:	0022      	movs	r2, r4
 8006044:	002b      	movs	r3, r5
 8006046:	f7fc f841 	bl	80020cc <__aeabi_dmul>
 800604a:	4a54      	ldr	r2, [pc, #336]	@ (800619c <__ieee754_log+0x358>)
 800604c:	4b54      	ldr	r3, [pc, #336]	@ (80061a0 <__ieee754_log+0x35c>)
 800604e:	f7fb f895 	bl	800117c <__aeabi_dadd>
 8006052:	0022      	movs	r2, r4
 8006054:	002b      	movs	r3, r5
 8006056:	f7fc f839 	bl	80020cc <__aeabi_dmul>
 800605a:	0002      	movs	r2, r0
 800605c:	000b      	movs	r3, r1
 800605e:	9808      	ldr	r0, [sp, #32]
 8006060:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006062:	f7fb f88b 	bl	800117c <__aeabi_dadd>
 8006066:	9a02      	ldr	r2, [sp, #8]
 8006068:	4b4e      	ldr	r3, [pc, #312]	@ (80061a4 <__ieee754_log+0x360>)
 800606a:	0004      	movs	r4, r0
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006070:	000d      	movs	r5, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	dd34      	ble.n	80060e2 <__ieee754_log+0x29e>
 8006078:	2200      	movs	r2, #0
 800607a:	4b3a      	ldr	r3, [pc, #232]	@ (8006164 <__ieee754_log+0x320>)
 800607c:	0030      	movs	r0, r6
 800607e:	0039      	movs	r1, r7
 8006080:	f7fc f824 	bl	80020cc <__aeabi_dmul>
 8006084:	0032      	movs	r2, r6
 8006086:	003b      	movs	r3, r7
 8006088:	f7fc f820 	bl	80020cc <__aeabi_dmul>
 800608c:	0002      	movs	r2, r0
 800608e:	000b      	movs	r3, r1
 8006090:	9002      	str	r0, [sp, #8]
 8006092:	9103      	str	r1, [sp, #12]
 8006094:	0020      	movs	r0, r4
 8006096:	0029      	movs	r1, r5
 8006098:	f7fb f870 	bl	800117c <__aeabi_dadd>
 800609c:	9a04      	ldr	r2, [sp, #16]
 800609e:	9b05      	ldr	r3, [sp, #20]
 80060a0:	f7fc f814 	bl	80020cc <__aeabi_dmul>
 80060a4:	9b00      	ldr	r3, [sp, #0]
 80060a6:	0004      	movs	r4, r0
 80060a8:	000d      	movs	r5, r1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <__ieee754_log+0x278>
 80060ae:	0002      	movs	r2, r0
 80060b0:	000b      	movs	r3, r1
 80060b2:	9802      	ldr	r0, [sp, #8]
 80060b4:	9903      	ldr	r1, [sp, #12]
 80060b6:	f7fc fad1 	bl	800265c <__aeabi_dsub>
 80060ba:	e74f      	b.n	8005f5c <__ieee754_log+0x118>
 80060bc:	4a23      	ldr	r2, [pc, #140]	@ (800614c <__ieee754_log+0x308>)
 80060be:	4b24      	ldr	r3, [pc, #144]	@ (8006150 <__ieee754_log+0x30c>)
 80060c0:	9806      	ldr	r0, [sp, #24]
 80060c2:	9907      	ldr	r1, [sp, #28]
 80060c4:	f7fc f802 	bl	80020cc <__aeabi_dmul>
 80060c8:	4a22      	ldr	r2, [pc, #136]	@ (8006154 <__ieee754_log+0x310>)
 80060ca:	9000      	str	r0, [sp, #0]
 80060cc:	9101      	str	r1, [sp, #4]
 80060ce:	9806      	ldr	r0, [sp, #24]
 80060d0:	9907      	ldr	r1, [sp, #28]
 80060d2:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <__ieee754_log+0x314>)
 80060d4:	f7fb fffa 	bl	80020cc <__aeabi_dmul>
 80060d8:	0022      	movs	r2, r4
 80060da:	002b      	movs	r3, r5
 80060dc:	f7fb f84e 	bl	800117c <__aeabi_dadd>
 80060e0:	e754      	b.n	8005f8c <__ieee754_log+0x148>
 80060e2:	0002      	movs	r2, r0
 80060e4:	000b      	movs	r3, r1
 80060e6:	0030      	movs	r0, r6
 80060e8:	0039      	movs	r1, r7
 80060ea:	f7fc fab7 	bl	800265c <__aeabi_dsub>
 80060ee:	9a04      	ldr	r2, [sp, #16]
 80060f0:	9b05      	ldr	r3, [sp, #20]
 80060f2:	f7fb ffeb 	bl	80020cc <__aeabi_dmul>
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	0004      	movs	r4, r0
 80060fa:	000d      	movs	r5, r1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <__ieee754_log+0x2c2>
 8006100:	0002      	movs	r2, r0
 8006102:	000b      	movs	r3, r1
 8006104:	e72c      	b.n	8005f60 <__ieee754_log+0x11c>
 8006106:	4a11      	ldr	r2, [pc, #68]	@ (800614c <__ieee754_log+0x308>)
 8006108:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <__ieee754_log+0x30c>)
 800610a:	9806      	ldr	r0, [sp, #24]
 800610c:	9907      	ldr	r1, [sp, #28]
 800610e:	f7fb ffdd 	bl	80020cc <__aeabi_dmul>
 8006112:	4a10      	ldr	r2, [pc, #64]	@ (8006154 <__ieee754_log+0x310>)
 8006114:	9000      	str	r0, [sp, #0]
 8006116:	9101      	str	r1, [sp, #4]
 8006118:	9806      	ldr	r0, [sp, #24]
 800611a:	9907      	ldr	r1, [sp, #28]
 800611c:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <__ieee754_log+0x314>)
 800611e:	f7fb ffd5 	bl	80020cc <__aeabi_dmul>
 8006122:	0002      	movs	r2, r0
 8006124:	000b      	movs	r3, r1
 8006126:	0020      	movs	r0, r4
 8006128:	0029      	movs	r1, r5
 800612a:	e733      	b.n	8005f94 <__ieee754_log+0x150>
 800612c:	2000      	movs	r0, #0
 800612e:	2100      	movs	r1, #0
 8006130:	e699      	b.n	8005e66 <__ieee754_log+0x22>
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	c3500000 	.word	0xc3500000
 8006138:	43500000 	.word	0x43500000
 800613c:	7fefffff 	.word	0x7fefffff
 8006140:	fffffc01 	.word	0xfffffc01
 8006144:	00095f64 	.word	0x00095f64
 8006148:	3ff00000 	.word	0x3ff00000
 800614c:	fee00000 	.word	0xfee00000
 8006150:	3fe62e42 	.word	0x3fe62e42
 8006154:	35793c76 	.word	0x35793c76
 8006158:	3dea39ef 	.word	0x3dea39ef
 800615c:	55555555 	.word	0x55555555
 8006160:	3fd55555 	.word	0x3fd55555
 8006164:	3fe00000 	.word	0x3fe00000
 8006168:	fff9eb86 	.word	0xfff9eb86
 800616c:	df3e5244 	.word	0xdf3e5244
 8006170:	3fc2f112 	.word	0x3fc2f112
 8006174:	96cb03de 	.word	0x96cb03de
 8006178:	3fc74664 	.word	0x3fc74664
 800617c:	94229359 	.word	0x94229359
 8006180:	3fd24924 	.word	0x3fd24924
 8006184:	55555593 	.word	0x55555593
 8006188:	3fe55555 	.word	0x3fe55555
 800618c:	d078c69f 	.word	0xd078c69f
 8006190:	3fc39a09 	.word	0x3fc39a09
 8006194:	1d8e78af 	.word	0x1d8e78af
 8006198:	3fcc71c5 	.word	0x3fcc71c5
 800619c:	9997fa04 	.word	0x9997fa04
 80061a0:	3fd99999 	.word	0x3fd99999
 80061a4:	0006b851 	.word	0x0006b851

080061a8 <_init>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr

080061b4 <_fini>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr
